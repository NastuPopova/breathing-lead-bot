const { session } = require('telegraf');
const config = require('../config');

class Middleware {
  constructor(botInstance) {
    this.bot = botInstance;
    this.telegramBot = botInstance.bot;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    this.stats = {
      totalRequests: 0,
      uniqueUsers: new Set(),
      sessionsCreated: 0,
      errorsHandled: 0,
      startTime: Date.now()
    };

    // Rate limiting –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞
    this.rateLimits = new Map();
    this.cleanupInterval = null;
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö middleware
  setup() {
    console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware...');

    // –°–µ—Å—Å–∏–∏
    this.setupSessions();
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    this.setupLogging();
    
    // Rate limiting
    this.setupRateLimiting();
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ middleware
    this.setupErrorHandling();
    
    // –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    this.setupCleanup();
    
    console.log('‚úÖ Middleware –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–π
  setupSessions() {
    this.telegramBot.use(session({
      defaultSession: () => this.getDefaultSession()
    }));

    console.log('‚úÖ –°–µ—Å—Å–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  setupLogging() {
    this.telegramBot.use(async (ctx, next) => {
      const startTime = Date.now();
      const messageText = ctx.message?.text || ctx.callbackQuery?.data || 'callback';
      const userId = ctx.from?.id || 'unknown';
      const username = ctx.from?.username || 'no_username';
      const firstName = ctx.from?.first_name || 'Unknown';

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      this.updateStats(userId);

      // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
      console.log(`[${new Date().toISOString()}] User ${userId} (@${username}, ${firstName}): ${messageText}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º/–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é
      if (!ctx.session) {
        console.warn('‚ö†Ô∏è –°–µ—Å—Å–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—É—é');
        ctx.session = this.getDefaultSession();
        this.stats.sessionsCreated++;
      }

      try {
        await next();
        
        // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        const duration = Date.now() - startTime;
        if (duration > 1000) {
          console.log(`‚è±Ô∏è –ú–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: ${duration}ms –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        }
        
      } catch (error) {
        this.stats.errorsHandled++;
        console.error(`‚ùå –û—à–∏–±–∫–∞ middleware –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
        throw error;
      }
    });

    console.log('‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ');
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ rate limiting
  setupRateLimiting() {
    this.telegramBot.use(async (ctx, next) => {
      const userId = ctx.from?.id;
      if (!userId) return next();

      const now = Date.now();
      const userLimits = this.rateLimits.get(userId) || { requests: [], lastRequest: 0 };

      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã (—Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã)
      userLimits.requests = userLimits.requests.filter(time => now - time < 60000);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
      if (this.checkRateLimit(ctx, userLimits, now)) {
        userLimits.requests.push(now);
        userLimits.lastRequest = now;
        this.rateLimits.set(userId, userLimits);
        return next();
      } else {
        console.warn(`üö´ Rate limit –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        await this.handleRateLimitExceeded(ctx);
      }
    });

    console.log('‚úÖ Rate limiting –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
  checkRateLimit(ctx, userLimits, now) {
    const messageType = this.getMessageType(ctx);
    const limits = config.RATE_LIMITS || {};

    switch (messageType) {
      case 'start':
        const startLimit = limits.survey_start || { max: 3, window: 60000 };
        return userLimits.requests.length < startLimit.max;
        
      case 'contact':
        const contactLimit = limits.contact_submission || { max: 1, window: 300000 };
        const recentContacts = userLimits.requests.filter(time => now - time < contactLimit.window);
        return recentContacts.length < contactLimit.max;
        
      default:
        // –û–±—â–∏–π –ª–∏–º–∏—Ç: 30 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
        return userLimits.requests.length < 30;
    }
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  getMessageType(ctx) {
    if (ctx.message?.text === '/start' || ctx.callbackQuery?.data === 'start_survey') {
      return 'start';
    }
    if (ctx.callbackQuery?.data === 'contact_request') {
      return 'contact';
    }
    return 'general';
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
  async handleRateLimitExceeded(ctx) {
    const messageType = this.getMessageType(ctx);
    
    let message = '‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º.';
    
    if (messageType === 'start') {
      message = '‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç—É. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É.';
    } else if (messageType === 'contact') {
      message = '‚è≥ –ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 –º–∏–Ω—É—Ç.';
    }

    try {
      await ctx.reply(message);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ rate limit:', error);
    }
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ middleware
  setupErrorHandling() {
    this.telegramBot.use(async (ctx, next) => {
      try {
        await next();
      } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞ –≤ middleware chain:', {
          error: error.message,
          stack: error.stack,
          user_id: ctx.from?.id,
          message_type: ctx.message ? 'message' : 'callback',
          timestamp: new Date().toISOString()
        });

        // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞
        if (error.message.includes('session') || !ctx.session) {
          console.log('üîß –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é');
          ctx.session = this.getDefaultSession();
          this.stats.sessionsCreated++;
        }

        throw error; // –ü–µ—Ä–µ–¥–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
      }
    });

    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ middleware –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  setupCleanup() {
    // –û—á–∏—â–∞–µ–º rate limits –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    this.cleanupInterval = setInterval(() => {
      this.cleanupRateLimits();
      this.cleanupStats();
    }, 5 * 60 * 1000);

    console.log('‚úÖ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö rate limits
  cleanupRateLimits() {
    const now = Date.now();
    let cleaned = 0;

    for (const [userId, userLimits] of this.rateLimits.entries()) {
      // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã –±–æ–ª–µ–µ 1 —á–∞—Å–∞
      if (now - userLimits.lastRequest > 3600000) {
        this.rateLimits.delete(userId);
        cleaned++;
      }
    }

    if (cleaned > 0) {
      console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${cleaned} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö rate limits`);
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  cleanupStats() {
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000)
    if (this.stats.uniqueUsers.size > 1000) {
      const users = Array.from(this.stats.uniqueUsers);
      this.stats.uniqueUsers = new Set(users.slice(-1000));
      console.log('üßπ –û—á–∏—â–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  updateStats(userId) {
    this.stats.totalRequests++;
    this.stats.uniqueUsers.add(userId);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏
  getDefaultSession() {
    return {
      currentQuestion: null,
      answers: {},
      multipleChoiceSelections: {},
      startTime: Date.now(),
      questionStartTime: Date.now(),  
      completedQuestions: [],
      navigationHistory: [],
      analysisResult: null,
      contactInfo: {},
      sessionId: this.generateSessionId(),
      createdAt: new Date().toISOString(),
      lastActivity: Date.now()
    };
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID —Å–µ—Å—Å–∏–∏
  generateSessionId() {
    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
  validateSession(session) {
    if (!session) return false;
    
    const required = ['answers', 'startTime', 'completedQuestions'];
    return required.every(field => session.hasOwnProperty(field));
  }

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
  repairSession(session) {
    const defaultSession = this.getDefaultSession();
    
    return {
      ...defaultSession,
      ...session,
      answers: session.answers || {},
      completedQuestions: session.completedQuestions || [],
      multipleChoiceSelections: session.multipleChoiceSelections || {},
      lastActivity: Date.now()
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ middleware
  getStats() {
    const uptime = Date.now() - this.stats.startTime;
    
    return {
      requests: {
        total: this.stats.totalRequests,
        unique_users: this.stats.uniqueUsers.size,
        requests_per_minute: Math.round(this.stats.totalRequests / (uptime / 60000))
      },
      sessions: {
        created: this.stats.sessionsCreated,
        active_rate_limits: this.rateLimits.size
      },
      errors: {
        handled: this.stats.errorsHandled,
        error_rate: this.stats.totalRequests > 0 ? 
          (this.stats.errorsHandled / this.stats.totalRequests * 100).toFixed(2) + '%' : '0%'
      },
      uptime: {
        milliseconds: uptime,
        minutes: Math.round(uptime / 60000),
        hours: Math.round(uptime / 3600000)
      },
      memory: {
        rate_limits_size: this.rateLimits.size,
        unique_users_size: this.stats.uniqueUsers.size
      },
      last_updated: new Date().toISOString()
    };
  }

  // Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
  logSpecialEvent(eventType, userId, data = {}) {
    const logEntry = {
      event: eventType,
      timestamp: new Date().toISOString(),
      user_id: userId,
      data: data
    };

    console.log(`üìä –°–û–ë–´–¢–ò–ï [${eventType}]:`, JSON.stringify(logEntry, null, 2));
  }

  // Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Å—Å–∏–∏
  setupHealthCheck() {
    this.telegramBot.use(async (ctx, next) => {
      if (ctx.session) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        ctx.session.lastActivity = Date.now();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
        if (!this.validateSession(ctx.session)) {
          console.warn(`‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.id}, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º`);
          ctx.session = this.repairSession(ctx.session);
        }
      }
      
      return next();
    });
  }

  // Middleware –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∞–Ω–∫–µ—Ç—ã
  setupProgressTracking() {
    this.telegramBot.use(async (ctx, next) => {
      if (ctx.session?.currentQuestion && ctx.callbackQuery) {
        const progress = {
          user_id: ctx.from.id,
          question: ctx.session.currentQuestion,
          action: ctx.callbackQuery.data,
          timestamp: Date.now(),
          session_duration: Date.now() - ctx.session.startTime
        };
        
        this.logSpecialEvent('survey_progress', ctx.from.id, progress);
      }
      
      return next();
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  getUserInfo(ctx) {
    return {
      id: ctx.from?.id,
      username: ctx.from?.username,
      first_name: ctx.from?.first_name,
      last_name: ctx.from?.last_name,
      language_code: ctx.from?.language_code,
      is_bot: ctx.from?.is_bot
    };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
  getMessageInfo(ctx) {
    if (ctx.message) {
      return {
        type: 'message',
        text: ctx.message.text,
        date: ctx.message.date,
        chat_id: ctx.message.chat.id
      };
    }
    
    if (ctx.callbackQuery) {
      return {
        type: 'callback_query',
        data: ctx.callbackQuery.data,
        message_id: ctx.callbackQuery.message?.message_id,
        chat_id: ctx.callbackQuery.message?.chat?.id
      };
    }
    
    return { type: 'unknown' };
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ middleware (–æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤)
  stop() {
    if (this.cleanupInterval) {
      clearInterval(this.cleanupInterval);
      this.cleanupInterval = null;
      console.log('‚úÖ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ middleware –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    this.rateLimits.clear();
    this.stats.uniqueUsers.clear();
    
    console.log('‚úÖ Middleware –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –æ—á–∏—â–µ–Ω');
  }

  // –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ middleware
  exportConfig() {
    return {
      name: 'Middleware',
      version: '2.5.0',
      features: {
        sessions: true,
        logging: true,
        rate_limiting: true,
        error_handling: true,
        auto_cleanup: true,
        progress_tracking: true,
        health_checks: true
      },
      stats: this.getStats(),
      configuration: {
        cleanup_interval: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
        rate_limit_window: 60000, // 1 –º–∏–Ω—É—Ç–∞
        session_timeout: 3600000, // 1 —á–∞—Å
        max_unique_users: 1000
      },
      last_updated: new Date().toISOString()
    };
  }
}

module.exports = Middleware;
