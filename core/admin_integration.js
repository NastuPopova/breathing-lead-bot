// –§–∞–π–ª: core/admin_integration.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
const EnhancedAdminPanel = require('../modules/admin/enhanced_admin_panel');
const config = require('../config');

class AdminIntegration {
  constructor(botInstance) {
    this.bot = botInstance;
    this.telegramBot = botInstance.bot;
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥—É–ª–∏
    this.adminNotifications = botInstance.adminNotifications;
    this.verseAnalysis = botInstance.verseAnalysis;
    this.leadTransfer = botInstance.leadTransfer;
    this.pdfManager = botInstance.pdfManager;
    
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    this.adminPanel = new EnhancedAdminPanel(
      this.telegramBot,
      this.adminNotifications,
      this.verseAnalysis,
      this.leadTransfer
    );
  }

  initialize() {
    console.log('üéõÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏...');
    
    try {
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º leadDataStorage –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
      if (!this.adminNotifications.leadDataStorage) {
        this.adminNotifications.leadDataStorage = {};
        console.log('‚ö†Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø—É—Å—Ç–æ–µ leadDataStorage');
      }
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
      this.adminPanel.initialize();
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ callback'—ã
      this.setupAdditionalCallbacks();
      
      console.log('‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:', error);
      this.sendEmergencyAlert('system_error', '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏', { error: error.message });
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö callbacks
  setupAdditionalCallbacks() {
    // Callback –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å PDF –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
    this.telegramBot.action('admin_pdf_stats', async (ctx) => {
      if (ctx.from.id.toString() !== this.adminPanel.adminId) {
        await ctx.answerCbQuery('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        return;
      }

      await ctx.answerCbQuery();
      
      const pdfStats = this.pdfManager?.getBonusStats() || {};
      
      let message = `üìÑ *–°–¢–ê–¢–ò–°–¢–ò–ö–ê PDF –§–ê–ô–õ–û–í*\n\n`;
      message += `üìä –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${pdfStats.totalDelivered || 0}\n\n`;
      message += `üìà –ü–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º:\n`;
      Object.entries(pdfStats.bySegment || {}).forEach(([segment, count]) => {
        const emoji = this.getSegmentEmoji(segment);
        message += `${emoji} ${segment}: ${count}\n`;
      });
      message += `\nüìã –ü–æ —Ç–∏–ø–∞–º –¥–æ—Å—Ç–∞–≤–∫–∏:\n`;
      Object.entries(pdfStats.byDeliveryMethod || {}).forEach(([method, count]) => {
        message += `‚Ä¢ ${method}: ${count}\n`;
      });

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' }]
          ]
        }
      });
    });

    // Callback –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ VERSE
    this.telegramBot.action('admin_verse_analysis', async (ctx) => {
      if (ctx.from.id.toString() !== this.adminPanel.adminId) {
        await ctx.answerCbQuery('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        return;
      }

      await ctx.answerCbQuery();
      
      const leads = Object.values(this.adminNotifications.leadDataStorage || {});
      const analysisStats = this.analyzeVERSEPerformance(leads);
      
      let message = `üß† *–ê–ù–ê–õ–ò–ó VERSE –°–ò–°–¢–ï–ú–´*\n\n`;
      message += `üìä –í—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–æ–≤: ${analysisStats.totalAnalyses}\n`;
      message += `üìà –°—Ä–µ–¥–Ω–∏–µ –±–∞–ª–ª—ã:\n`;
      message += `‚Ä¢ –°—Ä–æ—á–Ω–æ—Å—Ç—å: ${analysisStats.averageScores.urgency}/100\n`;
      message += `‚Ä¢ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: ${analysisStats.averageScores.readiness}/100\n`;
      message += `‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: ${analysisStats.averageScores.fit}/100\n\n`;
      message += `üéØ –¢–æ—á–Ω–æ—Å—Ç—å —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏:\n`;
      message += `‚Ä¢ HOT_LEAD: ${analysisStats.segmentAccuracy.HOT_LEAD}%\n`;
      message += `‚Ä¢ WARM_LEAD: ${analysisStats.segmentAccuracy.WARM_LEAD}%\n`;

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ê–Ω–∞–ª–∏—Ç–∏–∫–∞', callback_data: 'admin_analytics' }]
          ]
        }
      });
    });

    console.log('‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ admin callbacks –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }

  // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ VERSE
  analyzeVERSEPerformance(leads) {
    if (!leads.length) {
      return {
        totalAnalyses: 0,
        averageScores: { urgency: 0, readiness: 0, fit: 0 },
        segmentAccuracy: { HOT_LEAD: 0, WARM_LEAD: 0, COLD_LEAD: 0, NURTURE_LEAD: 0 }
      };
    }

    const validLeads = leads.filter(lead => lead.analysisResult?.scores);
    const totalScores = { urgency: 0, readiness: 0, fit: 0 };
    const segmentCounts = { HOT_LEAD: 0, WARM_LEAD: 0, COLD_LEAD: 0, NURTURE_LEAD: 0 };

    validLeads.forEach(lead => {
      const scores = lead.analysisResult.scores;
      totalScores.urgency += scores.urgency || 0;
      totalScores.readiness += scores.readiness || 0;
      totalScores.fit += scores.fit || 0;
      
      const segment = lead.analysisResult.segment;
      if (segmentCounts.hasOwnProperty(segment)) {
        segmentCounts[segment]++;
      }
    });

    const averageScores = {
      urgency: validLeads.length > 0 ? Math.round(totalScores.urgency / validLeads.length) : 0,
      readiness: validLeads.length > 0 ? Math.round(totalScores.readiness / validLeads.length) : 0,
      fit: validLeads.length > 0 ? Math.round(totalScores.fit / validLeads.length) : 0
    };

    const totalLeads = validLeads.length;
    const segmentAccuracy = {};
    Object.entries(segmentCounts).forEach(([segment, count]) => {
      segmentAccuracy[segment] = totalLeads > 0 ? Math.round((count / totalLeads) * 100) : 0;
    });

    return {
      totalAnalyses: validLeads.length,
      averageScores,
      segmentAccuracy
    };
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ admin callbacks
  async handleAdminCallback(ctx, callbackData) {
    if (ctx.from.id.toString() !== config.ADMIN_ID) {
      await ctx.answerCbQuery('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }

    await ctx.answerCbQuery();
    
    try {
      console.log(`üîç Admin callback: ${callbackData}`);
      
      // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–Ω–µ–ª–∏
      if (callbackData === 'admin_main' || callbackData === 'admin_refresh') {
        await this.adminPanel.showMainPanel(ctx);
      } else if (callbackData === 'admin_stats') {
        await this.adminPanel.showDetailedStats(ctx);
      } else if (callbackData === 'admin_analytics') {
        await this.adminPanel.showAnalytics(ctx);
      } else if (callbackData === 'admin_hot_leads') {
        await this.adminPanel.showHotLeads(ctx);
      } else if (callbackData === 'admin_today_leads') {
        await this.adminPanel.showTodayLeads(ctx);
      } else if (callbackData === 'admin_system') {
        await this.adminPanel.showSystemHealth(ctx);
      } else if (callbackData === 'admin_settings') {
        await this.adminPanel.showSettings(ctx);
      } else if (callbackData === 'admin_export') {
        await this.adminPanel.showExportMenu(ctx);
      } else if (callbackData === 'admin_notifications_menu') {
        await this.adminPanel.showNotificationsMenu(ctx);
      } else if (callbackData === 'admin_help') {
        await this.adminPanel.showHelp(ctx);
      } 
      
      // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
      else if (callbackData === 'admin_diagnostics') {
        await this.sendDiagnosticsToAdmin(ctx);
      } else if (callbackData === 'admin_detailed_diagnostics') {
        await this.showDetailedDiagnostics(ctx);
      } else if (callbackData === 'admin_logs') {
        await this.showSystemLogs(ctx);
      }
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
      else if (callbackData === 'admin_pdf_stats') {
        // –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ setupAdditionalCallbacks
      } else if (callbackData === 'admin_verse_analysis') {
        // –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ setupAdditionalCallbacks
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      else if (callbackData.startsWith('admin_')) {
        const parts = callbackData.split('_');
        if (parts.length >= 3) {
          const action = parts.slice(1, -1).join('_');
          const targetUserId = parts[parts.length - 1];
          
          console.log(`üîç Admin callback parsed: action=${action}, userId=${targetUserId}`);
          
          await this.adminNotifications.handleAdminCallback(ctx, action, targetUserId);
        } else {
          console.warn('‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback:', callbackData);
          await ctx.reply('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã');
        }
      } else {
        console.warn('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback:', callbackData);
        await ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handleAdminCallback:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã');
      await this.sendEmergencyAlert('system_error', '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ admin callback', {
        error: error.message,
        callbackData,
        user_id: ctx.from.id
      });
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
  async runDiagnostics() {
    const results = {
      timestamp: new Date().toISOString(),
      overall_status: 'UNKNOWN',
      checks: {}
    };

    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
      results.checks.admin_panel = {
        status: this.adminPanel ? 'OK' : 'ERROR',
        message: this.adminPanel ? '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω–∞' : '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'
      };

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π
      results.checks.modules = {
        status: 'OK',
        details: {
          admin_notifications: !!this.adminNotifications,
          verse_analysis: !!this.verseAnalysis,
          lead_transfer: !!this.leadTransfer,
          pdf_manager: !!this.pdfManager
        }
      };

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
      const leadsCount = Object.keys(this.adminNotifications.leadDataStorage || {}).length;
      results.checks.data_integrity = {
        status: 'OK',
        leads_count: leadsCount,
        message: `–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${leadsCount} –ª–∏–¥–æ–≤`
      };

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      const requiredConfig = ['LEAD_BOT_TOKEN', 'ADMIN_ID'];
      const missingConfig = requiredConfig.filter(key => !config[key]);

      results.checks.configuration = {
        status: missingConfig.length === 0 ? 'OK' : 'WARNING',
        missing: missingConfig,
        message: missingConfig.length === 0 ? 
          '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞' : 
          `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: ${missingConfig.join(', ')}`
      };

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
      const memUsage = process.memoryUsage();
      const memoryMB = Math.round(memUsage.heapUsed / 1024 / 1024);
      results.checks.memory = {
        status: memoryMB < 500 ? 'OK' : memoryMB < 1000 ? 'WARNING' : 'ERROR',
        usage_mb: memoryMB,
        message: `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ${memoryMB}MB –ø–∞–º—è—Ç–∏`
      };

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
      const statuses = Object.values(results.checks).map(check => check.status);
      if (statuses.includes('ERROR')) {
        results.overall_status = 'ERROR';
      } else if (statuses.includes('WARNING')) {
        results.overall_status = 'WARNING';
      } else {
        results.overall_status = 'OK';
      }

    } catch (error) {
      results.overall_status = 'ERROR';
      results.error = error.message;
    }

    return results;
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  async sendDiagnosticsToAdmin(ctx) {
    try {
      const diagnostics = await this.runDiagnostics();
      
      let message = `üîß *–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´*\n\n`;
      
      const statusEmoji = {
        'OK': '‚úÖ',
        'WARNING': '‚ö†Ô∏è',
        'ERROR': '‚ùå',
        'UNKNOWN': '‚ùì'
      };

      message += `${statusEmoji[diagnostics.overall_status]} **–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:** ${diagnostics.overall_status}\n\n`;

      Object.entries(diagnostics.checks).forEach(([checkName, result]) => {
        const emoji = statusEmoji[result.status] || '‚ùì';
        const name = checkName.replace(/_/g, ' ').toUpperCase();
        message += `${emoji} **${name}:**\n`;
        message += `‚îî‚îÄ ${result.message}\n`;
        
        if (result.details) {
          Object.entries(result.details).forEach(([key, value]) => {
            message += `   ‚Ä¢ ${key}: ${value ? '‚úÖ' : '‚ùå'}\n`;
          });
        }
        message += `\n`;
      });

      message += `üïê ${new Date().toLocaleString('ru-RU')}`;

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîß –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', callback_data: 'admin_detailed_diagnostics' }],
            [{ text: 'üéõÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
          ]
        }
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
      await ctx.reply('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏', {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
          ]
        }
      });
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
  async showDetailedDiagnostics(ctx) {
    try {
      const diagnostics = await this.runDiagnostics();
      const health = await this.getSystemHealthOverview();
      
      let message = `üîç *–î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê*\n\n`;
      
      const statusEmoji = {
        'OK': '‚úÖ',
        'WARNING': '‚ö†Ô∏è',
        'ERROR': '‚ùå',
        'UNKNOWN': '‚ùì'
      };

      message += `${statusEmoji[diagnostics.overall_status]} **–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:** ${diagnostics.overall_status}\n`;
      message += `üïê –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n\n`;

      // –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      message += `üìä *–°–ò–°–¢–ï–ú–ê:*\n`;
      message += `‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${this.formatUptime(health.uptime)}\n`;
      message += `‚Ä¢ –ü–∞–º—è—Ç—å: ${diagnostics.checks.memory.usage_mb}MB\n`;
      message += `‚Ä¢ –°—Ç–∞—Ç—É—Å: ${statusEmoji[diagnostics.checks.memory.status]} ${diagnostics.checks.memory.message}\n\n`;

      // –ú–æ–¥—É–ª–∏
      message += `üì° *–ú–û–î–£–õ–ò:*\n`;
      Object.entries(diagnostics.checks.modules.details).forEach(([module, status]) => {
        const emoji = status ? '‚úÖ' : '‚ùå';
        message += `${emoji} ${module.replace(/_/g, ' ')}\n`;
      });
      message += `\n`;

      // –î–∞–Ω–Ω—ã–µ
      message += `üìã *–î–ê–ù–ù–´–ï:*\n`;
      message += `‚Ä¢ –õ–∏–¥–æ–≤: ${diagnostics.checks.data_integrity.leads_count}\n`;
      message += `‚Ä¢ –°—Ç–∞—Ç—É—Å: ${statusEmoji[diagnostics.checks.data_integrity.status]}\n\n`;

      // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
      message += `‚öôÔ∏è *–ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:*\n`;
      message += `‚Ä¢ –°—Ç–∞—Ç—É—Å: ${statusEmoji[diagnostics.checks.configuration.status]}\n`;
      if (diagnostics.checks.configuration.missing.length > 0) {
        message += `‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: ${diagnostics.checks.configuration.missing.join(', ')}\n`;
      }
      message += `\n`;

      // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
      message += `üîó *–ò–ù–¢–ï–ì–†–ê–¶–ò–ò:*\n`;
      message += `‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç: ${health.integrations.main_bot ? '‚úÖ' : '‚ùå'}\n`;
      message += `‚Ä¢ CRM: ${health.integrations.crm ? '‚úÖ' : '‚ùå'}\n`;
      message += `‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${health.integrations.database ? '‚úÖ' : '‚ùå'}\n`;

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üìã –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã', callback_data: 'admin_logs' },
              { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_detailed_diagnostics' }
            ],
            [
              { text: 'üéõÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }
            ]
          ]
        }
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ showDetailedDiagnostics:', error);
      await ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ª–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã
  async showSystemLogs(ctx) {
    try {
      const logs = [
        { 
          timestamp: new Date(), 
          level: 'INFO', 
          message: '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω–∞' 
        },
        { 
          timestamp: new Date(Date.now() - 300000), 
          level: 'INFO', 
          message: '–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ' 
        },
        { 
          timestamp: new Date(Date.now() - 600000), 
          level: 'INFO', 
          message: '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω' 
        }
      ];

      let message = `üìã *–õ–û–ì–ò –°–ò–°–¢–ï–ú–´*\n\n`;
      
      logs.forEach(log => {
        const emoji = log.level === 'ERROR' ? '‚ùå' : log.level === 'WARN' ? '‚ö†Ô∏è' : '‚úÖ';
        const timeStr = log.timestamp.toLocaleTimeString('ru-RU');
        message += `${emoji} ${timeStr} [${log.level}]\n`;
        message += `   ${log.message}\n\n`;
      });

      message += `üìù –ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${logs.length} —Å–æ–±—ã—Ç–∏–π`;

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏', callback_data: 'admin_logs' },
              { text: 'üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', callback_data: 'admin_detailed_diagnostics' }
            ],
            [
              { text: 'üéõÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }
            ]
          ]
        }
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ showSystemLogs:', error);
      await ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤');
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  async getSystemHealthOverview() {
    return {
      uptime: process.uptime(),
      memory_usage: process.memoryUsage(),
      cpu_usage: process.cpuUsage(),
      bot_status: 'running',
      admin_panel_status: 'active',
      integrations: {
        main_bot: !!config.MAIN_BOT_API_URL,
        crm: !!config.CRM_WEBHOOK_URL,
        database: !!config.DATABASE_URL
      }
    };
  }

  formatUptime(seconds) {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = Math.floor(seconds % 60);
    
    if (hours > 24) {
      const days = Math.floor(hours / 24);
      const remainingHours = hours % 24;
      return `${days}–¥ ${remainingHours}—á ${minutes}–º`;
    }
    
    return `${hours}—á ${minutes}–º ${secs}—Å`;
  }

  getSegmentEmoji(segment) {
    const emojis = {
      'HOT_LEAD': 'üî•',
      'WARM_LEAD': '‚≠ê',
      'COLD_LEAD': '‚ùÑÔ∏è',
      'NURTURE_LEAD': 'üå±'
    };
    return emojis[segment] || '‚ùì';
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  async sendEmergencyAlert(alertType, message, additionalData = {}) {
    if (!this.adminPanel.adminId) return;

    const alertEmojis = {
      'system_error': 'üö®',
      'high_load': '‚ö°',
      'data_corruption': 'üí•',
      'security_issue': 'üõ°Ô∏è',
      'critical_lead': 'üî•'
    };

    const emoji = alertEmojis[alertType] || '‚ö†Ô∏è';
    
    try {
      const alertMessage = `${emoji} *–≠–ö–°–¢–†–ï–ù–ù–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï*\n\n` +
        `**–¢–∏–ø:** ${alertType}\n` +
        `**–°–æ–æ–±—â–µ–Ω–∏–µ:** ${message}\n\n` +
        `**–î–µ—Ç–∞–ª–∏:**\n${JSON.stringify(additionalData, null, 2)}\n\n` +
        `üïê ${new Date().toLocaleString('ru-RU')}`;

      await this.telegramBot.telegram.sendMessage(this.adminPanel.adminId, alertMessage, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', callback_data: 'admin_diagnostics' },
              { text: 'üéõÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }
            ]
          ]
        }
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
  }

  // –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  getExtendedStats() {
    const baseStats = this.adminNotifications.getStats();
    const pdfStats = this.pdfManager?.getBonusStats() || {};
    const leads = Object.values(this.adminNotifications.leadDataStorage || {});
    const verseStats = this.analyzeVERSEPerformance(leads);

    return {
      ...baseStats,
      pdf_delivery: pdfStats,
      verse_analysis: verseStats,
      admin_panel: this.adminPanel.exportStats(),
      system_health: this.getSystemHealthOverview(),
      timestamp: new Date().toISOString()
    };
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
  async createBackup() {
    try {
      const backup = {
        timestamp: new Date().toISOString(),
        version: '1.0.0',
        leads_data: this.adminNotifications.leadDataStorage || {},
        admin_stats: this.adminPanel.exportStats(),
        system_stats: this.getExtendedStats(),
        configuration: {
          notification_settings: this.adminPanel.notificationSettings,
          bot_config: {
            admin_id: config.ADMIN_ID,
            main_bot_url: config.MAIN_BOT_API_URL,
            crm_webhook: config.CRM_WEBHOOK_URL,
            trainer_contact: config.TRAINER_CONTACT
          }
        },
        metadata: {
          total_leads: Object.keys(this.adminNotifications.leadDataStorage || {}).length,
          backup_size: 0,
          created_by: 'admin_panel'
        }
      };

      const backupString = JSON.stringify(backup, null, 2);
      backup.metadata.backup_size = Buffer.byteLength(backupString, 'utf8');

      return backup;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error);
      throw error;
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  async cleanupOldData(daysToKeep = 30) {
    try {
      const cutoffDate = new Date();
      cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);

      let cleanedCount = 0;
      const leadsData = this.adminNotifications.leadDataStorage || {};

      Object.entries(leadsData).forEach(([userId, leadData]) => {
        const leadDate = new Date(leadData.timestamp || 0);
        if (leadDate < cutoffDate) {
          delete leadsData[userId];
          cleanedCount++;
        }
      });

      console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${cleanedCount} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –ª–∏–¥–æ–≤`);

      return {
        cleaned_count: cleanedCount,
        remaining_count: Object.keys(leadsData).length,
        cutoff_date: cutoffDate.toISOString()
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      return { error: error.message };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
  getIntegrationInfo() {
    return {
      name: 'AdminIntegration',
      version: '1.0.0',
      status: 'active',
      features: [
        'enhanced_admin_panel',
        'system_diagnostics',
        'automated_backups',
        'emergency_alerts',
        'data_cleanup',
        'verse_analysis',
        'pdf_statistics'
      ],
      statistics: {
        total_commands: Object.keys(this.adminPanel.panelStats.commandsUsed || {}).length,
        last_access: this.adminPanel.panelStats.lastAccess,
        total_sessions: this.adminPanel.panelStats.totalSessions
      },
      health_status: 'healthy',
      last_updated: new Date().toISOString()
    };
  }

  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
  async shutdown() {
    try {
      console.log('üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã AdminIntegration...');
      
      const backup = await this.createBackup();
      console.log('üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞');
      
      if (this.adminPanel.adminId) {
        await this.telegramBot.telegram.sendMessage(
          this.adminPanel.adminId,
          `üîÑ *–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞*\n\n` +
          `–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞\n` +
          `–í—Å–µ–≥–æ –ª–∏–¥–æ–≤: ${backup.metadata.total_leads}\n` +
          `–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${this.formatUptime(process.uptime())}\n\n` +
          `üïê ${new Date().toLocaleString('ru-RU')}`,
          { parse_mode: 'Markdown' }
        );
      }
      
      console.log('‚úÖ AdminIntegration –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ AdminIntegration:', error);
    }
  }

  // –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –¥–ª—è –∞–¥–º–∏–Ω–∞
  startAdminScheduler() {
    // –ï–∂–µ—á–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    setInterval(async () => {
      const diagnostics = await this.runDiagnostics();
      if (diagnostics.overall_status === 'ERROR') {
        await this.sendEmergencyAlert('system_error', '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ —Å–∏—Å—Ç–µ–º—ã', diagnostics);
      }
    }, 3600000); // –ö–∞–∂–¥—ã–π —á–∞—Å

    // –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    setInterval(async () => {
      const cleanupResult = await this.cleanupOldData(30);
      console.log('üßπ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞:', cleanupResult);
    }, 7 * 24 * 3600000); // –ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é

    // –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤ 9:00
    setInterval(async () => {
      const now = new Date();
      if (now.getHours() === 9 && now.getMinutes() === 0) {
        await this.sendDailyReport();
      }
    }, 60000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

    console.log('‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–¥–º–∏–Ω-–∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω');
  }

  // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
  async sendDailyReport() {
    if (!this.adminPanel.adminId) return;

    try {
      const stats = this.adminNotifications.getStats();
      const today = new Date().toLocaleDateString('ru-RU');
      
      let message = `üìä *–ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–ï–¢*\n`;
      message += `üìÖ ${today}\n\n`;
      
      message += `üë• **–õ–∏–¥—ã –∑–∞ –¥–µ–Ω—å:**\n`;
      message += `‚Ä¢ –í—Å–µ–≥–æ: ${stats.daily_stats?.totalLeads || 0}\n`;
      message += `‚Ä¢ üî• –ì–æ—Ä—è—á–∏–µ: ${stats.daily_stats?.hotLeads || 0}\n`;
      message += `‚Ä¢ ‚≠ê –¢–µ–ø–ª—ã–µ: ${stats.daily_stats?.warmLeads || 0}\n`;
      message += `‚Ä¢ ‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω—ã–µ: ${stats.daily_stats?.coldLeads || 0}\n\n`;
      
      const totalLeads = stats.daily_stats?.totalLeads || 0;
      const hotLeads = stats.daily_stats?.hotLeads || 0;
      const conversion = totalLeads > 0 ? ((hotLeads / totalLeads) * 100).toFixed(1) : 0;
      
      message += `üìà **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**\n`;
      message += `‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –≥–æ—Ä—è—á–∏–µ: ${conversion}%\n`;
      message += `‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª VERSE: ${this.getAverageScore()}/100\n\n`;
      
      message += `üéØ **–°–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:**\n`;
      if (hotLeads > 0) {
        message += `‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å ${hotLeads} –≥–æ—Ä—è—á–∏—Ö –ª–∏–¥–æ–≤\n`;
      }
      if (totalLeads === 0) {
        message += `‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏—á–∏–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ª–∏–¥–æ–≤\n`;
      }
      message += `‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n\n`;
      
      message += `üïê –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç ‚Ä¢ ${new Date().toLocaleTimeString('ru-RU')}`;

      await this.telegramBot.telegram.sendMessage(this.adminPanel.adminId, message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' }],
            [{ text: 'üéõÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
          ]
        }
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞:', error);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞
  getAverageScore() {
    const leads = Object.values(this.adminNotifications.leadDataStorage || {});
    if (!leads.length) return 0;
    
    const scores = leads
      .map(lead => lead.analysisResult?.scores?.total)
      .filter(score => typeof score === 'number');
    
    if (!scores.length) return 0;
    return Math.round(scores.reduce((sum, score) => sum + score, 0) / scores.length);
  }

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
  async restoreFromBackup(backupData) {
    try {
      console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...');

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
      if (!backupData.leads_data || !backupData.timestamp) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏');
      }

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–æ–≤
      this.adminNotifications.leadDataStorage = backupData.leads_data;

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      if (backupData.configuration?.notification_settings) {
        this.adminPanel.notificationSettings = {
          ...this.adminPanel.notificationSettings,
          ...backupData.configuration.notification_settings
        };
      }

      console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${Object.keys(backupData.leads_data).length} –ª–∏–¥–æ–≤`);
      console.log(`üìÖ –î–∞—Ç–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ${backupData.timestamp}`);

      return {
        success: true,
        restored_leads: Object.keys(backupData.leads_data).length,
        backup_date: backupData.timestamp
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }
}

module.exports = AdminIntegration;
