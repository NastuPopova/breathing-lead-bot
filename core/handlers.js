// –§–∞–π–ª: core/handlers.js - –ü–ï–†–ï–ü–ò–°–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –Ω–∞–¥–µ–∂–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π "–ü–æ–¥–æ–±—Ä–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É"

const { Markup } = require('telegraf');
const config = require('../config');

class Handlers {
  constructor(botInstance) {
    this.bot = botInstance;
    this.telegramBot = botInstance.bot;
    
    // –°—Å—ã–ª–∫–∏ –Ω–∞ –º–æ–¥—É–ª–∏ –±–æ—Ç–∞
    this.surveyQuestions = botInstance.surveyQuestions;
    this.verseAnalysis = botInstance.verseAnalysis;
    this.leadTransfer = botInstance.leadTransfer;
    this.pdfManager = botInstance.pdfManager;
    this.adminNotifications = botInstance.adminNotifications;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    this.validateDependencies();
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  validateDependencies() {
    console.log('üîß Handlers: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
    
    const checks = {
      pdfManager: !!this.pdfManager,
      handleHelpChooseProgram: !!this.pdfManager?.handleHelpChooseProgram,
      showMoreMaterials: !!this.pdfManager?.showMoreMaterials,
      surveyQuestions: !!this.surveyQuestions,
      verseAnalysis: !!this.verseAnalysis
    };
    
    Object.entries(checks).forEach(([check, result]) => {
      console.log(`${result ? '‚úÖ' : '‚ùå'} ${check}: ${result}`);
    });
    
    if (!checks.pdfManager) {
      console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: pdfManager –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!');
    }
    
    if (!checks.handleHelpChooseProgram) {
      console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: handleHelpChooseProgram –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!');
    }
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
  setup() {
    console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–±—ã—Ç–∏–π...');

    this.setupUserCommands();
    this.setupUserCallbacks();
    this.setupTextHandlers();
    
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
  setupUserCommands() {
    this.telegramBot.start(async (ctx) => {
      try {
        await this.handleStart(ctx);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start:', error);
        await this.handleError(ctx, error);
      }
    });

    this.telegramBot.help(async (ctx) => {
      try {
        await this.handleHelp(ctx);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /help:', error);
        await this.handleError(ctx, error);
      }
    });

    this.telegramBot.command('restart', async (ctx) => {
      try {
        await this.handleRestart(ctx);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /restart:', error);
        await this.handleError(ctx, error);
      }
    });
    
    // –ù–û–í–ê–Ø –¢–ï–°–¢–û–í–ê–Ø –ö–û–ú–ê–ù–î–ê –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    this.telegramBot.command('test_help', async (ctx) => {
      try {
        await this.handleTestHelp(ctx);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /test_help:', error);
        await ctx.reply('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ' + error.message);
      }
    });
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
  setupUserCallbacks() {
    this.telegramBot.on('callback_query', async (ctx) => {
      try {
        await this.handleUserCallback(ctx);
      } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ callback:', error);
        await this.handleError(ctx, error);
      }
    });
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
  setupTextHandlers() {
    this.telegramBot.on('text', async (ctx) => {
      try {
        await this.handleText(ctx);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ text handler:', error);
        await this.handleError(ctx, error);
      }
    });
  }

  // ===== –û–°–ù–û–í–ù–û–ô CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö =====
  async handleUserCallback(ctx) {
    const callbackData = ctx.callbackQuery.data;
    console.log(`üìû User Callback: ${callbackData} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);

    // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    try {
      await ctx.answerCbQuery();
    } catch (error) {
      console.log('‚ö†Ô∏è answerCbQuery failed:', error.message);
    }

    try {
      // ========================================================================
      // –ü–†–ò–û–†–ò–¢–ï–¢–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê help_choose_program - –ü–ï–†–í–´–ú –î–ï–õ–û–ú!
      // ========================================================================
      if (callbackData === 'help_choose_program') {
        console.log('üéØ === –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò help_choose_program ===');
        
        // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.logCallbackDiagnostics(ctx, callbackData);
        
        // –ù–∞–¥–µ–∂–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ fallback
        return await this.handleProgramHelp(ctx);
      }

      // ========================================================================
      // –û–°–¢–ê–õ–¨–ù–´–ï CALLBACK'–ò
      // ========================================================================
      
      // –ê–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏
      if (callbackData.startsWith('admin_')) {
        console.log('üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏:', callbackData);
        const adminIntegration = this.bot.getAdminPanel();
        if (adminIntegration && adminIntegration.isReady()) {
          return await adminIntegration.handleAdminCallback(ctx, callbackData);
        } else {
          await ctx.reply('üö´ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
          return;
        }
      }

      // –ê–Ω–∫–µ—Ç–∞
      if (callbackData === 'start_survey') {
        await this.startSurvey(ctx);
      } else if (callbackData === 'start_survey_from_about') {
        await this.startSurveyFromAbout(ctx);
      } else if (callbackData === 'about_survey') {
        await this.showAboutSurvey(ctx);
      } else if (callbackData === 'back_to_main') {
        await this.backToMain(ctx);
      } else if (callbackData === 'nav_back') {
        await this.handleNavBack(ctx);
      } else if (callbackData.endsWith('_done')) {
        await this.handleMultipleChoiceDone(ctx, callbackData);
      }
      
      // PDF –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
      else if (callbackData.startsWith('download_pdf_')) {
        await this.handlePDFDownload(ctx);
      } else if (callbackData === 'download_static_adult_antistress') {
        await this.pdfManager.handleDownloadRequest(ctx, callbackData);
      } else if (callbackData === 'download_static_child_games') {
        await this.pdfManager.handleDownloadRequest(ctx, callbackData);
      }
      
      // –ú–µ–Ω—é –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
      else if (callbackData === 'more_materials') {
        await this.pdfManager.showMoreMaterials(ctx);
      } else if (callbackData === 'show_all_programs') {
        await this.pdfManager.showAllPrograms(ctx);
      } else if (callbackData === 'close_menu') {
        await this.pdfManager.closeMenu(ctx);
      } else if (callbackData === 'delete_menu') {
        await this.pdfManager.deleteMenu(ctx);
      }
      
      // –ó–∞–∫–∞–∑—ã –ø—Ä–æ–≥—Ä–∞–º–º
      else if (callbackData === 'order_starter') {
        await this.pdfManager.handleOrderStarter(ctx);
      } else if (callbackData === 'order_individual') {
        await this.pdfManager.handleOrderIndividual(ctx);
      }
      
      // –ö–æ–Ω—Ç–∞–∫—Ç—ã
      else if (callbackData === 'contact_request') {
        await this.handleContactRequest(ctx);
      }
      
      // –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∞–Ω–∫–µ—Ç—ã (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –∫–æ–Ω—Ü–µ)
      else {
        console.log('üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ –∞–Ω–∫–µ—Ç—É:', callbackData);
        await this.handleSurveyAnswer(ctx, callbackData);
      }
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handleUserCallback:', error);
      console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
      console.error('–ö–æ–Ω—Ç–µ–∫—Å—Ç:', {
        callbackData,
        userId: ctx.from?.id,
        hasSession: !!ctx.session,
        pdfManagerExists: !!this.pdfManager
      });
      
      // –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
      await this.handleError(ctx, error);
    }
  }

  // ===== –ù–û–í–´–ô –ú–ï–¢–û–î: –ù–ê–î–ï–ñ–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–ú–û–©–ò –í –í–´–ë–û–†–ï –ü–†–û–ì–†–ê–ú–ú–´ =====
  async handleProgramHelp(ctx) {
    console.log('ü§î handleProgramHelp: –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: pdfManager
      if (!this.pdfManager) {
        console.error('‚ùå pdfManager –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π fallback');
        return await this.showBuiltInProgramHelp(ctx);
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –º–µ—Ç–æ–¥ handleHelpChooseProgram
      if (typeof this.pdfManager.handleHelpChooseProgram !== 'function') {
        console.error('‚ùå handleHelpChooseProgram –Ω–µ —Ñ—É–Ω–∫—Ü–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π fallback');
        return await this.showBuiltInProgramHelp(ctx);
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: —Å–µ—Å—Å–∏—è
      if (!ctx.session) {
        console.log('‚ö†Ô∏è –°–µ—Å—Å–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é');
        ctx.session = this.bot.middleware.getDefaultSession();
      }
      
      console.log('‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –≤—ã–∑—ã–≤–∞–µ–º pdfManager.handleHelpChooseProgram');
      
      // –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥
      await this.pdfManager.handleHelpChooseProgram(ctx);
      
      console.log('‚úÖ handleProgramHelp –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handleProgramHelp:', error);
      console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
      
      // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å
      await this.showBuiltInProgramHelp(ctx);
    }
  }

  // ===== –í–°–¢–†–û–ï–ù–ù–´–ô FALLBACK –î–õ–Ø –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –°–ò–¢–£–ê–¶–ò–ô =====
  async showBuiltInProgramHelp(ctx) {
    console.log('üÜò –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –ø–æ–º–æ—â—å (–ø–æ—Å–ª–µ–¥–Ω–∏–π fallback)');
    
    const message = `ü§î *–ö–ê–ö –í–´–ë–†–ê–¢–¨ –ü–†–û–ì–†–ê–ú–ú–£?*\n\n` +
      `üõí **–°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–æ–º–ø–ª–µ–∫—Ç** ‚Äî –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤ –¥—ã—Ö–∞–Ω–∏—è\n\n` +
      `üë®‚Äç‚öïÔ∏è **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è** ‚Äî –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º\n\n` +
      `üí¨ –î–ª—è —Ç–æ—á–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ [–ê–Ω–∞—Å—Ç–∞—Å–∏–∏ –ü–æ–ø–æ–≤–æ–π](https://t.me/NastuPopova)`;

    const keyboard = [
      [{ text: 'üõí –ó–∞–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–æ–º–ø–ª–µ–∫—Ç', callback_data: 'order_starter' }],
      [{ text: 'üë®‚Äç‚öïÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é', callback_data: 'order_individual' }],
      [{ text: 'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –ê–Ω–∞—Å—Ç–∞—Å–∏–∏', url: 'https://t.me/NastuPopova' }],
      [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º', callback_data: 'more_materials' }]
    ];

    try {
      await this.safeEditOrReply(ctx, message, keyboard);
    } catch (error) {
      console.error('‚ùå –î–∞–∂–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π fallback –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', error);
      // –°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
      await ctx.reply('–î–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∞–ø–∏—à–∏—Ç–µ @NastuPopova');
    }
  }

  // ===== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê =====
  logCallbackDiagnostics(ctx, callbackData) {
    console.log('üîç === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CALLBACK ===');
    console.log('Callback Data:', callbackData);
    console.log('User ID:', ctx.from?.id);
    console.log('Chat ID:', ctx.chat?.id);
    console.log('Session exists:', !!ctx.session);
    
    if (ctx.session) {
      console.log('Session data:', {
        hasAnswers: !!ctx.session.answers,
        answersCount: Object.keys(ctx.session.answers || {}).length,
        hasAnalysisResult: !!ctx.session.analysisResult,
        analysisType: ctx.session.analysisResult?.analysisType,
        segment: ctx.session.analysisResult?.segment
      });
    }
    
    console.log('Dependencies:', {
      pdfManager: !!this.pdfManager,
      handleHelpChooseProgram: !!this.pdfManager?.handleHelpChooseProgram,
      middleware: !!this.bot.middleware
    });
    console.log('='.repeat(40));
  }

  // ===== –¢–ï–°–¢–û–í–ê–Ø –ö–û–ú–ê–ù–î–ê =====
  async handleTestHelp(ctx) {
    console.log('üß™ –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ /test_help');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    const scenarios = [
      {
        name: '–° –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏',
        session: {
          answers: {
            age_group: '31-45',
            stress_level: 7,
            current_problems: ['chronic_stress']
          },
          analysisResult: {
            segment: 'WARM_LEAD',
            analysisType: 'adult',
            primaryIssue: 'chronic_stress'
          }
        }
      },
      {
        name: '–ë–µ–∑ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–∞',
        session: {
          answers: {},
          analysisResult: null
        }
      },
      {
        name: '–ü—É—Å—Ç–∞—è —Å–µ—Å—Å–∏—è',
        session: null
      }
    ];
    
    let message = 'üß™ **–¢–ï–°–¢ –ö–ù–û–ü–ö–ò "–ü–û–î–û–ë–†–ê–¢–¨ –ü–†–û–ì–†–ê–ú–ú–£"**\n\n';
    message += '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n';
    
    const keyboard = scenarios.map((scenario, index) => [
      { text: `${index + 1}. ${scenario.name}`, callback_data: `test_scenario_${index}` }
    ]);
    
    await ctx.reply(message, {
      parse_mode: 'Markdown',
      reply_markup: { inline_keyboard: keyboard }
    });
  }

  // ===== –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ú–ï–¢–û–î–´ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å) =====
  
  async handleStart(ctx) {
    console.log(`üöÄ –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);

    if (!ctx.session) {
      ctx.session = this.bot.middleware.getDefaultSession();
    }

    ctx.session.currentQuestion = null;
    ctx.session.answers = {};
    ctx.session.completedQuestions = [];
    ctx.session.startTime = Date.now();

    const message = config.MESSAGES.WELCOME;
    
    await ctx.reply(message, {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard([
        [Markup.button.callback('üî¨ –ù–∞—á–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É', 'start_survey')],
        [Markup.button.callback('‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ', 'about_survey')]
      ])
    });
  }

  async handleHelp(ctx) {
    const helpMessage = `üÜò *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*\n\n` +
      `üî¨ */start* - –Ω–∞—á–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –¥—ã—Ö–∞–Ω–∏—è\n` +
      `üì± –ü—Ä–æ—Å—Ç–æ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞\n` +
      `‚è±Ô∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç 4-5 –º–∏–Ω—É—Ç\n\n` +
      `üìû –í–æ–ø—Ä–æ—Å—ã? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ [–ê–Ω–∞—Å—Ç–∞—Å–∏–∏ –ü–æ–ø–æ–≤–æ–π](${config.TRAINER_CONTACT})`;

    await ctx.reply(helpMessage, { parse_mode: 'Markdown' });
  }

  async handleRestart(ctx) {
    await ctx.reply('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –∞–Ω–∫–µ—Ç—É...');
    await this.handleStart(ctx);
  }

  // ===== –ê–ù–ö–ï–¢–ê (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º) =====
  
  async startSurvey(ctx) {
    console.log(`üìã –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∫–µ—Ç—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);

    if (!ctx.session) {
      ctx.session = this.bot.middleware.getDefaultSession();
    }

    const firstQuestion = 'age_group';
    ctx.session.currentQuestion = firstQuestion;
    ctx.session.startTime = Date.now();

    await this.askQuestion(ctx, firstQuestion);
  }

  async showAboutSurvey(ctx) {
    const aboutMessage = `üìã *–û –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ –¥—ã—Ö–∞–Ω–∏—è*\n\n` +
      `üéØ *–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:*\n` +
      `‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥—ã—Ö–∞–Ω–∏—è\n` +
      `‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n` +
      `‚Ä¢ –î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –ø–æ–¥ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É\n` +
      `‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏\n\n` +
      `‚è±Ô∏è *–í—Ä–µ–º—è:* 4-5 –º–∏–Ω—É—Ç\n` +
      `üìä *–í–æ–ø—Ä–æ—Å–æ–≤:* 15-18 (–∞–¥–∞–ø—Ç–∏–≤–Ω–æ)\n` +
      `üîí *–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ:* –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º\n\n` +
      `–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?`;

    await ctx.editMessageText(aboutMessage, {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard([
        [Markup.button.callback('üî¨ –î–∞, –Ω–∞—á–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É!', 'start_survey_from_about')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é', 'back_to_main')]
      ])
    });
  }

  async startSurveyFromAbout(ctx) {
    console.log(`üìã –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∫–µ—Ç—É –∏–∑ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);

    if (!ctx.session) {
      ctx.session = this.bot.middleware.getDefaultSession();
    }

    ctx.session.currentQuestion = null;
    ctx.session.answers = {};
    ctx.session.completedQuestions = [];
    ctx.session.startTime = Date.now();

    const firstQuestion = 'age_group';
    ctx.session.currentQuestion = firstQuestion;

    await this.askQuestion(ctx, firstQuestion);
  }

  async backToMain(ctx) {
    const message = config.MESSAGES.WELCOME;
    
    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard([
        [Markup.button.callback('üî¨ –ù–∞—á–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É', 'start_survey')],
        [Markup.button.callback('‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ', 'about_survey')]
      ])
    });
  }

  // ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====
  
  async safeEditOrReply(ctx, message, keyboard) {
    try {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
      });
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ');
    } catch (editError) {
      console.log('‚ö†Ô∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
      try {
        await ctx.reply(message, {
          parse_mode: 'Markdown',
          reply_markup: { inline_keyboard: keyboard }
        });
        console.log('‚úÖ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      } catch (replyError) {
        console.error('‚ùå –ò reply –Ω–µ —É–¥–∞–ª—Å—è:', replyError);
        try {
          await ctx.reply(message.replace(/\*/g, ''), {
            reply_markup: { inline_keyboard: keyboard }
          });
          console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–µ–∑ Markdown');
        } catch (finalError) {
          console.error('‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å:', finalError);
          await ctx.reply('–î–ª—è –ø–æ–º–æ—â–∏ –Ω–∞–ø–∏—à–∏—Ç–µ @NastuPopova');
        }
      }
    }
  }

  async handleError(ctx, error) {
    console.error('üí• –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏:', error);
    
    try {
      await ctx.reply(
        'üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ [–ê–Ω–∞—Å—Ç–∞—Å–∏–∏](https://t.me/NastuPopova)',
        { parse_mode: 'Markdown' }
      );
    } catch (replyError) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', replyError);
    }
  }

  // ===== –û–°–¢–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –ê–ù–ö–ï–¢–´ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ) =====
  // askQuestion, handleSurveyAnswer, completeSurvey, moveToNextQuestion –∏ —Ç.–¥.
  // –ó–¥–µ—Å—å –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ –æ–ø—É—Å–∫–∞—é, –Ω–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è
  
  async askQuestion(ctx, questionId) {
    // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ askQuestion
  }

  async handleSurveyAnswer(ctx, callbackData) {
    // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ handleSurveyAnswer
  }

  async completeSurvey(ctx) {
    // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ completeSurvey
  }

  async handleText(ctx) {
    if (ctx.session?.currentQuestion) {
      await ctx.reply('üëÜ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å.');
    } else {
      await ctx.reply('–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
    }
  }

  // ===== –ì–ï–¢–¢–ï–†–´ –ò –ò–ù–§–û–†–ú–ê–¶–ò–Ø =====
  
  getStats() {
    return {
      name: 'MainHandlers',
      version: '4.0.0',
      features: [
        'reliable_help_choose_program',
        'built_in_fallbacks',
        'comprehensive_diagnostics',
        'test_command',
        'survey_processing',
        'pdf_delivery',
        'contact_handling',
        'error_handling',
        'admin_integration'
      ],
      help_choose_program_fixes: [
        'priority_handling',
        'multiple_fallbacks',
        'dependency_validation',
        'built_in_emergency_response',
        'comprehensive_logging'
      ],
      last_updated: new Date().toISOString()
    };
  }
}

module.exports = Handlers;
