// –§–∞–π–ª: core/handlers.js
const { Markup } = require('telegraf');
const config = require('./config');

class Handler {
  constructor(bot) {
    this.bot = bot;
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±–æ–Ω—É—Å–∞
  generateBonusMessage(bonus, analysisResult) {
    let message = `üéÅ *${bonus.title}*\n\n`;
    message += `${bonus.subtitle}\n\n`;
    message += `${bonus.description}\n\n`;
    if (analysisResult.segment === 'HOT_LEAD') {
      message += `‚ö° *–°–†–û–ß–ù–û:* –ù–∞—á–Ω–∏—Ç–µ —Å —Ç–µ—Ö–Ω–∏–∫–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n\n`;
    }
    message += `üì± –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –≥–∏–¥.\n`;
    message += `üë©‚Äç‚öïÔ∏è –ë–æ–ª—å—à–µ —Ç–µ—Ö–Ω–∏–∫ —É [–ê–Ω–∞—Å—Ç–∞—Å–∏–∏ –ü–æ–ø–æ–≤–æ–π](https://t.me/breathing_opros_bot)`;

    return message;
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±–æ–Ω—É—Å–∞
  generateBonusKeyboard(bonus) {
    const buttons = [
      [Markup.button.callback('üì• –ü–æ–ª—É—á–∏—Ç—å –≥–∏–¥', `download_pdf_${bonus.id}`)],
      [Markup.button.callback('üìû –•–æ—á—É –±–æ–ª—å—à–µ —Ç–µ—Ö–Ω–∏–∫!', 'contact_request')],
      [Markup.button.callback('üéÅ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã', 'more_materials')],
      [Markup.button.url('üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –ê–Ω–∞—Å—Ç–∞—Å–∏–∏', 'https://t.me/breathing_opros_bot')]
    ];
    return Markup.inlineKeyboard(buttons);
  }

  async handleStaticPDFDownload(ctx) {
    try {
      const pdfType = ctx.match[1];
      console.log(`üì• –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ PDF: ${pdfType}`);
      await this.pdfManager.sendAdditionalPDF(ctx, pdfType);
      this.pdfManager.logBonusDelivery(
        ctx.from.id,
        `static_${pdfType}`,
        'static_pdf',
        ctx.session?.analysisResult?.segment || 'UNKNOWN',
        'static_material'
      );
      await ctx.answerCbQuery('‚úÖ PDF –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handleStaticPDFDownload:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PDF', { show_alert: true });
    }
  }

  async handlePDFDownload(ctx) {
    try {
      const bonusId = ctx.match[1];
      console.log(`üì• –ó–∞–ø—Ä–æ—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≥–∏–¥–∞: ${bonusId}`);
      if (!ctx.session?.analysisResult) {
        await ctx.answerCbQuery('‚ö†Ô∏è –ü—Ä–æ–π–¥–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ', { show_alert: true });
        return;
      }

      await ctx.answerCbQuery('üì• –ì–æ—Ç–æ–≤–ª—é –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–∏–¥...');
      await this.pdfManager.handleDownloadRequest(ctx, bonusId);

      const bonus = this.pdfManager.getBonusForUser(ctx.session.analysisResult, ctx.session.answers);
      this.pdfManager.logBonusDelivery(
        ctx.from.id,
        bonus.id,
        'file',
        ctx.session?.analysisResult?.segment,
        ctx.session?.analysisResult?.primaryIssue
      );
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handlePDFDownload:', error);
      this.bot.middleware.logSpecialEvent('error', ctx.from?.id, { error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PDF' });
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PDF', { show_alert: true });
    }
  }

  async handleMoreMaterials(ctx) {
    try {
      await ctx.answerCbQuery();
      await this.pdfManager.showMoreMaterials(ctx);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handleMoreMaterials:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤');
    }
  }

  async handlePDFRetry(ctx) {
    try {
      if (!ctx.session?.analysisResult) {
        await ctx.answerCbQuery('–ü—Ä–æ–π–¥–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ');
        return;
      }

      await ctx.answerCbQuery('üì• –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...');
      await this.pdfManager.sendPDFFile(ctx);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handlePDFRetry:', error);
      this.bot.middleware.logSpecialEvent('error', ctx.from?.id, { error: '–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF' });
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞');
    }
  }

  async handleAdminPDFStats(ctx) {
    if (ctx.from.id.toString() !== config.ADMIN_ID) return;
    try {
      const stats = this.pdfManager.getBonusStats();
      let message = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ–Ω—É—Å–æ–≤*\n\n`;
      message += `–í—Å–µ–≥–æ –≤—ã–¥–∞–Ω–æ: ${stats.totalDelivered}\n\n`;
      message += `–ü–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º:\n`;
      for (const [segment, count] of Object.entries(stats.bySegment)) {
        message += `‚Ä¢ ${config.TRANSLATIONS[segment] || segment}: ${count}\n`;
      }
      message += `\n–ü–æ –ø—Ä–æ–±–ª–µ–º–∞–º:\n`;
      for (const [issue, count] of Object.entries(stats.byIssue)) {
        message += `‚Ä¢ ${config.TRANSLATIONS[issue] || issue}: ${count}\n`;
      }
      message += `\n–ü–æ —Å–ø–æ—Å–æ–±—É –¥–æ—Å—Ç–∞–≤–∫–∏:\n`;
      for (const [method, count] of Object.entries(stats.byDeliveryMethod)) {
        message += `‚Ä¢ ${method}: ${count}\n`;
      }
      await ctx.reply(message, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handleAdminPDFStats:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
  }

  async handleTestPDF(ctx) {
    if (ctx.from.id.toString() !== config.ADMIN_ID) return;
    try {
      const testAnalysisResult = {
        analysisType: 'adult',
        primaryIssue: 'chronic_stress',
        segment: 'COLD_LEAD'
      };
      const testSurveyData = { age_group: '18-30', stress_level: 5 };

      ctx.session.analysisResult = testAnalysisResult;
      ctx.session.answers = testSurveyData;

      await this.pdfManager.sendPDFFile(ctx);
      await ctx.reply('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π PDF –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF:', error);
      this.bot.middleware.logSpecialEvent('error', ctx.from?.id, { error: '–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF' });
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ PDF');
    }
  }

  async completeSurvey(ctx, analysisResult) {
    try {
      const bonus = this.pdfManager.getBonusForUser(analysisResult, ctx.session.answers);
      const bonusMessage = this.generateBonusMessage(bonus, analysisResult);
      const bonusKeyboard = this.generateBonusKeyboard(bonus);

      await ctx.editMessageText(bonusMessage, {
        parse_mode: 'Markdown',
        ...bonusKeyboard
      });

      if (analysisResult.segment === 'HOT_LEAD') {
        setTimeout(async () => {
          await this.pdfManager.sendPDFFile(ctx);
          await ctx.reply(
            '‚ö° *–°—Ä–æ—á–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:* –ù–∞—á–Ω–∏—Ç–µ —Å –ø–µ—Ä–≤–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!',
            { parse_mode: 'Markdown' }
          );
        }, 2000);
      }

      this.bot.middleware.logSpecialEvent('survey_completed', ctx.from?.id, {
        segment: analysisResult.segment,
        primaryIssue: analysisResult.primaryIssue
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ completeSurvey:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  async showResults(ctx) {
    try {
      if (!ctx.session?.analysisResult) {
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–π–¥–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ.', {
          ...Markup.inlineKeyboard([[Markup.button.callback('üî¨ –ü—Ä–æ–π—Ç–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É', 'start_survey')]])
        });
        return;
      }

      const bonus = this.pdfManager.getBonusForUser(ctx.session.analysisResult, ctx.session.answers);
      const message = this.generateBonusMessage(bonus, ctx.session.analysisResult);
      const keyboard = this.generateBonusKeyboard(bonus);

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ showResults:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
    }
  }

  async handleOtherPrograms(ctx) {
    try {
      await ctx.answerCbQuery();
      await this.pdfManager.showAllPrograms(ctx);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handleOtherPrograms:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º');
    }
  }

  async handleOrderProgram(ctx) {
    try {
      const programType = ctx.match[1];
      await ctx.answerCbQuery();
      await this.pdfManager.showOrderDetails(ctx, programType);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handleOrderProgram:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã');
    }
  }

  async handleHelpChoose(ctx) {
    try {
      await ctx.answerCbQuery();
      await this.pdfManager.showProgramHelper(ctx);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handleHelpChoose:', error);
      await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã');
    }
  }

  async transferLeadAsync(ctx) {
    try {
      const userData = {
        id: ctx.from.id,
        username: ctx.from?.username,
        firstName: ctx.from?.firstName,
        analysisResult: ctx.session?.analysisResult,
        answers: ctx.session?.answers
      };

      const bonus = this.pdfManager.getBonusForUser(ctx.session.analysisResult, ctx.session.answers);
      await this.leadTransfer.sendToCRM(userData, bonus);

      await ctx.reply(config.MESSAGES.THANK_YOU, { parse_mode: 'Markdown' });
      await ctx.reply(config.MESSAGES.CONTACT_TRAINER, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ transferLeadAsync:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ...
}

module.exports = Handler;
