// –§–∞–π–ª: core/handlers.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
const { Markup } = require('telegraf');
const config = require('../config');

class Handlers {
  constructor(botInstance) {
    this.bot = botInstance;
    this.telegramBot = botInstance.bot;
    
    // –°—Å—ã–ª–∫–∏ –Ω–∞ –º–æ–¥—É–ª–∏ –±–æ—Ç–∞
    this.surveyQuestions = botInstance.surveyQuestions;
    this.verseAnalysis = botInstance.verseAnalysis;
    this.leadTransfer = botInstance.leadTransfer;
    this.pdfManager = botInstance.pdfManager;
    this.adminNotifications = botInstance.adminNotifications;
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
  setup() {
    console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–±—ã—Ç–∏–π...');

    // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    this.setupCommands();
    
    // Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    this.setupCallbacks();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.setupTextHandlers();
    
    // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    this.setupAdminCommands();
    
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
  setupCommands() {
    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.telegramBot.start(async (ctx) => {
      try {
        await this.handleStart(ctx);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start:', error);
        await this.handleError(ctx, error);
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /help
    this.telegramBot.help(async (ctx) => {
      try {
        await this.handleHelp(ctx);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /help:', error);
        await this.handleError(ctx, error);
      }
    });

    // –ö–æ–º–∞–Ω–¥–∞ /restart
    this.telegramBot.command('restart', async (ctx) => {
      try {
        await this.handleRestart(ctx);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /restart:', error);
        await this.handleError(ctx, error);
      }
    });
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
  setupCallbacks() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤
    this.telegramBot.on('callback_query', async (ctx) => {
      try {
        await this.handleCallback(ctx);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ callback:', error);
        await this.handleError(ctx, error);
      }
    });
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
  setupTextHandlers() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.telegramBot.on('text', async (ctx) => {
      try {
        await this.handleText(ctx);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ text handler:', error);
        await this.handleError(ctx, error);
      }
    });
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
  setupAdminCommands() {
    if (!config.ADMIN_ID) {
      console.log('‚ö†Ô∏è ADMIN_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã');
      return;
    }

    // –ê–¥–º–∏–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    this.telegramBot.command('admin_stats', async (ctx) => {
      if (ctx.from.id.toString() !== config.ADMIN_ID) return;
      try {
        await this.handleAdminStats(ctx);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥–µ:', error);
      }
    });

    // –¢–µ—Å—Ç PDF
    this.telegramBot.command('test_pdf', async (ctx) => {
      if (ctx.from.id.toString() !== config.ADMIN_ID) return;
      try {
        await this.handleTestPDF(ctx);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ PDF:', error);
      }
    });
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
  async handleStart(ctx) {
    console.log(`üöÄ –ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (!ctx.session) {
      ctx.session = this.bot.middleware.getDefaultSession();
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
    ctx.session.currentQuestion = null;
    ctx.session.answers = {};
    ctx.session.completedQuestions = [];
    ctx.session.startTime = Date.now();

    const message = config.MESSAGES.WELCOME;
    
    await ctx.reply(message, {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard([
        [Markup.button.callback('üî¨ –ù–∞—á–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É', 'start_survey')],
        [Markup.button.callback('‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ', 'about_survey')]
      ])
    });
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
  async handleHelp(ctx) {
    const helpMessage = `üÜò *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*\n\n` +
      `üî¨ */start* - –Ω–∞—á–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –¥—ã—Ö–∞–Ω–∏—è\n` +
      `üì± –ü—Ä–æ—Å—Ç–æ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞\n` +
      `‚è±Ô∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç 4-5 –º–∏–Ω—É—Ç\n\n` +
      `üìû –í–æ–ø—Ä–æ—Å—ã? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ [–ê–Ω–∞—Å—Ç–∞—Å–∏–∏ –ü–æ–ø–æ–≤–æ–π](${config.TRAINER_CONTACT})`;

    await ctx.reply(helpMessage, { parse_mode: 'Markdown' });
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /restart
  async handleRestart(ctx) {
    await ctx.reply('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –∞–Ω–∫–µ—Ç—É...');
    await this.handleStart(ctx);
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô: –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
  async handleCallback(ctx) {
    const callbackData = ctx.callbackQuery.data;
    console.log(`üìû Callback: ${callbackData} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);

    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    await ctx.answerCbQuery().catch(() => {});

    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è callback
    try {
      // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
      if (callbackData === 'start_survey') {
        await this.startSurvey(ctx);
      } else if (callbackData === 'about_survey') {
        await this.showAboutSurvey(ctx);
      } else if (callbackData === 'nav_back') {
        await this.handleNavBack(ctx);
      } else if (callbackData.endsWith('_done')) {
        await this.handleMultipleChoiceDone(ctx, callbackData);
      }
      
      // PDF –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã - –ò–°–ü–†–ê–í–õ–ï–ù–û
      else if (callbackData.startsWith('download_pdf_')) {
        await this.handlePDFDownload(ctx);
      } else if (callbackData.startsWith('download_static_')) {
        await this.pdfManager.handleDownloadRequest(ctx, callbackData);
      }
      
      // –ú–µ–Ω—é –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ - –ò–°–ü–†–ê–í–õ–ï–ù–û
      else if (callbackData === 'more_materials') {
        await this.pdfManager.showMoreMaterials(ctx);
      } else if (callbackData === 'show_all_programs') {
        await this.pdfManager.showAllPrograms(ctx);
      } else if (callbackData === 'close_menu') {
        await this.pdfManager.closeMenu(ctx);
      }
      
      // –ó–∞–∫–∞–∑—ã –ø—Ä–æ–≥—Ä–∞–º–º - –ù–û–í–û–ï
      else if (callbackData.startsWith('order_')) {
        const programType = callbackData.replace('order_', '');
        await this.pdfManager.showOrderDetails(ctx, programType);
      } else if (callbackData === 'help_choose_program') {
        await this.pdfManager.showProgramHelper(ctx);
      }
      
      // –ö–æ–Ω—Ç–∞–∫—Ç—ã
      else if (callbackData === 'contact_request') {
        await this.handleContactRequest(ctx);
      }
      
      // –ê–¥–º–∏–Ω callback
      else if (callbackData.startsWith('admin_')) {
        await this.handleAdminCallback(ctx, callbackData);
      } 
      
      // –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∞–Ω–∫–µ—Ç—ã (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –∫–æ–Ω—Ü–µ)
      else {
        await this.handleSurveyAnswer(ctx, callbackData);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handleCallback:', error);
      await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }

  // –ó–∞–ø—É—Å–∫ –∞–Ω–∫–µ—Ç—ã
  async startSurvey(ctx) {
    console.log(`üìã –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∫–µ—Ç—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`);

    if (!ctx.session) {
      ctx.session = this.bot.middleware.getDefaultSession();
    }

    // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    const firstQuestion = 'age_group';
    ctx.session.currentQuestion = firstQuestion;
    ctx.session.startTime = Date.now();

    await this.askQuestion(ctx, firstQuestion);
  }

  // –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ
  async showAboutSurvey(ctx) {
    const aboutMessage = `üìã *–û –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ –¥—ã—Ö–∞–Ω–∏—è*\n\n` +
      `üéØ *–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:*\n` +
      `‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥—ã—Ö–∞–Ω–∏—è\n` +
      `‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n` +
      `‚Ä¢ –î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –ø–æ–¥ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É\n` +
      `‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏\n\n` +
      `‚è±Ô∏è *–í—Ä–µ–º—è:* 4-5 –º–∏–Ω—É—Ç\n` +
      `üìä *–í–æ–ø—Ä–æ—Å–æ–≤:* 15-18 (–∞–¥–∞–ø—Ç–∏–≤–Ω–æ)\n` +
      `üîí *–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ:* –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º\n\n` +
      `–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?`;

    await ctx.editMessageText(aboutMessage, {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard([
        [Markup.button.callback('üî¨ –ù–∞—á–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É', 'start_survey')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é', 'start_survey')]
      ])
    });
  }

  // –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
  async askQuestion(ctx, questionId) {
    const question = this.surveyQuestions.getQuestion(questionId);
    if (!question) {
      console.error(`‚ùå –í–æ–ø—Ä–æ—Å ${questionId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      await ctx.reply('–û—à–∏–±–∫–∞ –∞–Ω–∫–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start');
      return;
    }

    console.log(`‚ùì –ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å: ${questionId}`);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    const progress = this.surveyQuestions.getProgress(
      ctx.session.completedQuestions || [], 
      ctx.session.answers || {}
    );

    const progressText = `üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress.completed}/${progress.total} (${progress.percentage}%)`;
    const questionText = `${question.text}\n\n${progressText}`;

    try {
      if (ctx.callbackQuery) {
        await ctx.editMessageText(questionText, {
          parse_mode: 'Markdown',
          ...question.keyboard
        });
      } else {
        await ctx.reply(questionText, {
          parse_mode: 'Markdown',
          ...question.keyboard
        });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞:', error);
      // Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.reply(questionText, {
        parse_mode: 'Markdown',
        ...question.keyboard
      });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∞–Ω–∫–µ—Ç—ã
  async handleSurveyAnswer(ctx, callbackData) {
    if (!ctx.session || !ctx.session.currentQuestion) {
      await ctx.reply('–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
      return;
    }

    const currentQuestion = ctx.session.currentQuestion;
    const question = this.surveyQuestions.getQuestion(currentQuestion);

    if (!question) {
      console.error(`‚ùå –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å ${currentQuestion} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞
    if (question.type === 'multiple_choice') {
      await this.handleMultipleChoiceAnswer(ctx, callbackData, currentQuestion);
    } else {
      await this.handleSingleChoiceAnswer(ctx, callbackData, currentQuestion);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
  async handleSingleChoiceAnswer(ctx, callbackData, questionId) {
    const mappedValue = this.surveyQuestions.mapCallbackToValue(callbackData);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    ctx.session.answers[questionId] = mappedValue;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö
    if (!ctx.session.completedQuestions.includes(questionId)) {
      ctx.session.completedQuestions.push(questionId);
    }

    console.log(`‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ ${questionId}: ${mappedValue}`);

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    await this.moveToNextQuestion(ctx);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
  async handleMultipleChoiceAnswer(ctx, callbackData, questionId) {
    if (!ctx.session.multipleChoiceSelections) {
      ctx.session.multipleChoiceSelections = {};
    }

    if (!ctx.session.multipleChoiceSelections[questionId]) {
      ctx.session.multipleChoiceSelections[questionId] = [];
    }

    const selections = ctx.session.multipleChoiceSelections[questionId];
    const mappedValue = this.surveyQuestions.mapCallbackToValue(callbackData);

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–±–∏—Ä–∞–µ–º –≤—ã–±–æ—Ä
    if (selections.includes(mappedValue)) {
      const index = selections.indexOf(mappedValue);
      selections.splice(index, 1);
    } else {
      const question = this.surveyQuestions.getQuestion(questionId);
      if (question.maxSelections && selections.length >= question.maxSelections) {
        await ctx.answerCbQuery(`–ú–∞–∫—Å–∏–º—É–º ${question.maxSelections} –≤—ã–±–æ—Ä–æ–≤`, { show_alert: true });
        return;
      }
      selections.push(mappedValue);
    }

    console.log(`üîÑ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä ${questionId}:`, selections);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±–æ—Ä—ã)
    await this.updateMultipleChoiceDisplay(ctx, questionId);
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
  async updateMultipleChoiceDisplay(ctx, questionId) {
    const question = this.surveyQuestions.getQuestion(questionId);
    const selections = ctx.session.multipleChoiceSelections[questionId] || [];
    
    let displayText = question.text;
    if (selections.length > 0) {
      displayText += `\n\n‚úÖ *–í—ã–±—Ä–∞–Ω–æ (${selections.length}):*\n`;
      selections.forEach(sel => {
        const translated = config.TRANSLATIONS[sel] || sel;
        displayText += `‚Ä¢ ${translated}\n`;
      });
    }

    const progress = this.surveyQuestions.getProgress(
      ctx.session.completedQuestions || [], 
      ctx.session.answers || {}
    );
    displayText += `\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress.completed}/${progress.total} (${progress.percentage}%)`;

    try {
      await ctx.editMessageText(displayText, {
        parse_mode: 'Markdown',
        ...question.keyboard
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞:', error);
    }
  }

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
  async handleMultipleChoiceDone(ctx, callbackData) {
    const questionId = ctx.session.currentQuestion;
    const selections = ctx.session.multipleChoiceSelections[questionId] || [];

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    const question = this.surveyQuestions.getQuestion(questionId);
    if (question.minSelections && selections.length < question.minSelections) {
      await ctx.answerCbQuery(`–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º—É–º ${question.minSelections} –≤–∞—Ä–∏–∞–Ω—Ç(–æ–≤)`, { show_alert: true });
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    ctx.session.answers[questionId] = selections;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö
    if (!ctx.session.completedQuestions.includes(questionId)) {
      ctx.session.completedQuestions.push(questionId);
    }

    console.log(`‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω ${questionId}:`, selections);

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    await this.moveToNextQuestion(ctx);
  }

  // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
  async moveToNextQuestion(ctx) {
    const currentQuestion = ctx.session.currentQuestion;
    const nextQuestion = this.surveyQuestions.getNextQuestion(currentQuestion, ctx.session.answers);

    if (nextQuestion) {
      console.log(`‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥: ${currentQuestion} -> ${nextQuestion}`);
      ctx.session.currentQuestion = nextQuestion;
      await this.askQuestion(ctx, nextQuestion);
    } else {
      console.log('üèÅ –ê–Ω–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑');
      await this.completeSurvey(ctx);
    }
  }

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏–∑
  async completeSurvey(ctx) {
    try {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞–Ω–∞–ª–∏–∑–µ
      await ctx.editMessageText(config.MESSAGES.ANALYSIS_START, {
        parse_mode: 'Markdown'
      });

      // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞
      await new Promise(resolve => setTimeout(resolve, config.ANALYSIS_DELAY_SECONDS * 1000));

      // –í—ã–ø–æ–ª–Ω—è–µ–º VERSE-–∞–Ω–∞–ª–∏–∑
      const analysisResult = this.verseAnalysis.analyzeUser(ctx.session.answers);
      ctx.session.analysisResult = analysisResult;

      console.log(`üß† –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}:`, {
        segment: analysisResult.segment,
        score: analysisResult.scores?.total,
        primaryIssue: analysisResult.primaryIssue
      });

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      await this.showResults(ctx, analysisResult);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
      if (this.adminNotifications) {
        const userData = {
          userInfo: {
            telegram_id: ctx.from.id,
            username: ctx.from.username,
            first_name: ctx.from.first_name
          },
          surveyAnswers: ctx.session.answers,
          analysisResult: analysisResult,
          surveyType: analysisResult.analysisType || 'adult'
        };
        
        await this.adminNotifications.notifyNewLead(userData);
      }

      // –ü–µ—Ä–µ–¥–∞–µ–º –ª–∏–¥ –≤ —Å–∏—Å—Ç–µ–º—É
      await this.transferLead(ctx, analysisResult);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã:', error);
      await ctx.reply('üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ [–ê–Ω–∞—Å—Ç–∞—Å–∏–∏](https://t.me/breathing_opros_bot)', {
        parse_mode: 'Markdown'
      });
    }
  }

  // –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  async showResults(ctx, analysisResult) {
    const bonus = this.pdfManager.getBonusForUser(analysisResult, ctx.session.answers);
    const message = this.generateBonusMessage(bonus, analysisResult);
    const keyboard = this.generateBonusKeyboard(bonus);

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      ...keyboard
    });

    // –î–ª—è –≥–æ—Ä—è—á–∏—Ö –ª–∏–¥–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF
    if (analysisResult.segment === 'HOT_LEAD') {
      setTimeout(async () => {
        await this.pdfManager.sendPDFFile(ctx);
      }, 2000);
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–æ–Ω—É—Å–µ
  generateBonusMessage(bonus, analysisResult) {
    let message = `üéÅ *–í–ê–®–ê –ü–ï–†–°–û–ù–ê–õ–¨–ù–ê–Ø –¢–ï–•–ù–ò–ö–ê –ì–û–¢–û–í–ê!*\n\n`;
    message += `${bonus.title}\n\n`;
    message += `üéØ *–í–∞—à–∞ –ø—Ä–æ–±–ª–µ–º–∞:* ${bonus.technique.problem}\n`;
    message += `‚ú® *–†–µ—à–µ–Ω–∏–µ:* ${bonus.technique.name}\n`;
    message += `‚è≥ *–í—Ä–µ–º—è:* ${bonus.technique.duration}\n`;
    message += `üéâ *–†–µ–∑—É–ª—å—Ç–∞—Ç:* ${bonus.technique.result}\n\n`;

    if (analysisResult.segment === 'HOT_LEAD') {
      message += `‚ö° *–°–†–û–ß–ù–ê–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:*\n`;
      message += `–ù–∞—á–Ω–∏—Ç–µ —Å —Ç–µ—Ö–Ω–∏–∫–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n\n`;
    }

    message += `üìû *–•–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ —Ç–µ—Ö–Ω–∏–∫?*\n`;
    message += `–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å [–ê–Ω–∞—Å—Ç–∞—Å–∏–µ–π –ü–æ–ø–æ–≤–æ–π](https://t.me/breathing_opros_bot)`;

    return message;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –±–æ–Ω—É—Å–∞
  generateBonusKeyboard(bonus) {
    return Markup.inlineKeyboard([
      [Markup.button.callback('üì• –ü–æ–ª—É—á–∏—Ç—å –º–æ–π –≥–∏–¥', `download_pdf_${bonus.id}`)],
      [Markup.button.callback('üìû –•–æ—á—É –±–æ–ª—å—à–µ —Ç–µ—Ö–Ω–∏–∫!', 'contact_request')],
      [Markup.button.callback('üéÅ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã', 'more_materials')],
      [Markup.button.url('üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –ê–Ω–∞—Å—Ç–∞—Å–∏–∏', 'https://t.me/breathing_opros_bot')]
    ]);
  }

  // –ü–µ—Ä–µ–¥–∞—á–∞ –ª–∏–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É
  async transferLead(ctx, analysisResult) {
    try {
      const userData = {
        userInfo: {
          telegram_id: ctx.from.id,
          username: ctx.from.username,
          first_name: ctx.from.first_name
        },
        surveyAnswers: ctx.session.answers,
        analysisResult: analysisResult,
        surveyType: analysisResult.analysisType || 'adult',
        startTime: ctx.session.startTime
      };

      await this.leadTransfer.processLead(userData);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –ª–∏–¥–∞:', error);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞–∑–∞–¥
  async handleNavBack(ctx) {
    if (!ctx.session || !ctx.session.currentQuestion) {
      await ctx.reply('–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
      return;
    }

    const currentQuestion = ctx.session.currentQuestion;
    const prevQuestion = this.surveyQuestions.getPreviousQuestion(currentQuestion, ctx.session.answers);

    if (prevQuestion) {
      // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö
      const index = ctx.session.completedQuestions.indexOf(currentQuestion);
      if (index > -1) {
        ctx.session.completedQuestions.splice(index, 1);
      }

      // –£–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
      delete ctx.session.answers[currentQuestion];
      delete ctx.session.multipleChoiceSelections?.[currentQuestion];

      ctx.session.currentQuestion = prevQuestion;
      await this.askQuestion(ctx, prevQuestion);
    } else {
      await ctx.answerCbQuery('–≠—Ç–æ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å');
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PDF
  async handlePDFDownload(ctx) {
    try {
      await this.pdfManager.sendPDFFile(ctx);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PDF:', error);
      await ctx.reply('üòî –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
  async handleContactRequest(ctx) {
    const message = `üìû *–°–≤—è–∑—å —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º*\n\n` +
      `–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É —ç–∫—Å–ø–µ—Ä—Ç—É:\n\n` +
      `üë©‚Äç‚öïÔ∏è **–ê–Ω–∞—Å—Ç–∞—Å–∏—è –ü–æ–ø–æ–≤–∞**\n` +
      `–≠–∫—Å–ø–µ—Ä—Ç –ø–æ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º\n\n` +
      `üí¨ Telegram: @NastuPopova\n\n` +
      `üìã *–ù–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:*\n` +
      `‚Ä¢ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤–∞—à–µ–≥–æ –¥—ã—Ö–∞–Ω–∏—è\n` +
      `‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ 30 –¥–Ω–µ–π\n` +
      `‚Ä¢ –û–±—É—á–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º —Ç–µ—Ö–Ω–∏–∫–∞–º\n` +
      `‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`;

    try {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard([
          [Markup.button.url('üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –ê–Ω–∞—Å—Ç–∞—Å–∏–∏', 'https://t.me/breathing_opros_bot')],
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º', 'more_materials')],
          [Markup.button.callback('‚ùå –ó–∞–∫—Ä—ã—Ç—å', 'close_menu')]
        ])
      });
    } catch (error) {
      await ctx.reply(message, {
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard([
          [Markup.button.url('üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –ê–Ω–∞—Å—Ç–∞—Å–∏–∏', 'https://t.me/breathing_opros_bot')]
        ])
      });
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö callback
  async handleAdminCallback(ctx, callbackData) {
    if (ctx.from.id.toString() !== config.ADMIN_ID) {
      await ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
      return;
    }

    try {
      const parts = callbackData.split('_');
      const action = parts.slice(1, -1).join('_'); // –≤—Å–µ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
      const targetUserId = parts[parts.length - 1]; // –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç

      await this.adminNotifications.handleAdminCallback(ctx, action, targetUserId);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω callback:', error);
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è');
    }
  }

  // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  async handleAdminStats(ctx) {
    const stats = this.bot.middleware.getStats();
    let message = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n`;
    message += `üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.requests.unique_users}\n`;
    message += `üì® –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${stats.requests.total}\n`;
    message += `üíæ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: ${stats.sessions.created}\n`;
    message += `‚ùå –û—à–∏–±–æ–∫: ${stats.errors.handled}\n`;
    message += `‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${Math.round(stats.uptime.hours)} —á–∞—Å–æ–≤\n`;

    await ctx.reply(message, { parse_mode: 'Markdown' });
  }

  // –¢–µ—Å—Ç PDF
  async handleTestPDF(ctx) {
    try {
      const testAnalysisResult = {
        analysisType: 'adult',
        primaryIssue: 'chronic_stress',
        segment: 'WARM_LEAD',
        scores: { total: 65 }
      };
      const testSurveyData = { age_group: '31-45', stress_level: 6 };

      ctx.session = { analysisResult: testAnalysisResult, answers: testSurveyData };
      await this.pdfManager.sendPDFFile(ctx);
      await ctx.reply('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π PDF –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ PDF:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ PDF');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  async handleText(ctx) {
    if (ctx.session?.currentQuestion) {
      await ctx.reply('üëÜ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å.');
    } else {
      await ctx.reply('–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
    }
  }

 
// –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
  async handleError(ctx, error) {
    console.error('üí• –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏:', error);
    
    try {
      await ctx.reply(
        'üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ [–ê–Ω–∞—Å—Ç–∞—Å–∏–∏](https://t.me/breathing_opros_bot)',
        { parse_mode: 'Markdown' }
      );
    } catch (replyError) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', replyError);
    }
  }
}

module.exports = Handlers;
