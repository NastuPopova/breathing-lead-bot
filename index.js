// index.js - –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è BreathingLeadBot v2.5
// –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞ –ø–æ—Å–ª–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞

const BreathingLeadBot = require('./core/bot');

console.log('üå¨Ô∏è –ó–∞–ø—É—Å–∫ BreathingLeadBot v2.5 (—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥)...');

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function startBot() {
  try {
    const bot = new BreathingLeadBot();
    await bot.launch();
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error.message);
    console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
      name: error.name,
      code: error.code,
      response: error.response?.description || 'N/A',
      timestamp: new Date().toISOString()
    });
    
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('unhandledRejection', (reason, promise) => {
  console.error('üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞ –≤ index.js:', reason);
  console.error('–ü—Ä–æ–º–∏—Å:', promise);
});

process.on('uncaughtException', (error) => {
  console.error('üí• –ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ index.js:', error);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
startBot();
