// –§–∞–π–ª: lead_bot/index.js
// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è userData –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π

const { Telegraf, Markup, session } = require('telegraf');
const config = require('./config');

let ExtendedSurveyQuestions, BreathingVERSEAnalysis, LeadTransferSystem;
try {
  ExtendedSurveyQuestions = require('./modules/survey/extended_questions');
  BreathingVERSEAnalysis = require('./modules/analysis/verse_analysis');
  LeadTransferSystem = require('./modules/integration/lead_transfer');
  console.log('‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π:', error.message);
  process.exit(1);
}

class BreathingLeadBot {
  constructor() {
    this.bot = new Telegraf(config.LEAD_BOT_TOKEN);
    this.surveyQuestions = new ExtendedSurveyQuestions();
    this.verseAnalysis = new BreathingVERSEAnalysis();
    this.leadTransfer = new LeadTransferSystem();

    this.setupMiddleware();
    this.setupHandlers();
    this.setupErrorHandling();
  }

  setupMiddleware() {
    this.bot.use(session({
      defaultSession: () => ({
        currentQuestion: null,
        answers: {},
        multipleChoiceSelections: {},
        startTime: Date.now(),
        questionStartTime: Date.now(),
        completedQuestions: [],
        navigationHistory: []
      })
    }));

    this.bot.use(async (ctx, next) => {
      const messageText = ctx.message?.text || ctx.callbackQuery?.data || 'callback';
      console.log(`[${new Date().toISOString()}] User ${ctx.from?.id || 'unknown'}: ${messageText}`);

      if (!ctx.session) {
        console.warn('‚ö†Ô∏è –°–µ—Å—Å–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—É—é');
        ctx.session = this.getDefaultSession();
      }
      return next();
    });
  }

  getDefaultSession() {
    return {
      currentQuestion: null,
      answers: {},
      multipleChoiceSelections: {},
      startTime: Date.now(),
      questionStartTime: Date.now(),
      completedQuestions: [],
      navigationHistory: []
    };
  }

  setupHandlers() {
    this.bot.start(ctx => this.handleStart(ctx));
    this.bot.command('reset', ctx => this.handleReset(ctx));
    this.bot.on('callback_query', ctx => this.handleCallback(ctx));
    this.bot.on('text', ctx => this.handleText(ctx));
  }

  setupErrorHandling() {
    this.bot.catch(async (err, ctx) => {
      console.error('üí• –û—à–∏–±–∫–∞ –±–æ—Ç–∞:', err);
      await this.sendErrorMessage(ctx, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start');
    });
  }

  async handleStart(ctx) {
    try {
      ctx.session = this.getDefaultSession();
      const welcomeMessage = `üå¨Ô∏è *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –¥—ã—Ö–∞–Ω–∏—è!*\n\n` +
        `–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! –Ø –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫–∏ –¥—ã—Ö–∞–Ω–∏—è.\n` +
        `–ó–∞ 4-5 –º–∏–Ω—É—Ç –æ–ø—Ä–µ–¥–µ–ª–∏–º –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏ –¥–∞–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n\n` +
        `*–ù–æ–≤–æ–µ:* –∫–Ω–æ–ø–∫–∞ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞!`;

      await ctx.reply(welcomeMessage, {
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard([
          [Markup.button.callback('üöÄ –ù–∞—á–∞—Ç—å', 'start_survey')],
          [Markup.button.callback('‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ', 'about_survey')]
        ])
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ /start:', error);
      await this.sendErrorMessage(ctx, '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞');
    }
  }

  async handleReset(ctx) {
    try {
      ctx.session = this.getDefaultSession();
      await ctx.reply('üîÑ –°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ /reset:', error);
      await this.sendErrorMessage(ctx, '–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞');
    }
  }

  async handleCallback(ctx) {
    const data = ctx.callbackQuery.data;
    try {
      await ctx.answerCbQuery();
      if (!ctx.session.answers) {
        console.warn('‚ö†Ô∏è Answers –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º');
        return this.handleStart(ctx);
      }

      if (data === 'nav_back') {
        return this.handleBackNavigation(ctx);
      }
      if (data === 'start_survey') {
        return this.startSurvey(ctx);
      }
      if (data === 'about_survey') {
        return this.showSurveyInfo(ctx);
      }
      return this.handleSurveyAnswer(ctx, data);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ callback:', error, { data });
      await this.sendErrorMessage(ctx, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    }
  }

  async handleBackNavigation(ctx) {
    try {
      const currentQuestion = ctx.session.currentQuestion;
      if (!currentQuestion) {
        console.log('‚ö†Ô∏è –ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞');
        return this.handleStart(ctx);
      }

      const previousQuestion = this.surveyQuestions.getPreviousQuestion(
        currentQuestion,
        ctx.session.answers
      );

      if (!previousQuestion) {
        await ctx.reply('–í—ã –≤ –Ω–∞—á–∞–ª–µ –∞–Ω–∫–µ—Ç—ã! –ù–∞–∂–º–∏—Ç–µ /start');
        return;
      }

      if (ctx.session.answers[currentQuestion]) {
        delete ctx.session.answers[currentQuestion];
      }
      if (ctx.session.multipleChoiceSelections[currentQuestion]) {
        delete ctx.session.multipleChoiceSelections[currentQuestion];
      }
      const index = ctx.session.completedQuestions.indexOf(currentQuestion);
      if (index !== -1) {
        ctx.session.completedQuestions.splice(index, 1);
      }

      ctx.session.currentQuestion = previousQuestion;
      ctx.session.questionStartTime = Date.now();
      await this.askQuestion(ctx, previousQuestion);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞–∑–∞–¥:', error);
      await this.sendErrorMessage(ctx, '–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏');
    }
  }

  async startSurvey(ctx) {
    try {
      ctx.session.currentQuestion = 'age_group';
      ctx.session.questionStartTime = Date.now();
      await this.askQuestion(ctx, 'age_group');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ startSurvey:', error);
      await this.sendErrorMessage(ctx, '–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∞–Ω–∫–µ—Ç—ã');
    }
  }

  async showSurveyInfo(ctx) {
    try {
      const infoMessage = `üìã *–û –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ:*\n\n` +
        `üîç 18+ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –∑–¥–æ—Ä–æ–≤—å–µ –∏ —Ü–µ–ª—è—Ö\n` +
        `üë∂ –î–µ—Ç—Å–∫–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π\n` +
        `üß† –ê–Ω–∞–ª–∏–∑ VERSE –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤\n` +
        `üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n` +
        `‚è±Ô∏è 4-7 –º–∏–Ω—É—Ç\n` +
        `üîí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ\n` +
        `üíù –ë–µ—Å–ø–ª–∞—Ç–Ω–æ`;

      await ctx.editMessageText(infoMessage, {
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard([
          [Markup.button.callback('üöÄ –ù–∞—á–∞—Ç—å', 'start_survey')],
          [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_start')]
        ])
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ showSurveyInfo:', error);
      await ctx.reply(infoMessage, { parse_mode: 'Markdown' });
    }
  }

  async askQuestion(ctx, questionId) {
    try {
      if (!ctx.session?.answers) {
        console.warn('‚ö†Ô∏è –ù–µ—Ç answers, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫');
        return this.handleStart(ctx);
      }

      const question = this.surveyQuestions.getQuestion(questionId);
      if (!question) {
        console.error('‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω:', questionId);
        return this.completeSurvey(ctx);
      }

      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ childFlow:', this.surveyQuestions.isChildFlow(ctx.session.answers));
      if (!this.surveyQuestions.shouldShowQuestion(questionId, ctx.session.answers)) {
        console.log(`üîç –£—Å–ª–æ–≤–∏–µ –¥–ª—è "${questionId}": false`);
        return this.moveToNextQuestion(ctx);
      }

      const progress = this.surveyQuestions.getProgress(
        ctx.session.completedQuestions,
        ctx.session.answers
      );
      console.log(`üîç –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: ${progress.total}`);
      console.log(`üîç –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress.completed}/${progress.total} (${progress.percentage}%)`);

      let message = `${this.generateProgressBar(progress.percentage)} *${progress.completed}/${progress.total}*\n\n${question.text}`;

      if (question.type === 'multiple_choice') {
        const selections = ctx.session.multipleChoiceSelections[questionId] || [];
        if (selections.length) {
          message += `\n\n*–í—ã–±—Ä–∞–Ω–æ:*\n${selections.map(s => `‚Ä¢ ${s}`).join('\n')}`;
        }
      }

      if (this.surveyQuestions.isChildFlow(ctx.session.answers)) {
        message += `\n\nüë∂ *–î–µ—Ç—Å–∫–∞—è –≤–µ—Ä—Å–∏—è*`;
      }

      console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è "${questionId}"`);
      try {
        await ctx.editMessageText(message, {
          parse_mode: 'Markdown',
          ...question.keyboard
        });
      } catch {
        await ctx.reply(message, {
          parse_mode: 'Markdown',
          ...question.keyboard
        });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ askQuestion:', error);
      await this.sendErrorMessage(ctx, '–û—à–∏–±–∫–∞ –≤–æ–ø—Ä–æ—Å–∞');
    }
  }

  async handleSurveyAnswer(ctx, callbackData) {
    try {
      const questionId = ctx.session.currentQuestion;
      if (!questionId || !ctx.session.answers) {
        console.warn('‚ö†Ô∏è –ù–µ—Ç –≤–æ–ø—Ä–æ—Å–∞/–æ—Ç–≤–µ—Ç–æ–≤');
        return this.handleStart(ctx);
      }

      const question = this.surveyQuestions.getQuestion(questionId);
      if (!question) {
        console.error('‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω:', questionId);
        return this.handleStart(ctx);
      }

      if (questionId === 'stress_level') {
        console.log('üî¨ ULTRA DETAILED STRESS_LEVEL DEBUG:', {
          callbackData,
          expectedFormat: 'stress_1 to stress_10',
          isValidFormat: /^stress_\d+$/.test(callbackData),
          extractedValue: callbackData.split('_')[1],
          parsedIntValue: parseInt(callbackData.split('_')[1]),
          isValidValue: parseInt(callbackData.split('_')[1]) >= 1 &&
                        parseInt(callbackData.split('_')[1]) <= 10,
          sessionCurrentQuestion: ctx.session.currentQuestion,
          questionType: question.type
        });
      }

      const mappedValue = this.surveyQuestions.mapCallbackToValue(callbackData);
      console.log(`üîç –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è "${questionId}": ${mappedValue}`);
      if (!mappedValue) {
        console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π callback:', callbackData);
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞', { show_alert: true });
        return;
      }

      if (question.type === 'multiple_choice') {
        return this.handleMultipleChoice(ctx, questionId, mappedValue, callbackData);
      }

      const validation = this.surveyQuestions.validateAnswer(questionId, callbackData);
      if (!validation.valid) {
        await ctx.answerCbQuery(validation.error, { show_alert: true });
        return;
      }

      ctx.session.answers[questionId] = mappedValue;
      console.log(`üîç –¢–µ–∫—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã:`, ctx.session.answers);
      if (!ctx.session.completedQuestions.includes(questionId)) {
        ctx.session.completedQuestions.push(questionId);
      }
      await this.moveToNextQuestion(ctx);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handleSurveyAnswer:', error);
      await this.sendErrorMessage(ctx, '–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞');
    }
  }

  async handleMultipleChoice(ctx, questionId, value, callbackData) {
    try {
      if (!ctx.session.multipleChoiceSelections[questionId]) {
        ctx.session.multipleChoiceSelections[questionId] = [];
      }
      const selections = ctx.session.multipleChoiceSelections[questionId];

      if (callbackData.includes('done')) {
        const validation = this.surveyQuestions.validateAnswer(questionId, 'done', selections);
        if (!validation.valid) {
          await ctx.answerCbQuery(validation.error, { show_alert: true });
          return;
        }
        ctx.session.answers[questionId] = [...selections];
        if (!ctx.session.completedQuestions.includes(questionId)) {
          ctx.session.completedQuestions.push(questionId);
        }
        return this.moveToNextQuestion(ctx);
      }

      const index = selections.indexOf(value);
      if (index > -1) {
        selections.splice(index, 1);
        await ctx.answerCbQuery('‚ùå –í—ã–±–æ—Ä —É–¥–∞–ª–µ–Ω');
      } else {
        const validation = this.surveyQuestions.validateAnswer(questionId, value, selections);
        if (!validation.valid) {
          await ctx.answerCbQuery(validation.error, { show_alert: true });
          return;
        }
        selections.push(value);
        await ctx.answerCbQuery('‚úÖ –í—ã–±–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω');
      }
      await this.askQuestion(ctx, questionId);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handleMultipleChoice:', error);
      await this.sendErrorMessage(ctx, '–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞');
    }
  }

  async moveToNextQuestion(ctx) {
    try {
      console.log(`üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ "${ctx.session.currentQuestion}"...`);
      const nextQuestionId = this.surveyQuestions.getNextQuestion(
        ctx.session.currentQuestion,
        ctx.session.answers
      );
      console.log('‚úÖ –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –≤ –ø–æ—Ç–æ–∫–µ:', nextQuestionId);
      if (nextQuestionId) {
        ctx.session.currentQuestion = nextQuestionId;
        ctx.session.questionStartTime = Date.now();
        await this.askQuestion(ctx, nextQuestionId);
      } else {
        await this.completeSurvey(ctx);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ moveToNextQuestion:', error);
      await this.sendErrorMessage(ctx, '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞');
    }
  }

  async completeSurvey(ctx) {
    try {
      const isChildFlow = this.surveyQuestions.isChildFlow(ctx.session.answers);
      const surveyType = isChildFlow ? '–¥–µ—Ç—Å–∫—É—é' : '–≤–∑—Ä–æ—Å–ª—É—é';
      await ctx.editMessageText(
        `üß† *–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é ${surveyType} –∞–Ω–∫–µ—Ç—É...*\n\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ ‚è≥`,
        { parse_mode: 'Markdown' }
      );

      const analysisResult = this.verseAnalysis.analyzeUser(ctx.session.answers);
      ctx.session.analysisResult = analysisResult;

      const message = analysisResult.personalMessage;
      const keyboard = isChildFlow
        ? Markup.inlineKeyboard([
            [Markup.button.callback('üìû –°–≤—è–∑–∞—Ç—å—Å—è', 'contact_request')],
            [Markup.button.callback('üìã –ü—Ä–æ–≥—Ä–∞–º–º–∞', 'child_program_details')],
            [Markup.button.callback('üéÅ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã', 'child_materials')]
          ])
        : Markup.inlineKeyboard([
            [Markup.button.callback('üìû –°–≤—è–∑–∞—Ç—å—Å—è', 'contact_request')],
            [Markup.button.callback('üìã –ü—Ä–æ–≥—Ä–∞–º–º–∞', 'program_details')],
            [Markup.button.callback('üéÅ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã', 'free_materials')]
          ]);

      await ctx.editMessageText(message, { parse_mode: 'Markdown', ...keyboard });
      await this.transferLeadAsync(ctx);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ completeSurvey:', error);
      await this.sendErrorMessage(ctx, '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞');
    }
  }

  async transferLeadAsync(ctx) {
    try {
      const userData = {
        userInfo: {
          telegram_id: ctx.from?.id?.toString() || 'unknown',
          username: ctx.from?.username || 'unknown'
        },
        surveyAnswers: ctx.session.answers || {},
        analysisResult: ctx.session.analysisResult || {},
        contactInfo: ctx.session.contactInfo || {},
        surveyType: this.surveyQuestions.isChildFlow(ctx.session.answers) ? 'child' : 'adult'
      };
      console.log(`üîç –ü–µ—Ä–µ–¥–∞—á–∞ –ª–∏–¥–∞ —Å userData:`, userData);
      await this.leadTransfer.processLead(userData);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –ª–∏–¥–∞:', error);
    }
  }

  async handleText(ctx) {
    try {
      if (ctx.session.currentQuestion) {
        await ctx.reply(
          '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤.\nüí° –ï—Å—Ç—å –∫–Ω–æ–ø–∫–∞ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"!',
          { parse_mode: 'Markdown' }
        );
      } else {
        await ctx.reply('–ù–∞—á–Ω–∏—Ç–µ —Å /start üå¨Ô∏è\n–ï—Å—Ç—å –¥–µ—Ç—Å–∫–∞—è –≤–µ—Ä—Å–∏—è!');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handleText:', error);
      await this.sendErrorMessage(ctx, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞');
    }
  }

  async sendErrorMessage(ctx, message) {
    try {
      await ctx.reply(`üòî ${message}`, { parse_mode: 'Markdown' });
    } catch (error) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É:', error);
    }
  }

  generateProgressBar(percentage) {
    const total = 10;
    const filled = Math.round((percentage / 100) * total);
    return 'üü©'.repeat(filled) + '‚¨ú'.repeat(total - filled);
  }

  launch() {
    console.log('ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ v2.3...');
    this.bot.launch();
    console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
    process.once('SIGINT', () => this.bot.stop('SIGINT'));
    process.once('SIGTERM', () => this.bot.stop('SIGTERM'));
  }
}

try {
  const bot = new BreathingLeadBot();
  bot.launch();
} catch (error) {
  console.error('üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error);
  process.exit(1);
}
