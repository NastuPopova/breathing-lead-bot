// –§–∞–π–ª: lead_bot/index.js
// –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ª–∏–¥–æ–≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–µ–≥–æ –±–æ—Ç–∞ –¥–ª—è –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫

const { Telegraf, Markup, session } = require('telegraf');
const config = require('./config');
const ExtendedSurveyQuestions = require('./modules/survey/extended_questions');
const BreathingVERSEAnalysis = require('./modules/analysis/verse_analysis');
const LeadTransferSystem = require('./modules/integration/lead_transfer');

class BreathingLeadBot {
  constructor() {
    this.bot = new Telegraf(config.LEAD_BOT_TOKEN);
    this.surveyQuestions = new ExtendedSurveyQuestions();
    this.verseAnalysis = new BreathingVERSEAnalysis();
    this.leadTransfer = new LeadTransferSystem();
    
    this.setupMiddleware();
    this.setupHandlers();
    this.setupErrorHandling();
  }

  setupMiddleware() {
    // –°–µ—Å—Å–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.bot.use(session({
      defaultSession: () => ({
        currentQuestion: null,
        answers: {},
        multipleChoiceSelections: {},
        startTime: Date.now(),
        questionStartTime: Date.now(),
        completedQuestions: []
      })
    }));

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    this.bot.use((ctx, next) => {
      console.log(`[${new Date().toISOString()}] User ${ctx.from.id}: ${ctx.message?.text || ctx.callbackQuery?.data || 'callback'}`);
      return next();
    });
  }

  setupHandlers() {
    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.start(async (ctx) => {
      await this.handleStart(ctx);
    });

    // –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    this.bot.command('stats', async (ctx) => {
      if (this.isAdmin(ctx.from.id)) {
        await this.showStats(ctx);
      }
    });

    this.bot.command('health', async (ctx) => {
      if (this.isAdmin(ctx.from.id)) {
        await this.showHealthStatus(ctx);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query (–Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫)
    this.bot.on('callback_query', async (ctx) => {
      await this.handleCallback(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('text', async (ctx) => {
      await this.handleTextMessage(ctx);
    });
  }

  setupErrorHandling() {
    this.bot.catch((err, ctx) => {
      console.error('Bot error:', err);
      ctx.reply('üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start');
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
   */
  async handleStart(ctx) {
    const user = ctx.from;
    
    // –°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏
    ctx.session = {
      currentQuestion: null,
      answers: {},
      multipleChoiceSelections: {},
      startTime: Date.now(),
      questionStartTime: Date.now(),
      completedQuestions: []
    };

    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const welcomeMessage = `üå¨Ô∏è *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –¥—ã—Ö–∞–Ω–∏—è!*

–ü—Ä–∏–≤–µ—Ç, ${user.first_name}! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞, —è –ø–æ–º–æ—â–Ω–∏–∫ –ê–Ω–∞—Å—Ç–∞—Å–∏–∏.

–ó–∞ 4-5 –º–∏–Ω—É—Ç –º—ã:
‚úÖ –û–ø—Ä–µ–¥–µ–ª–∏–º –≤–∞—à–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥—ã—Ö–∞–Ω–∏–µ–º
‚úÖ –ü–æ–¥–±–µ—Ä–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏  
‚úÖ –î–∞–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ê–Ω–∞—Å—Ç–∞—Å–∏–∏
‚úÖ –ü—Ä–µ–¥–ª–æ–∂–∏–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã

*–ì–æ—Ç–æ–≤—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å —Å–≤–æ—ë –¥—ã—Ö–∞–Ω–∏–µ –∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ?*`;

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üöÄ –ù–∞—á–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É', 'start_survey')],
      [Markup.button.callback('‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ', 'about_survey')]
    ]);

    await ctx.reply(welcomeMessage, {
      parse_mode: 'Markdown',
      ...keyboard
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
   */
  async handleCallback(ctx) {
    const callbackData = ctx.callbackQuery.data;
    
    await ctx.answerCbQuery(); // –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" —Å –∫–Ω–æ–ø–∫–∏

    if (callbackData === 'start_survey') {
      await this.startSurvey(ctx);
    } else if (callbackData === 'about_survey') {
      await this.showSurveyInfo(ctx);
    } else if (callbackData.startsWith('contact_') || 
               ['back_to_start', 'back_to_results', 'back_to_contact_choice'].includes(callbackData)) {
      await this.handleContactCollection(ctx, callbackData);
    } else {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∞–Ω–∫–µ—Ç—ã
      await this.handleSurveyAnswer(ctx, callbackData);
    }
  }

  /**
   * –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ
   */
  async showSurveyInfo(ctx) {
    const infoMessage = `üìã *–ß—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:*

üîç *18 —É–º–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤* –æ –≤–∞—à–∏—Ö:
‚Ä¢ –ü—Ä–∏–≤—ã—á–∫–∞—Ö –¥—ã—Ö–∞–Ω–∏—è
‚Ä¢ –£—Ä–æ–≤–Ω–µ —Å—Ç—Ä–µ—Å—Å–∞ –∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö
‚Ä¢ –¶–µ–ª—è—Ö –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö
‚Ä¢ –û–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏

üß† *VERSE-–∞–Ω–∞–ª–∏–∑* –Ω–∞ –æ—Å–Ω–æ–≤–µ:
‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏
‚Ä¢ –î–∞–Ω–Ω—ã—Ö –æ 1000+ —É—Å–ø–µ—à–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤  
‚Ä¢ –ú–µ—Ç–æ–¥–∏–∫ –ê–Ω–∞—Å—Ç–∞—Å–∏–∏ –°–∫–æ—Ä–æ–¥—É–º–æ–≤–æ–π

üéØ *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –ø–æ–¥ –≤–∞—à–∏ –ø—Ä–æ–±–ª–µ–º—ã
‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–Ω—è—Ç–∏–π
‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
‚Ä¢ –ü–ª–∞–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å –ê–Ω–∞—Å—Ç–∞—Å–∏–µ–π

‚è±Ô∏è *–í—Ä–µ–º—è:* 4-5 –º–∏–Ω—É—Ç
üîí *–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ:* –î–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã
üíù *–ë–µ—Å–ø–ª–∞—Ç–Ω–æ:* –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –±–∞–∑–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã`;

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üöÄ –û—Ç–ª–∏—á–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º!', 'start_survey')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_start')]
    ]);

    await ctx.editMessageText(infoMessage, {
      parse_mode: 'Markdown',
      ...keyboard
    });
  }

  /**
   * –ù–∞—á–∞–ª–æ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async startSurvey(ctx) {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', ctx.from.id);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    ctx.session.currentQuestion = 'age_group';
    ctx.session.questionStartTime = Date.now();
    
    await this.askQuestion(ctx, 'age_group');
  }

  /**
   * –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async askQuestion(ctx, questionId) {
    const question = this.surveyQuestions.getQuestion(questionId);
    
    if (!question) {
      console.error('–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω:', questionId);
      return await this.completeSurvey(ctx);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –ø–æ–∫–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–∞ (–¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö)
    if (!this.surveyQuestions.shouldShowQuestion(questionId, ctx.session.answers)) {
      console.log('–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ —É—Å–ª–æ–≤–∏—é:', questionId);
      return await this.moveToNextQuestion(ctx);
    }

    const progress = this.surveyQuestions.getProgress(
      ctx.session.completedQuestions, 
      ctx.session.answers
    );

    const progressBar = this.generateProgressBar(progress.percentage);
    
    const messageText = `${progressBar} *${progress.completed}/${progress.total}*

${question.text}`;

    // –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±–æ—Ä—ã
    if (question.type === 'multiple_choice') {
      const currentSelections = ctx.session.multipleChoiceSelections[questionId] || [];
      if (currentSelections.length > 0) {
        const selectedText = currentSelections
          .map(selection => `‚Ä¢ ${this.getSelectionDisplayText(selection)}`)
          .join('\n');
        
        messageText += `\n\n*–í—ã–±—Ä–∞–Ω–æ:*\n${selectedText}`;
      }
    }

    if (question.note) {
      messageText += `\n\nüí° ${question.note}`;
    }

    try {
      await ctx.editMessageText(messageText, {
        parse_mode: 'Markdown',
        ...question.keyboard
      });
    } catch (error) {
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await ctx.reply(messageText, {
        parse_mode: 'Markdown',
        ...question.keyboard
      });
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç—ã
   */
  async handleSurveyAnswer(ctx, callbackData) {
    const currentQuestionId = ctx.session.currentQuestion;
    
    if (!currentQuestionId) {
      return await this.handleStart(ctx);
    }

    const question = this.surveyQuestions.getQuestion(currentQuestionId);
    const mappedValue = this.surveyQuestions.mapCallbackToValue(callbackData);

    console.log(`üìù –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å ${currentQuestionId}: ${callbackData} -> ${mappedValue}`);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    if (question.type === 'multiple_choice') {
      await this.handleMultipleChoice(ctx, currentQuestionId, mappedValue, callbackData);
      return;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
    const validation = this.surveyQuestions.validateAnswer(currentQuestionId, mappedValue);
    
    if (!validation.valid) {
      await ctx.answerCbQuery(validation.error, { show_alert: true });
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    ctx.session.answers[currentQuestionId] = mappedValue;
    ctx.session.completedQuestions.push(currentQuestionId);

    console.log('‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', currentQuestionId, '=', mappedValue);

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    await this.moveToNextQuestion(ctx);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
   */
  async handleMultipleChoice(ctx, questionId, value, callbackData) {
    const question = this.surveyQuestions.getQuestion(questionId);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –≤—ã–±–æ—Ä–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (!ctx.session.multipleChoiceSelections[questionId]) {
      ctx.session.multipleChoiceSelections[questionId] = [];
    }

    const currentSelections = ctx.session.multipleChoiceSelections[questionId];

    // –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ "–∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä"
    if (callbackData.includes('done')) {
      const validation = this.surveyQuestions.validateAnswer(
        questionId, 
        'done', 
        currentSelections
      );
      
      if (!validation.valid) {
        await ctx.answerCbQuery(validation.error, { show_alert: true });
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –≤—ã–±–æ—Ä—ã
      ctx.session.answers[questionId] = [...currentSelections];
      ctx.session.completedQuestions.push(questionId);
      
      console.log('‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω:', questionId, '=', currentSelections);
      
      return await this.moveToNextQuestion(ctx);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º/—É–±–∏—Ä–∞–µ–º –≤—ã–±–æ—Ä
    const existingIndex = currentSelections.indexOf(value);
    
    if (existingIndex > -1) {
      // –£–±–∏—Ä–∞–µ–º –∏–∑ –≤—ã–±–æ—Ä–∞
      currentSelections.splice(existingIndex, 1);
      await ctx.answerCbQuery('‚ùå –í—ã–±–æ—Ä —É–±—Ä–∞–Ω');
    } else {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≤—ã–±–æ—Ä–æ–≤
      const validation = this.surveyQuestions.validateAnswer(
        questionId, 
        value, 
        currentSelections
      );
      
      if (!validation.valid) {
        await ctx.answerCbQuery(validation.error, { show_alert: true });
        return;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤—ã–±–æ—Ä
      currentSelections.push(value);
      await ctx.answerCbQuery('‚úÖ –í—ã–±–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —Å —Ç–µ–∫—É—â–∏–º–∏ –≤—ã–±–æ—Ä–∞–º–∏
    await this.askQuestion(ctx, questionId);
  }

  /**
   * –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
   */
  async moveToNextQuestion(ctx) {
    const currentQuestionId = ctx.session.currentQuestion;
    const nextQuestionId = this.surveyQuestions.getNextQuestion(
      currentQuestionId, 
      ctx.session.answers
    );

    if (nextQuestionId) {
      ctx.session.currentQuestion = nextQuestionId;
      ctx.session.questionStartTime = Date.now();
      await this.askQuestion(ctx, nextQuestionId);
    } else {
      // –ê–Ω–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
      await this.completeSurvey(ctx);
    }
  }

  /**
   * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
   */
  async completeSurvey(ctx) {
    console.log('üèÅ –ê–Ω–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑...');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞–Ω–∞–ª–∏–∑–µ
    const analysisMessage = `üß† *–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã...*

–ê–Ω–∞—Å—Ç–∞—Å–∏—è –∏–∑—É—á–∞–µ—Ç –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø–æ–¥–±–∏—Ä–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.

–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥... ‚è≥`;

    await ctx.editMessageText(analysisMessage, { parse_mode: 'Markdown' });

    // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞
    await this.delay(config.ANALYSIS_DELAY_SECONDS * 1000);

    try {
      // VERSE-–∞–Ω–∞–ª–∏–∑
      const analysisResult = this.verseAnalysis.analyzeUser(ctx.session.answers);
      
      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:', {
        segment: analysisResult.segment,
        primaryIssue: analysisResult.primaryIssue,
        scores: analysisResult.scores
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–µ—Å—Å–∏–∏
      ctx.session.analysisResult = analysisResult;
      ctx.session.surveyCompleted = true;

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      await this.showAnalysisResults(ctx, analysisResult);

      // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –ª–∏–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—ã
      this.transferLeadAsync(ctx);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
      await ctx.editMessageText(
        'üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ê–Ω–∞—Å—Ç–∞—Å–∏—è —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –ª–∏—á–Ω–æ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã.',
        { parse_mode: 'Markdown' }
      );
    }
  }

  /**
   * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –ª–∏–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—ã
   */
  async transferLeadAsync(ctx) {
    try {
      const userData = this.prepareUserData(ctx);
      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É –ª–∏–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—ã...');
      
      const transferResult = await this.leadTransfer.processLead(userData);
      
      if (transferResult.success) {
        console.log('‚úÖ –õ–∏–¥ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω –≤–æ –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã');
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –ª–∏–¥–∞:', transferResult);
      }
      
    } catch (error) {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –ª–∏–¥–∞:', error);
    }
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏
   */
  prepareUserData(ctx) {
    return {
      userInfo: {
        telegram_id: ctx.from.id,
        username: ctx.from.username,
        first_name: ctx.from.first_name,
        last_name: ctx.from.last_name,
        language_code: ctx.from.language_code
      },
      surveyAnswers: ctx.session.answers,
      analysisResult: ctx.session.analysisResult,
      contactInfo: ctx.session.contactInfo || null,
      startTime: ctx.session.startTime,
      completedAt: Date.now(),
      sessionDuration: Date.now() - ctx.session.startTime
    };
  }

  /**
   * –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
   */
  async showAnalysisResults(ctx, analysisResult) {
    const message = analysisResult.personalMessage;

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üìû –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏', 'contact_request')],
      [Markup.button.callback('üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ', 'program_details')],
      [Markup.button.callback('üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã', 'free_materials')]
    ]);

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      ...keyboard
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    ctx.session.analysisResult = analysisResult;
    ctx.session.surveyCompleted = true;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
   */
  async handleContactCollection(ctx, callbackData) {
    if (callbackData === 'contact_request') {
      await this.requestContactInfo(ctx);
    } else if (callbackData === 'program_details') {
      await this.showProgramDetails(ctx);
    } else if (callbackData === 'free_materials') {
      await this.showFreeMaterials(ctx);
    } else {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö callback'–æ–≤
      await this.handleAdditionalCallbacks(ctx, callbackData);
    }
  }

  /**
   * –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
   */
  async requestContactInfo(ctx) {
    const contactMessage = `üì± *–ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?*

–ê–Ω–∞—Å—Ç–∞—Å–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –∏ —Å–≤—è–∂–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.

–£–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏:`;

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üìû –£–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 'contact_phone')],
      [Markup.button.callback('‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram', 'contact_telegram')],
      [Markup.button.callback('üìß –£–∫–∞–∑–∞—Ç—å email', 'contact_email')]
    ]);

    await ctx.editMessageText(contactMessage, {
      parse_mode: 'Markdown',
      ...keyboard
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
    ctx.session.awaitingContact = true;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
   */
  async handleContactInput(ctx, contactType) {
    let promptMessage = '';
    let validationRegex = null;
    
    switch (contactType) {
      case 'phone':
        promptMessage = 'üìû *–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:*\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: +7 999 123-45-67';
        validationRegex = /^[\+]?[0-9\s\-\(\)]{10,15}$/;
        break;
      case 'email':
        promptMessage = 'üìß *–£–∫–∞–∂–∏—Ç–µ –≤–∞—à email:*\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: example@mail.ru';
        validationRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        break;
      case 'telegram':
        // Telegram –∫–æ–Ω—Ç–∞–∫—Ç —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
        await this.saveContactAndFinish(ctx, 'telegram', ctx.from.username ? `@${ctx.from.username}` : `ID: ${ctx.from.id}`);
        return;
    }

    ctx.session.contactType = contactType;
    ctx.session.contactValidation = validationRegex;
    
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ —Å–≤—è–∑–∏', 'back_to_contact_choice')]
    ]);

    await ctx.editMessageText(promptMessage, {
      parse_mode: 'Markdown',
      ...keyboard
    });
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
   */
  async validateAndSaveContact(ctx, contactValue) {
    const contactType = ctx.session.contactType;
    const validation = ctx.session.contactValidation;
    
    if (validation && !validation.test(contactValue)) {
      let errorMessage = '';
      switch (contactType) {
        case 'phone':
          errorMessage = '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:';
          break;
        case 'email':
          errorMessage = '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:';
          break;
      }
      await ctx.reply(errorMessage);
      return false;
    }

    await this.saveContactAndFinish(ctx, contactType, contactValue);
    return true;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
   */
  async saveContactAndFinish(ctx, contactType, contactValue) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    ctx.session.contactInfo = {
      type: contactType,
      value: contactValue,
      provided_at: Date.now()
    };

    ctx.session.awaitingContact = false;
    ctx.session.contactType = null;
    ctx.session.contactValidation = null;

    const successMessage = `‚úÖ *–ö–æ–Ω—Ç–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!*

üìû ${contactType === 'phone' ? '–¢–µ–ª–µ—Ñ–æ–Ω' : contactType === 'email' ? 'Email' : 'Telegram'}: ${contactValue}

üéØ *–ß—Ç–æ –¥–∞–ª—å—à–µ:*
‚Ä¢ –ê–Ω–∞—Å—Ç–∞—Å–∏—è –ø–æ–ª—É—á–∏–ª–∞ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤
‚Ä¢ –í—ã –ø–æ–ª—É—á–∏—Ç–µ –≤—Å–µ –æ–±–µ—â–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
‚Ä¢ –ê–Ω–∞—Å—Ç–∞—Å–∏—è —Å–≤—è–∂–µ—Ç—Å—è –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è

üôè *–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!* –°–∫–æ—Ä–æ –º—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º —É–ª—É—á—à–∏—Ç—å –¥—ã—Ö–∞–Ω–∏–µ –∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ.`;

    await ctx.editMessageText(successMessage, { parse_mode: 'Markdown' });

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞ —Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    if (ctx.session.analysisResult) {
      this.transferLeadAsync(ctx);
    }
  }

  /**
   * –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
   */
  async showProgramDetails(ctx) {
    const analysisResult = ctx.session.analysisResult;
    
    const programMessage = `üìã *–î–µ—Ç–∞–ª–∏ –≤–∞—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã:*

üéØ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:* ${analysisResult.profile.description}

üí™ *–û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:*
${analysisResult.recommendations.main_program}

‚ö° *–ü–µ—Ä–≤—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏:*
${analysisResult.recommendations.urgent_techniques.map(tech => `‚Ä¢ ${tech}`).join('\n')}

‚è∞ *–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:* ${analysisResult.recommendations.timeline}

üë©‚Äç‚öïÔ∏è *–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è:* ${analysisResult.recommendations.consultation_type}

üéÅ *–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:*
${analysisResult.recommendations.support_materials.map(material => `‚Ä¢ ${material}`).join('\n')}`;

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üìû –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é', 'contact_request')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º', 'back_to_results')]
    ]);

    await ctx.editMessageText(programMessage, {
      parse_mode: 'Markdown',
      ...keyboard
    });
  }

  /**
   * –ü–æ–∫–∞–∑ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
   */
  async showFreeMaterials(ctx) {
    const analysisResult = ctx.session.analysisResult;
    
    const materialsMessage = `üéÅ *–í–∞—à–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:*

${analysisResult.recommendations.support_materials.map(material => `üìÑ ${material}`).join('\n')}

üíå *–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å:*
1. –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏
2. –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø—Ä–∏–¥—É—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç
3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É

üéØ *–≠—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø–æ–¥–æ–±—Ä–∞–Ω—ã –ø–æ–¥ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å "${analysisResult.profile.description}"*`;

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üìû –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã', 'contact_request')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º', 'back_to_results')]
    ]);

    await ctx.editMessageText(materialsMessage, {
      parse_mode: 'Markdown',
      ...keyboard
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  async handleTextMessage(ctx) {
    // –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    if (ctx.session.awaitingContact && ctx.session.contactType) {
      const success = await this.validateAndSaveContact(ctx, ctx.message.text.trim());
      return; // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ validateAndSaveContact
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–Ω–∫–µ—Ç—ã
    if (ctx.session.currentQuestion) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã üòä');
    } else {
      await ctx.reply('–ù–∞–ø–∏—à–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –¥—ã—Ö–∞–Ω–∏—è üå¨Ô∏è');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö callback'–æ–≤
   */
  async handleAdditionalCallbacks(ctx, callbackData) {
    switch (callbackData) {
      case 'back_to_start':
        await this.handleStart(ctx);
        break;
        
      case 'back_to_results':
        if (ctx.session.analysisResult) {
          await this.showAnalysisResults(ctx, ctx.session.analysisResult);
        } else {
          await this.handleStart(ctx);
        }
        break;
        
      case 'contact_phone':
        await this.handleContactInput(ctx, 'phone');
        break;
        
      case 'contact_email':
        await this.handleContactInput(ctx, 'email');
        break;
        
      case 'contact_telegram':
        await this.handleContactInput(ctx, 'telegram');
        break;
        
      case 'back_to_contact_choice':
        await this.requestContactInfo(ctx);
        break;
        
      default:
        await ctx.answerCbQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
        break;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
   */
  generateProgressBar(percentage) {
    const totalBlocks = 10;
    const filledBlocks = Math.round((percentage / 100) * totalBlocks);
    const emptyBlocks = totalBlocks - filledBlocks;
    
    return 'üü©'.repeat(filledBlocks) + '‚¨ú'.repeat(emptyBlocks);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞
   */
  getSelectionDisplayText(selection) {
    // –ü—Ä–æ—Å—Ç–æ–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±–æ—Ä–æ–≤
    const displayTexts = {
      'chronic_stress': '–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç—Ä–µ—Å—Å',
      'insomnia': '–ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–Ω–æ–º',
      'breathing_issues': '–ü—Ä–æ–±–ª–µ–º—ã —Å –¥—ã—Ö–∞–Ω–∏–µ–º',
      'high_pressure': '–ü–æ–≤—ã—à–µ–Ω–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ',
      'anxiety': '–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å',
      'fatigue': '–£—Å—Ç–∞–ª–æ—Å—Ç—å',
      'video': '–í–∏–¥–µ–æ—É—Ä–æ–∫–∏',
      'audio': '–ê—É–¥–∏–æ–ø—Ä–∞–∫—Ç–∏–∫–∏',
      'text': '–¢–µ–∫—Å—Ç–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
      'individual': '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏'
    };
    
    return displayTexts[selection] || selection;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
   */
  isAdmin(userId) {
    return config.ADMIN_ID && userId.toString() === config.ADMIN_ID.toString();
  }

  /**
   * –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
   */
  async showStats(ctx) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
      const stats = await this.leadTransfer.getTransferStats('24h');
      
      const statsMessage = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 24 —á–∞—Å–∞:*

üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*
‚Ä¢ –ù–∞—á–∞–ª–∏ –∞–Ω–∫–µ—Ç—É: ${stats?.started || 'N/A'}
‚Ä¢ –ó–∞–≤–µ—Ä—à–∏–ª–∏ –∞–Ω–∫–µ—Ç—É: ${stats?.completed || 'N/A'}
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: ${stats?.conversion_rate || 'N/A'}%

üéØ *–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ª–∏–¥–æ–≤:*
‚Ä¢ üî• HOT: ${stats?.segments?.hot || 0}
‚Ä¢ ‚≠ê WARM: ${stats?.segments?.warm || 0}
‚Ä¢ ‚ùÑÔ∏è COLD: ${stats?.segments?.cold || 0}
‚Ä¢ üå± NURTURE: ${stats?.segments?.nurture || 0}

üîÑ *–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:*
‚Ä¢ –ü–µ—Ä–µ–¥–∞–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç: ${stats?.transferred || 'N/A'}
‚Ä¢ –û—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥–∞—á–∏: ${stats?.errors || 0}

‚è±Ô∏è *–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:*
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∞–Ω–∫–µ—Ç—ã: ${stats?.avg_duration || 'N/A'} –º–∏–Ω
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: ${this.getActiveSessions()}

üïê *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* ${new Date().toLocaleString('ru-RU')}`;

      await ctx.reply(statsMessage, { parse_mode: 'Markdown' });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
  }

  /**
   * –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
   */
  async showHealthStatus(ctx) {
    try {
      const healthStatus = await this.leadTransfer.healthCheck();
      
      const statusEmoji = {
        true: '‚úÖ',
        false: '‚ùå',
        'not_configured': '‚ö†Ô∏è'
      };
      
      const healthMessage = `üè• *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:*

ü§ñ *–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç:* ${statusEmoji[healthStatus.mainBot]} ${healthStatus.mainBot ? '–î–æ—Å—Ç—É–ø–µ–Ω' : '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}

üìä *CRM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:* ${statusEmoji[healthStatus.crm]} ${
        healthStatus.crm === true ? '–†–∞–±–æ—Ç–∞–µ—Ç' : 
        healthStatus.crm === 'not_configured' ? '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ' : '–û—à–∏–±–∫–∞'
      }

üîß *–í–µ—Ä—Å–∏—è –±–æ—Ç–∞:* 1.0.0
üìÖ *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:* ${this.getUptime()}
üíæ *–ü–∞–º—è—Ç—å:* ${this.getMemoryUsage()}

üïê *–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ:* ${new Date().toLocaleString('ru-RU')}`;

      await ctx.reply(healthMessage, { parse_mode: 'Markdown' });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã');
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
   */
  getActiveSessions() {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∏–∑ Redis –∏–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    return 'N/A';
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
   */
  getUptime() {
    const uptime = process.uptime();
    const hours = Math.floor(uptime / 3600);
    const minutes = Math.floor((uptime % 3600) / 60);
    return `${hours}—á ${minutes}–º`;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
   */
  getMemoryUsage() {
    const used = process.memoryUsage();
    const mb = Math.round(used.heapUsed / 1024 / 1024);
    return `${mb} MB`;
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
   */
  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
   */
  launch() {
    console.log('ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º –ª–∏–¥–æ–≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–µ–≥–æ –±–æ—Ç–∞...');
    console.log('üìã –ê–Ω–∫–µ—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç', Object.keys(this.surveyQuestions.questions).length, '–≤–æ–ø—Ä–æ—Å–æ–≤');
    console.log('üß† VERSE-–∞–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
    console.log('üîÑ –°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    this.validateConfiguration();
    
    this.bot.launch({
      webhook: process.env.NODE_ENV === 'production' ? {
        domain: config.APP_URL,
        port: config.PORT
      } : undefined
    });

    console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üåê –†–µ–∂–∏–º: ${process.env.NODE_ENV || 'development'}`);
    
    if (config.ADMIN_ID) {
      console.log(`üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${config.ADMIN_ID}`);
    }
    
    // Graceful shutdown
    process.once('SIGINT', () => this.bot.stop('SIGINT'));
    process.once('SIGTERM', () => this.bot.stop('SIGTERM'));
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
   */
  validateConfiguration() {
    const requiredVars = ['LEAD_BOT_TOKEN'];
    const missing = requiredVars.filter(key => !process.env[key]);
    
    if (missing.length > 0) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
      missing.forEach(key => console.error(`   - ${key}`));
      process.exit(1);
    }
    
    console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞');
    
    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ–± –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    const optional = ['MAIN_BOT_API_URL', 'ADMIN_ID', 'CRM_WEBHOOK_URL'];
    const optionalMissing = optional.filter(key => !process.env[key]);
    
    if (optionalMissing.length > 0) {
      console.log('‚ö†Ô∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:');
      optionalMissing.forEach(key => console.log(`   - ${key}`));
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
const leadBot = new BreathingLeadBot();
leadBot.launch();