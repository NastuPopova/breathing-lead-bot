// –§–∞–π–ª: lead_bot/index.js - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ù–ê–í–ò–ì–ê–¶–ò–ï–ô –ù–ê–ó–ê–î –ò –î–ï–¢–°–ö–ò–ú–ò –í–û–ü–†–û–°–ê–ú–ò
// –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ª–∏–¥–æ–≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–µ–≥–æ –±–æ—Ç–∞ –¥–ª—è –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫

const { Telegraf, Markup, session } = require('telegraf');
const config = require('./config');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
let ExtendedSurveyQuestions, BreathingVERSEAnalysis, LeadTransferSystem;

try {
  ExtendedSurveyQuestions = require('./modules/survey/extended_questions');
  BreathingVERSEAnalysis = require('./modules/analysis/verse_analysis');
  LeadTransferSystem = require('./modules/integration/lead_transfer');
  console.log('‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π:', error.message);
  console.error('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –º–æ–¥—É–ª–µ–π');
  process.exit(1);
}

class BreathingLeadBot {
  constructor() {
    try {
      this.bot = new Telegraf(config.LEAD_BOT_TOKEN);
      this.surveyQuestions = new ExtendedSurveyQuestions();
      this.verseAnalysis = new BreathingVERSEAnalysis();
      this.leadTransfer = new LeadTransferSystem();
      
      console.log('‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–æ—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
      
      this.setupMiddleware();
      this.setupHandlers();
      this.setupErrorHandling();
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', error);
      throw error;
    }
  }

  setupMiddleware() {
    // –°–µ—Å—Å–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.bot.use(session({
      defaultSession: () => ({
        currentQuestion: null,
        answers: {},
        multipleChoiceSelections: {},
        startTime: Date.now(),
        questionStartTime: Date.now(),
        completedQuestions: [],
        navigationHistory: [] // –∏—Å—Ç–æ—Ä–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥"
      })
    }));

    // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏
    this.bot.use(async (ctx, next) => {
      try {
        const messageText = ctx.message?.text || ctx.callbackQuery?.data || 'callback';
        console.log(`[${new Date().toISOString()}] User ${ctx.from.id}: ${messageText}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (!ctx.session) {
          console.log('‚ö†Ô∏è –°–µ—Å—Å–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', ctx.from.id);
          ctx.session = {
            currentQuestion: null,
            answers: {},
            multipleChoiceSelections: {},
            startTime: Date.now(),
            questionStartTime: Date.now(),
            completedQuestions: [],
            navigationHistory: []
          };
        }
        
        return await next();
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ middleware:', error);
        return await next();
      }
    });
  }

  setupHandlers() {
    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.start(async (ctx) => {
      try {
        await this.handleStart(ctx);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ /start:', error);
        await this.sendErrorMessage(ctx, '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞');
      }
    });

    // –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    this.bot.command('debug', async (ctx) => {
      if (this.isAdmin(ctx.from.id)) {
        await this.handleDebugCommand(ctx);
      }
    });

    this.bot.command('reset', async (ctx) => {
      await this.handleResetCommand(ctx);
    });

    this.bot.command('stats', async (ctx) => {
      if (this.isAdmin(ctx.from.id)) {
        await this.showStats(ctx);
      }
    });

    this.bot.command('health', async (ctx) => {
      if (this.isAdmin(ctx.from.id)) {
        await this.showHealthStatus(ctx);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query (–Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫) - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ù–ê–í–ò–ì–ê–¶–ò–ï–ô
    this.bot.on('callback_query', async (ctx) => {
      await this.safeHandleCallback(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('text', async (ctx) => {
      try {
        await this.handleTextMessage(ctx);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞:', error);
        await this.sendErrorMessage(ctx, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
      }
    });
  }

  setupErrorHandling() {
    this.bot.catch(async (err, ctx) => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞:', err);
      
      try {
        // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
        console.error('–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:', {
          user_id: ctx?.from?.id,
          update_type: ctx?.updateType,
          callback_data: ctx?.callbackQuery?.data,
          message_text: ctx?.message?.text,
          timestamp: new Date().toISOString()
        });
        
        // –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await this.sendErrorMessage(ctx, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞');
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await this.notifyAdminAboutError(err, ctx);
        
      } catch (notificationError) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É:', notificationError);
      }
    });
  }

  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
   */
  async safeHandleCallback(ctx) {
    const callbackData = ctx.callbackQuery?.data;
    
    try {
      console.log(`\n=== CALLBACK START: ${callbackData} ===`);
      console.log('Session state:', {
        currentQuestion: ctx.session?.currentQuestion,
        hasAnswers: !!ctx.session?.answers,
        answersCount: Object.keys(ctx.session?.answers || {}).length,
        completedQuestionsCount: (ctx.session?.completedQuestions || []).length,
        navigationHistoryLength: (ctx.session?.navigationHistory || []).length
      });
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
      if (!this.surveyQuestions || !this.verseAnalysis) {
        throw new Error('–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      }
      
      // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ callback
      await ctx.answerCbQuery();
      console.log('‚úÖ Callback acknowledged');
      
      // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (!ctx.session) {
        console.log('‚ö†Ô∏è –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', ctx.from.id);
        ctx.session = {
          currentQuestion: null,
          answers: {},
          multipleChoiceSelections: {},
          startTime: Date.now(),
          questionStartTime: Date.now(),
          completedQuestions: [],
          navigationHistory: []
        };
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ "–Ω–∞–∑–∞–¥"
      if (callbackData === 'nav_back') {
        console.log('‚¨ÖÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –Ω–∞–∑–∞–¥');
        await this.handleBackNavigation(ctx);
        return;
      }
      
      // –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è callback
      if (callbackData === 'start_survey') {
        console.log('üìù –ú–∞—Ä—à—Ä—É—Ç: start_survey');
        await this.startSurvey(ctx);
      } else if (callbackData === 'about_survey') {
        console.log('üìù –ú–∞—Ä—à—Ä—É—Ç: about_survey');
        await this.showSurveyInfo(ctx);
      } else if (callbackData.startsWith('contact_') || 
                 ['back_to_start', 'back_to_results', 'back_to_contact_choice'].includes(callbackData)) {
        console.log('üìù –ú–∞—Ä—à—Ä—É—Ç: contact_collection');
        await this.handleContactCollection(ctx, callbackData);
      } else {
        console.log('üìù –ú–∞—Ä—à—Ä—É—Ç: survey_answer');
        await this.handleSurveyAnswer(ctx, callbackData);
      }
      
      console.log('=== CALLBACK END ===\n');
      
    } catch (error) {
      console.error('\n‚ùå –û–®–ò–ë–ö–ê –í CALLBACK HANDLER:');
      console.error('–¢–∏–ø –æ—à–∏–±–∫–∏:', error.name);
      console.error('–°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
      console.error('–°—Ç–µ–∫:', error.stack);
      console.error('Callback data:', callbackData);
      console.error('User ID:', ctx.from?.id);
      console.error('Session state:', ctx.session);
      
      // –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      try {
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', { show_alert: true });
      } catch (cbError) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback:', cbError.message);
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      await this.sendErrorMessage(ctx, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞–∑–∞–¥
   */
  async handleBackNavigation(ctx) {
    try {
      const currentQuestion = ctx.session.currentQuestion;
      
      console.log('‚¨ÖÔ∏è BACK NAVIGATION DEBUG:', {
        currentQuestion,
        hasAnswers: !!ctx.session.answers,
        answersCount: Object.keys(ctx.session.answers || {}).length,
        completedQuestionsCount: (ctx.session.completedQuestions || []).length,
        navigationHistoryLength: (ctx.session.navigationHistory || []).length
      });

      if (!currentQuestion) {
        console.log('‚ö†Ô∏è –ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É');
        await this.handleStart(ctx);
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å
      const previousQuestion = this.surveyQuestions.getPreviousQuestion(currentQuestion, ctx.session.answers);
      
      if (!previousQuestion) {
        console.log('‚ö†Ô∏è –ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É');
        await this.handleStart(ctx);
        return;
      }

      console.log('‚¨ÖÔ∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É:', previousQuestion);

      // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å)
      if (ctx.session.completedQuestions.includes(currentQuestion)) {
        const index = ctx.session.completedQuestions.indexOf(currentQuestion);
        ctx.session.completedQuestions.splice(index, 1);
        console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω –∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö:', currentQuestion);
      }

      // –£–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å (–µ—Å–ª–∏ –µ—Å—Ç—å)
      if (ctx.session.answers[currentQuestion]) {
        delete ctx.session.answers[currentQuestion];
        console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞:', currentQuestion);
      }

      // –û—á–∏—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—ã–±–æ—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
      if (ctx.session.multipleChoiceSelections && ctx.session.multipleChoiceSelections[currentQuestion]) {
        delete ctx.session.multipleChoiceSelections[currentQuestion];
        console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—ã–±–æ—Ä—ã –¥–ª—è:', currentQuestion);
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∫–∞–∫ —Ç–µ–∫—É—â–∏–π
      ctx.session.currentQuestion = previousQuestion;
      ctx.session.questionStartTime = Date.now();

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å
      await this.askQuestion(ctx, previousQuestion);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handleBackNavigation:', error);
      console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
      await this.sendErrorMessage(ctx, '–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
   */
  async handleStart(ctx) {
    const user = ctx.from;
    
    // –°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏
    ctx.session = {
      currentQuestion: null,
      answers: {},
      multipleChoiceSelections: {},
      startTime: Date.now(),
      questionStartTime: Date.now(),
      completedQuestions: [],
      navigationHistory: []
    };

    console.log('üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É:', user.id);

    const welcomeMessage = `üå¨Ô∏è *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –¥—ã—Ö–∞–Ω–∏—è!*

–ü—Ä–∏–≤–µ—Ç, ${user.first_name}! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞, —è –ø–æ–º–æ—â–Ω–∏–∫ –ê–Ω–∞—Å—Ç–∞—Å–∏–∏.

–ó–∞ 4-5 –º–∏–Ω—É—Ç –º—ã:
‚úÖ –û–ø—Ä–µ–¥–µ–ª–∏–º –≤–∞—à–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥—ã—Ö–∞–Ω–∏–µ–º
‚úÖ –ü–æ–¥–±–µ—Ä–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏  
‚úÖ –î–∞–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –ê–Ω–∞—Å—Ç–∞—Å–∏–∏
‚úÖ –ü—Ä–µ–¥–ª–æ–∂–∏–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã

*–ì–æ—Ç–æ–≤—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å —Å–≤–æ—ë –¥—ã—Ö–∞–Ω–∏–µ –∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ?*

üí° *–ù–æ–≤–æ–µ:* –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∫–Ω–æ–ø–∫–æ–π "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"`;

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üöÄ –ù–∞—á–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É', 'start_survey')],
      [Markup.button.callback('‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ', 'about_survey')]
    ]);

    await ctx.reply(welcomeMessage, {
      parse_mode: 'Markdown',
      ...keyboard
    });
  }

  /**
   * –ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ
   */
  async showSurveyInfo(ctx) {
    const infoMessage = `üìã *–ß—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:*

üîç *18+ —É–º–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤* –æ –≤–∞—à–∏—Ö:
‚Ä¢ –ü—Ä–∏–≤—ã—á–∫–∞—Ö –¥—ã—Ö–∞–Ω–∏—è
‚Ä¢ –£—Ä–æ–≤–Ω–µ —Å—Ç—Ä–µ—Å—Å–∞ –∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö
‚Ä¢ –¶–µ–ª—è—Ö –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö
‚Ä¢ –û–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏

üë∂ *–î–µ—Ç—Å–∫–∞—è –≤–µ—Ä—Å–∏—è* –≤–∫–ª—é—á–∞–µ—Ç:
‚Ä¢ –í–æ–ø—Ä–æ—Å—ã –æ —à–∫–æ–ª–µ/—Å–∞–¥–µ
‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –¥–µ—Ç—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
‚Ä¢ –ü–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–æ–∑—Ä–∞—Å—Ç—É —Ç–µ—Ö–Ω–∏–∫–∏
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π

üß† *VERSE-–∞–Ω–∞–ª–∏–∑* –Ω–∞ –æ—Å–Ω–æ–≤–µ:
‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏
‚Ä¢ –î–∞–Ω–Ω—ã—Ö –æ 1000+ —É—Å–ø–µ—à–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤  
‚Ä¢ –ú–µ—Ç–æ–¥–∏–∫ –ê–Ω–∞—Å—Ç–∞—Å–∏–∏ –°–∫–æ—Ä–æ–¥—É–º–æ–≤–æ–π

üéØ *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –ø–æ–¥ –≤–∞—à–∏ –ø—Ä–æ–±–ª–µ–º—ã
‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–Ω—è—Ç–∏–π
‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
‚Ä¢ –ü–ª–∞–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å –ê–Ω–∞—Å—Ç–∞—Å–∏–µ–π

‚è±Ô∏è *–í—Ä–µ–º—è:* 4-7 –º–∏–Ω—É—Ç (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞)
üîí *–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ:* –î–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã
üíù *–ë–µ—Å–ø–ª–∞—Ç–Ω–æ:* –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –±–∞–∑–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
‚¨ÖÔ∏è *–£–¥–æ–±–Ω–æ:* –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É`;

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('üöÄ –û—Ç–ª–∏—á–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º!', 'start_survey')],
      [Markup.button.callback('üîô –ù–∞–∑–∞–¥', 'back_to_start')]
    ]);

    try {
      await ctx.editMessageText(infoMessage, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } catch (error) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
      await ctx.reply(infoMessage, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    }
  }

  /**
   * –ù–∞—á–∞–ª–æ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async startSurvey(ctx) {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', ctx.from.id);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    ctx.session.currentQuestion = 'age_group';
    ctx.session.questionStartTime = Date.now();
    
    await this.askQuestion(ctx, 'age_group');
  }
  
 /**
   * –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ù–ê–í–ò–ì–ê–¶–ò–ï–ô
   */
  async askQuestion(ctx, questionId) {
    try {
      console.log('üîç ASK QUESTION DEBUG:', {
        questionId,
        sessionExists: !!ctx.session,
        currentQuestion: ctx.session?.currentQuestion,
        answersCount: Object.keys(ctx.session?.answers || {}).length
      });

      const question = this.surveyQuestions.getQuestion(questionId);
      
      if (!question) {
        console.error('‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω:', questionId);
        console.error('–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:', this.surveyQuestions.getAllQuestions());
        return await this.completeSurvey(ctx);
      }

      console.log('‚úÖ –í–æ–ø—Ä–æ—Å –Ω–∞–π–¥–µ–Ω:', {
        id: question.id,
        type: question.type,
        block: question.block,
        hasKeyboard: !!question.keyboard,
        allowBack: question.allowBack
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –ø–æ–∫–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–∞ (–¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö)
      if (!this.surveyQuestions.shouldShowQuestion(questionId, ctx.session?.answers || {})) {
        console.log('‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ —É—Å–ª–æ–≤–∏—é:', questionId);
        return await this.moveToNextQuestion(ctx);
      }

      const progress = this.surveyQuestions.getProgress(
        ctx.session?.completedQuestions || [], 
        ctx.session?.answers || {}
      );

      console.log('üìä Progress info:', progress);

      const progressBar = this.generateProgressBar(progress.percentage);
      
      let messageText = `${progressBar} *${progress.completed}/${progress.total}*\n\n${question.text}`;

      // –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±–æ—Ä—ã
      if (question.type === 'multiple_choice') {
        const currentSelections = ctx.session?.multipleChoiceSelections?.[questionId] || [];
        if (currentSelections.length > 0) {
          const selectedText = currentSelections
            .map(selection => `‚Ä¢ ${this.getSelectionDisplayText(selection)}`)
            .join('\n');
          
          messageText += `\n\n*–í—ã–±—Ä–∞–Ω–æ:*\n${selectedText}`;
        }
      }

      if (question.note) {
        messageText += `\n\nüí° ${question.note}`;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ—Ç—Å–∫–æ–º –ø–æ—Ç–æ–∫–µ
      if (this.surveyQuestions.isChildFlow(ctx.session?.answers)) {
        messageText += `\n\nüë∂ *–î–µ—Ç—Å–∫–∞—è –≤–µ—Ä—Å–∏—è –∞–Ω–∫–µ—Ç—ã*`;
      }

      console.log('üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å:', {
        questionId,
        messageLength: messageText.length,
        hasKeyboard: !!question.keyboard,
        keyboardType: question.keyboard?.reply_markup?.inline_keyboard ? 'inline' : 'other'
      });

      try {
        await ctx.editMessageText(messageText, {
          parse_mode: 'Markdown',
          ...question.keyboard
        });
        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      } catch (editError) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', editError.message);
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
        await ctx.reply(messageText, {
          parse_mode: 'Markdown',
          ...question.keyboard
        });
        console.log('‚úÖ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ askQuestion:', error);
      console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
      await this.sendErrorMessage(ctx, '–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç—ã - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
   */
  async handleSurveyAnswer(ctx, callbackData) {
    try {
      const currentQuestionId = ctx.session?.currentQuestion;
      
      console.log('üîç SURVEY ANSWER DEBUG:', {
        currentQuestionId,
        callbackData,
        sessionExists: !!ctx.session,
        hasAnswers: !!ctx.session?.answers,
        answersKeys: Object.keys(ctx.session?.answers || {}),
        isChildFlow: this.surveyQuestions.isChildFlow(ctx.session?.answers || {})
      });
      
      if (!currentQuestionId || !ctx.session?.answers) {
        console.log('‚ö†Ô∏è –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–≤–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∫–µ—Ç—É...');
        await this.handleStart(ctx);
        return;
      }

      const question = this.surveyQuestions.getQuestion(currentQuestionId);
      if (!question) {
        console.error(`‚ùå –í–æ–ø—Ä–æ—Å ${currentQuestionId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        console.error('–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:', this.surveyQuestions.getAllQuestions());
        await this.handleStart(ctx);
        return;
      }
      
      console.log('üìù Question found:', {
        id: currentQuestionId,
        type: question.type,
        hasOptions: !!question.options,
        required: question.required,
        allowBack: question.allowBack
      });

      const mappedValue = this.surveyQuestions.mapCallbackToValue(callbackData);
      console.log(`üìù –ú–∞–ø–ø–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞: ${callbackData} -> ${mappedValue}`);

      // –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ undefined mappedValue
      if (mappedValue === undefined || mappedValue === null) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å callback —Å –∑–Ω–∞—á–µ–Ω–∏–µ–º');
        console.error('Callback data:', callbackData);
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', { show_alert: true });
        return;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
      if (question.type === 'multiple_choice') {
        console.log('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä');
        await this.handleMultipleChoice(ctx, currentQuestionId, mappedValue, callbackData);
        return;
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
      const validation = this.surveyQuestions.validateAnswer(currentQuestionId, mappedValue);
      console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', validation);
      
      if (!validation.valid) {
        console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞:', validation.error);
        await ctx.answerCbQuery(validation.error, { show_alert: true });
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
      ctx.session.answers[currentQuestionId] = mappedValue;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
      if (!ctx.session.completedQuestions.includes(currentQuestionId)) {
        ctx.session.completedQuestions.push(currentQuestionId);
      }

      console.log('‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', {
        question: currentQuestionId,
        answer: mappedValue,
        totalAnswers: Object.keys(ctx.session.answers).length,
        completedQuestions: ctx.session.completedQuestions.length
      });

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
      await this.moveToNextQuestion(ctx);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handleSurveyAnswer:', error);
      console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
      console.error('–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:', {
        currentQuestion: ctx.session?.currentQuestion,
        callbackData,
        sessionState: ctx.session
      });
      await this.sendErrorMessage(ctx, '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
   */
  async handleMultipleChoice(ctx, questionId, value, callbackData) {
    try {
      console.log('üîç MULTIPLE CHOICE DEBUG:', {
        questionId,
        value,
        callbackData,
        isDone: callbackData.includes('done')
      });

      const question = this.surveyQuestions.getQuestion(questionId);
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –≤—ã–±–æ—Ä–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (!ctx.session.multipleChoiceSelections) {
        ctx.session.multipleChoiceSelections = {};
      }
      
      if (!ctx.session.multipleChoiceSelections[questionId]) {
        ctx.session.multipleChoiceSelections[questionId] = [];
      }

      const currentSelections = ctx.session.multipleChoiceSelections[questionId];
      console.log('üìã –¢–µ–∫—É—â–∏–µ –≤—ã–±–æ—Ä—ã:', currentSelections);

      // –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ "–∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä"
      if (callbackData.includes('done')) {
        console.log('‚úÖ –ó–∞–≤–µ—Ä—à–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä');
        
        const validation = this.surveyQuestions.validateAnswer(
          questionId, 
          'done', 
          currentSelections
        );
        
        if (!validation.valid) {
          console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞:', validation.error);
          await ctx.answerCbQuery(validation.error, { show_alert: true });
          return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –≤—ã–±–æ—Ä—ã
        ctx.session.answers[questionId] = [...currentSelections];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
        if (!ctx.session.completedQuestions.includes(questionId)) {
          ctx.session.completedQuestions.push(questionId);
        }
        
        console.log('‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω:', {
          question: questionId,
          selections: currentSelections,
          count: currentSelections.length
        });
        
        return await this.moveToNextQuestion(ctx);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º/—É–±–∏—Ä–∞–µ–º –≤—ã–±–æ—Ä
      const existingIndex = currentSelections.indexOf(value);
      
      if (existingIndex > -1) {
        // –£–±–∏—Ä–∞–µ–º –∏–∑ –≤—ã–±–æ—Ä–∞
        currentSelections.splice(existingIndex, 1);
        console.log('‚ûñ –í—ã–±–æ—Ä —É–±—Ä–∞–Ω:', value);
        await ctx.answerCbQuery('‚ùå –í—ã–±–æ—Ä —É–±—Ä–∞–Ω');
      } else {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≤—ã–±–æ—Ä–æ–≤
        const validation = this.surveyQuestions.validateAnswer(
          questionId, 
          value, 
          currentSelections
        );
        
        if (!validation.valid) {
          console.log('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—ã–±–æ—Ä–æ–≤:', validation.error);
          await ctx.answerCbQuery(validation.error, { show_alert: true });
          return;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤—ã–±–æ—Ä
        currentSelections.push(value);
        console.log('‚ûï –í—ã–±–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω:', value);
        await ctx.answerCbQuery('‚úÖ –í—ã–±–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω');
      }

      console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º–∏ –≤—ã–±–æ—Ä–∞–º–∏:', currentSelections);
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —Å —Ç–µ–∫—É—â–∏–º–∏ –≤—ã–±–æ—Ä–∞–º–∏
      await this.askQuestion(ctx, questionId);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handleMultipleChoice:', error);
      console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
      await this.sendErrorMessage(ctx, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞');
    }
  }

  /**
   * –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
   */
  async moveToNextQuestion(ctx) {
    try {
      const currentQuestionId = ctx.session.currentQuestion;
      
      console.log('üîç MOVE TO NEXT QUESTION DEBUG:', {
        currentQuestionId,
        hasAnswers: !!ctx.session.answers,
        answersCount: Object.keys(ctx.session.answers || {}).length,
        completedCount: (ctx.session.completedQuestions || []).length,
        isChildFlow: this.surveyQuestions.isChildFlow(ctx.session.answers || {})
      });

      const nextQuestionId = this.surveyQuestions.getNextQuestion(
        currentQuestionId, 
        ctx.session.answers
      );

      console.log('üîç Next question calculation:', {
        currentQuestion: currentQuestionId,
        nextQuestion: nextQuestionId,
        userData: Object.keys(ctx.session.answers || {}),
        flowType: this.surveyQuestions.isChildFlow(ctx.session.answers || {}) ? 'child' : 'adult'
      });

      if (nextQuestionId) {
        console.log('‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É:', nextQuestionId);
        ctx.session.currentQuestion = nextQuestionId;
        ctx.session.questionStartTime = Date.now();
        await this.askQuestion(ctx, nextQuestionId);
      } else {
        console.log('üèÅ –ê–Ω–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞–Ω–∞–ª–∏–∑—É');
        // –ê–Ω–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        await this.completeSurvey(ctx);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ moveToNextQuestion:', error);
      console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
      console.error('–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:', {
        currentQuestion: ctx.session?.currentQuestion,
        sessionAnswers: ctx.session?.answers,
        systemState: {
          surveyQuestionsAvailable: !!this.surveyQuestions,
          getNextQuestionMethod: !!this.surveyQuestions?.getNextQuestion
        }
      });
      await this.sendErrorMessage(ctx, '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É');
    }
  }

  /**
   * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
   */
  async completeSurvey(ctx) {
    try {
      console.log('üèÅ –ê–Ω–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑...');
      console.log('üìä –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', {
        totalAnswers: Object.keys(ctx.session.answers || {}).length,
        completedQuestions: (ctx.session.completedQuestions || []).length,
        answers: ctx.session.answers,
        isChildFlow: this.surveyQuestions.isChildFlow(ctx.session.answers || {}),
        surveyType: this.surveyQuestions.isChildFlow(ctx.session.answers || {}) ? '–¥–µ—Ç—Å–∫–∞—è' : '–≤–∑—Ä–æ—Å–ª–∞—è'
      });

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞–Ω–∞–ª–∏–∑–µ
      const surveyType = this.surveyQuestions.isChildFlow(ctx.session.answers || {}) ? '–¥–µ—Ç—Å–∫—É—é' : '–≤–∑—Ä–æ—Å–ª—É—é';
      const analysisMessage = `üß† *–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é ${surveyType} –∞–Ω–∫–µ—Ç—É...*

–ê–Ω–∞—Å—Ç–∞—Å–∏—è –∏–∑—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø–æ–¥–±–∏—Ä–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏${surveyType === '–¥–µ—Ç—Å–∫—É—é' ? ' –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞' : ''}.

–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥... ‚è≥`;

      await ctx.editMessageText(analysisMessage, { parse_mode: 'Markdown' });

      // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞
      await this.delay(config.ANALYSIS_DELAY_SECONDS * 1000);

      // VERSE-–∞–Ω–∞–ª–∏–∑ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è –¥–µ—Ç–µ–π –∏–ª–∏ –≤–∑—Ä–æ—Å–ª—ã—Ö)
      const analysisResult = this.verseAnalysis.analyzeUser(ctx.session.answers);
      
      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:', {
        segment: analysisResult.segment,
        primaryIssue: analysisResult.primaryIssue,
        scores: analysisResult.scores,
        hasRecommendations: !!analysisResult.recommendations,
        surveyType: surveyType
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–µ—Å—Å–∏–∏
      ctx.session.analysisResult = analysisResult;
      ctx.session.surveyCompleted = true;
      ctx.session.surveyType = surveyType;

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      await this.showAnalysisResults(ctx, analysisResult);

      // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –ª–∏–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—ã
      this.transferLeadAsync(ctx);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
      console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
      
      await ctx.editMessageText(
        'üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ê–Ω–∞—Å—Ç–∞—Å–∏—è —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –ª–∏—á–Ω–æ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã.',
        { parse_mode: 'Markdown' }
      );
    }
  }

  /**
   * –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
   */
  async showAnalysisResults(ctx, analysisResult) {
    try {
      console.log('üìã –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:', {
        segment: analysisResult.segment,
        hasMessage: !!analysisResult.personalMessage,
        messageLength: analysisResult.personalMessage?.length || 0,
        isChildFlow: this.surveyQuestions.isChildFlow(ctx.session?.answers || {})
      });

      const message = analysisResult.personalMessage;
      const isChildFlow = this.surveyQuestions.isChildFlow(ctx.session?.answers || {});

      // –†–∞–∑–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ—Ç—Å–∫–æ–≥–æ –∏ –≤–∑—Ä–æ—Å–ª–æ–≥–æ –ø–æ—Ç–æ–∫–∞
      let keyboard;
      if (isChildFlow) {
        keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ê–Ω–∞—Å—Ç–∞—Å–∏–µ–π', 'contact_request')],
          [Markup.button.callback('üìã –î–µ—Ç—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–¥—Ä–æ–±–Ω–µ–µ', 'child_program_details')],
          [Markup.button.callback('üéÅ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π', 'child_materials')]
        ]);
      } else {
        keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üìû –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏', 'contact_request')],
          [Markup.button.callback('üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ', 'program_details')],
          [Markup.button.callback('üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã', 'free_materials')]
        ]);
      }

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      ctx.session.analysisResult = analysisResult;
      ctx.session.surveyCompleted = true;
      
      console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∫–∞–∑–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
      console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
      await this.sendErrorMessage(ctx, '–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
   */
  async handleContactCollection(ctx, callbackData) {
    try {
      console.log('üìû –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–±–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', callbackData);
      const isChildFlow = this.surveyQuestions.isChildFlow(ctx.session?.answers || {});

      if (callbackData === 'contact_request') {
        await this.requestContactInfo(ctx);
      } else if (callbackData === 'program_details') {
        await this.showProgramDetails(ctx);
      } else if (callbackData === 'child_program_details') {
        await this.showChildProgramDetails(ctx);
      } else if (callbackData === 'free_materials') {
        await this.showFreeMaterials(ctx);
      } else if (callbackData === 'child_materials') {
        await this.showChildMaterials(ctx);
      } else if (callbackData === 'back_to_start') {
        await this.handleStart(ctx);
      } else if (callbackData === 'back_to_results') {
        if (ctx.session.analysisResult) {
          await this.showAnalysisResults(ctx, ctx.session.analysisResult);
        } else {
          await this.handleStart(ctx);
        }
      } else if (callbackData === 'contact_phone') {
        await this.handleContactInput(ctx, 'phone');
      } else if (callbackData === 'contact_email') {
        await this.handleContactInput(ctx, 'email');
      } else if (callbackData === 'contact_telegram') {
        await this.handleContactInput(ctx, 'telegram');
      } else if (callbackData === 'back_to_contact_choice') {
        await this.requestContactInfo(ctx);
      } else {
        console.log('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', callbackData);
        await ctx.answerCbQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error);
      await this.sendErrorMessage(ctx, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞');
    }
  }

  /**
   * –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –¥–µ—Ç—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
   */
  async showChildProgramDetails(ctx) {
    try {
      const analysisResult = ctx.session.analysisResult;
      
      if (!analysisResult) {
        console.log('‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É');
        await this.handleStart(ctx);
        return;
      }

      const childAge = ctx.session.answers.child_age_detail || '–Ω–µ —É–∫–∞–∑–∞–Ω';
      const education = ctx.session.answers.child_education_status || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';
      const schedule = ctx.session.answers.child_schedule_stress || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';
      
      const programMessage = `üë∂ *–î–µ—Ç—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫*

üë¶ *–í–æ–∑—Ä–∞—Å—Ç:* ${this.getChildAgeDisplay(childAge)}
üéì *–û–±—É—á–µ–Ω–∏–µ:* ${this.getEducationDisplay(education)}
‚è∞ *–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å:* ${this.getScheduleDisplay(schedule)}

üéØ *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:*
${analysisResult.recommendations.main_program}

üéÆ *–¢–µ—Ö–Ω–∏–∫–∏ –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞:*
${analysisResult.recommendations.urgent_techniques.map(tech => `‚Ä¢ ${tech}`).join('\n')}

‚è∞ *–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏–π:* ${analysisResult.recommendations.timeline}

üë®‚Äçüë©‚Äçüëß‚Äçüë¶ *–î–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π:* ${analysisResult.recommendations.consultation_type}

üéÅ *–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞:*
${analysisResult.recommendations.support_materials.map(material => `‚Ä¢ ${material}`).join('\n')}

üí° *–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:* –í—Å–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ –≤–æ–∑—Ä–∞—Å—Ç –∏ –ø–æ–¥–∞—é—Ç—Å—è –≤ –∏–≥—Ä–æ–≤–æ–π —Ñ–æ—Ä–º–µ`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìû –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é', 'contact_request')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º', 'back_to_results')]
      ]);

      await ctx.editMessageText(programMessage, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã:', error);
      await this.sendErrorMessage(ctx, '–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã');
    }
  }

  /**
   * –ü–æ–∫–∞–∑ –¥–µ—Ç—Å–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
   */
  async showChildMaterials(ctx) {
    try {
      const analysisResult = ctx.session.analysisResult;
      
      if (!analysisResult) {
        console.log('‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É');
        await this.handleStart(ctx);
        return;
      }

      const childAge = ctx.session.answers.child_age_detail || '–Ω–µ —É–∫–∞–∑–∞–Ω';
      
      const materialsMessage = `üéÅ *–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –¥–µ—Ç—Å–∫–∏—Ö –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫*

üë∂ *–î–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ ${this.getChildAgeDisplay(childAge)}:*

üìö *–î–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π:*
‚Ä¢ PDF-–≥–∏–¥ "–î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ –∏–≥—Ä—ã –¥–ª—è –¥–µ—Ç–µ–π"
‚Ä¢ –í–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≤—Å–µ–º —Ç–µ—Ö–Ω–∏–∫–∞–º
‚Ä¢ –ß–µ–∫-–ª–∏—Å—Ç "–ö–∞–∫ –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–±–µ–Ω–∫–∞"
‚Ä¢ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–µ—Ç—Å–∫–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫

üéÆ *–î–ª—è —Ä–µ–±–µ–Ω–∫–∞:*
‚Ä¢ –°–∫–∞–∑–∫–∏-–º–µ–¥–∏—Ç–∞—Ü–∏–∏ —Å –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–º–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏
‚Ä¢ –ò–≥—Ä–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —Ç–µ—Ö–Ω–∏–∫–∞–º–∏
‚Ä¢ –î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å–∫—Ä–∞—Å–∫–∏
‚Ä¢ –ê—É–¥–∏–æ—Å–∫–∞–∑–∫–∏ –¥–ª—è —Å–Ω–∞

üéØ *–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø–æ–¥ –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞:*
${analysisResult.recommendations.support_materials.map(material => `üìÑ ${material}`).join('\n')}

üíå *–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å:*
1. –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏
2. –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø—Ä–∏–¥—É—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤
3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É —á–∞—Ç—É

üë®‚Äçüë©‚Äçüëß‚Äçüë¶ *–ë–æ–Ω—É—Å:* –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å —Ä–µ–±–µ–Ω–∫–æ–º (30 –º–∏–Ω)`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìû –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã', 'contact_request')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º', 'back_to_results')]
      ]);

      await ctx.editMessageText(materialsMessage, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç—Å–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', error);
      await this.sendErrorMessage(ctx, '–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤');
    }
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  getChildAgeDisplay(age) {
    const ageMap = {
      '3-4': '3-4 –≥–æ–¥–∞ (–¥–æ—à–∫–æ–ª—å–Ω–∏–∫)',
      '5-6': '5-6 –ª–µ—Ç (—Å—Ç–∞—Ä—à–∏–π –¥–æ—à–∫–æ–ª—å–Ω–∏–∫)',
      '7-8': '7-8 –ª–µ—Ç (–º–ª–∞–¥—à–∏–π —à–∫–æ–ª—å–Ω–∏–∫)',
      '9-10': '9-10 –ª–µ—Ç (–º–ª–∞–¥—à–∏–π —à–∫–æ–ª—å–Ω–∏–∫)',
      '11-12': '11-12 –ª–µ—Ç (—Å—Ä–µ–¥–Ω–∏–π —à–∫–æ–ª—å–Ω–∏–∫)',
      '13-15': '13-15 –ª–µ—Ç (–ø–æ–¥—Ä–æ—Å—Ç–æ–∫)',
      '16-17': '16-17 –ª–µ—Ç (—Å—Ç–∞—Ä—à–∏–π –ø–æ–¥—Ä–æ—Å—Ç–æ–∫)'
    };
    return ageMap[age] || age;
  }

  getEducationDisplay(education) {
    const eduMap = {
      'home_only': '–î–æ–º–∞—à–Ω–µ–µ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ',
      'private_kindergarten': '–ß–∞—Å—Ç–Ω—ã–π –¥–µ—Ç—Å–∫–∏–π —Å–∞–¥',
      'public_kindergarten': '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–µ—Ç—Å–∫–∏–π —Å–∞–¥',
      'private_school': '–ß–∞—Å—Ç–Ω–∞—è —à–∫–æ–ª–∞',
      'public_school': '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è —à–∫–æ–ª–∞',
      'gymnasium': '–ì–∏–º–Ω–∞–∑–∏—è/–ª–∏—Ü–µ–π',
      'homeschooling': '–°–µ–º–µ–π–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ',
      'alternative_school': '–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —à–∫–æ–ª–∞'
    };
    return eduMap[education] || education;
  }

  getScheduleDisplay(schedule) {
    const scheduleMap = {
      'relaxed': '–°–≤–æ–±–æ–¥–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
      'moderate': '–£–º–µ—Ä–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å',
      'busy': '–í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å',
      'overloaded': '–ü–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å',
      'intensive': '–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞'
    };
    return scheduleMap[schedule] || schedule;
  }

  // ... (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏)

  /**
   /**
   * –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ù–ê–í–ò–ì–ê–¶–ò–ï–ô
   */
  async askQuestion(ctx, questionId) {
    try {
      console.log('üîç ASK QUESTION DEBUG:', {
        questionId,
        sessionExists: !!ctx.session,
        currentQuestion: ctx.session?.currentQuestion,
        answersCount: Object.keys(ctx.session?.answers || {}).length
      });

      const question = this.surveyQuestions.getQuestion(questionId);
      
      if (!question) {
        console.error('‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω:', questionId);
        console.error('–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:', this.surveyQuestions.getAllQuestions());
        return await this.completeSurvey(ctx);
      }

      console.log('‚úÖ –í–æ–ø—Ä–æ—Å –Ω–∞–π–¥–µ–Ω:', {
        id: question.id,
        type: question.type,
        block: question.block,
        hasKeyboard: !!question.keyboard,
        allowBack: question.allowBack
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –ø–æ–∫–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–∞ (–¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö)
      if (!this.surveyQuestions.shouldShowQuestion(questionId, ctx.session?.answers || {})) {
        console.log('‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ —É—Å–ª–æ–≤–∏—é:', questionId);
        return await this.moveToNextQuestion(ctx);
      }

      const progress = this.surveyQuestions.getProgress(
        ctx.session?.completedQuestions || [], 
        ctx.session?.answers || {}
      );

      console.log('üìä Progress info:', progress);

      const progressBar = this.generateProgressBar(progress.percentage);
      
      let messageText = `${progressBar} *${progress.completed}/${progress.total}*\n\n${question.text}`;

      // –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±–æ—Ä—ã
      if (question.type === 'multiple_choice') {
        const currentSelections = ctx.session?.multipleChoiceSelections?.[questionId] || [];
        if (currentSelections.length > 0) {
          const selectedText = currentSelections
            .map(selection => `‚Ä¢ ${this.getSelectionDisplayText(selection)}`)
            .join('\n');
          
          messageText += `\n\n*–í—ã–±—Ä–∞–Ω–æ:*\n${selectedText}`;
        }
      }

      if (question.note) {
        messageText += `\n\nüí° ${question.note}`;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ—Ç—Å–∫–æ–º –ø–æ—Ç–æ–∫–µ
      if (this.surveyQuestions.isChildFlow(ctx.session?.answers)) {
        messageText += `\n\nüë∂ *–î–µ—Ç—Å–∫–∞—è –≤–µ—Ä—Å–∏—è –∞–Ω–∫–µ—Ç—ã*`;
      }

      console.log('üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å:', {
        questionId,
        messageLength: messageText.length,
        hasKeyboard: !!question.keyboard,
        keyboardType: question.keyboard?.reply_markup?.inline_keyboard ? 'inline' : 'other'
      });

      try {
        await ctx.editMessageText(messageText, {
          parse_mode: 'Markdown',
          ...question.keyboard
        });
        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      } catch (editError) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', editError.message);
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
        await ctx.reply(messageText, {
          parse_mode: 'Markdown',
          ...question.keyboard
        });
        console.log('‚úÖ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ askQuestion:', error);
      console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
      await this.sendErrorMessage(ctx, '–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç—ã - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
   */
  async handleSurveyAnswer(ctx, callbackData) {
    try {
      const currentQuestionId = ctx.session?.currentQuestion;
      
      console.log('üîç SURVEY ANSWER DEBUG:', {
        currentQuestionId,
        callbackData,
        sessionExists: !!ctx.session,
        hasAnswers: !!ctx.session?.answers,
        answersKeys: Object.keys(ctx.session?.answers || {}),
        isChildFlow: this.surveyQuestions.isChildFlow(ctx.session?.answers || {})
      });
      
      if (!currentQuestionId || !ctx.session?.answers) {
        console.log('‚ö†Ô∏è –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–≤–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∫–µ—Ç—É...');
        await this.handleStart(ctx);
        return;
      }

      const question = this.surveyQuestions.getQuestion(currentQuestionId);
      if (!question) {
        console.error(`‚ùå –í–æ–ø—Ä–æ—Å ${currentQuestionId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        console.error('–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:', this.surveyQuestions.getAllQuestions());
        await this.handleStart(ctx);
        return;
      }
      
      console.log('üìù Question found:', {
        id: currentQuestionId,
        type: question.type,
        hasOptions: !!question.options,
        required: question.required,
        allowBack: question.allowBack
      });

      const mappedValue = this.surveyQuestions.mapCallbackToValue(callbackData);
      console.log(`üìù –ú–∞–ø–ø–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞: ${callbackData} -> ${mappedValue}`);

      // –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ undefined mappedValue
      if (mappedValue === undefined || mappedValue === null) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å callback —Å –∑–Ω–∞—á–µ–Ω–∏–µ–º');
        console.error('Callback data:', callbackData);
        await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', { show_alert: true });
        return;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
      if (question.type === 'multiple_choice') {
        console.log('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä');
        await this.handleMultipleChoice(ctx, currentQuestionId, mappedValue, callbackData);
        return;
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
      const validation = this.surveyQuestions.validateAnswer(currentQuestionId, mappedValue);
      console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', validation);
      
      if (!validation.valid) {
        console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞:', validation.error);
        await ctx.answerCbQuery(validation.error, { show_alert: true });
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
      ctx.session.answers[currentQuestionId] = mappedValue;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
      if (!ctx.session.completedQuestions.includes(currentQuestionId)) {
        ctx.session.completedQuestions.push(currentQuestionId);
      }

      console.log('‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', {
        question: currentQuestionId,
        answer: mappedValue,
        totalAnswers: Object.keys(ctx.session.answers).length,
        completedQuestions: ctx.session.completedQuestions.length
      });

      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
      await this.moveToNextQuestion(ctx);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handleSurveyAnswer:', error);
      console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
      console.error('–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:', {
        currentQuestion: ctx.session?.currentQuestion,
        callbackData,
        sessionState: ctx.session
      });
      await this.sendErrorMessage(ctx, '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
   */
  async handleMultipleChoice(ctx, questionId, value, callbackData) {
    try {
      console.log('üîç MULTIPLE CHOICE DEBUG:', {
        questionId,
        value,
        callbackData,
        isDone: callbackData.includes('done')
      });

      const question = this.surveyQuestions.getQuestion(questionId);
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –≤—ã–±–æ—Ä–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (!ctx.session.multipleChoiceSelections) {
        ctx.session.multipleChoiceSelections = {};
      }
      
      if (!ctx.session.multipleChoiceSelections[questionId]) {
        ctx.session.multipleChoiceSelections[questionId] = [];
      }

      const currentSelections = ctx.session.multipleChoiceSelections[questionId];
      console.log('üìã –¢–µ–∫—É—â–∏–µ –≤—ã–±–æ—Ä—ã:', currentSelections);

      // –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ "–∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä"
      if (callbackData.includes('done')) {
        console.log('‚úÖ –ó–∞–≤–µ—Ä—à–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä');
        
        const validation = this.surveyQuestions.validateAnswer(
          questionId, 
          'done', 
          currentSelections
        );
        
        if (!validation.valid) {
          console.log('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞:', validation.error);
          await ctx.answerCbQuery(validation.error, { show_alert: true });
          return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –≤—ã–±–æ—Ä—ã
        ctx.session.answers[questionId] = [...currentSelections];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
        if (!ctx.session.completedQuestions.includes(questionId)) {
          ctx.session.completedQuestions.push(questionId);
        }
        
        console.log('‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω:', {
          question: questionId,
          selections: currentSelections,
          count: currentSelections.length
        });
        
        return await this.moveToNextQuestion(ctx);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º/—É–±–∏—Ä–∞–µ–º –≤—ã–±–æ—Ä
      const existingIndex = currentSelections.indexOf(value);
      
      if (existingIndex > -1) {
        // –£–±–∏—Ä–∞–µ–º –∏–∑ –≤—ã–±–æ—Ä–∞
        currentSelections.splice(existingIndex, 1);
        console.log('‚ûñ –í—ã–±–æ—Ä —É–±—Ä–∞–Ω:', value);
        await ctx.answerCbQuery('‚ùå –í—ã–±–æ—Ä —É–±—Ä–∞–Ω');
      } else {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≤—ã–±–æ—Ä–æ–≤
        const validation = this.surveyQuestions.validateAnswer(
          questionId, 
          value, 
          currentSelections
        );
        
        if (!validation.valid) {
          console.log('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—ã–±–æ—Ä–æ–≤:', validation.error);
          await ctx.answerCbQuery(validation.error, { show_alert: true });
          return;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤—ã–±–æ—Ä
        currentSelections.push(value);
        console.log('‚ûï –í—ã–±–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω:', value);
        await ctx.answerCbQuery('‚úÖ –í—ã–±–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω');
      }

      console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º–∏ –≤—ã–±–æ—Ä–∞–º–∏:', currentSelections);
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —Å —Ç–µ–∫—É—â–∏–º–∏ –≤—ã–±–æ—Ä–∞–º–∏
      await this.askQuestion(ctx, questionId);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handleMultipleChoice:', error);
      console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
      await this.sendErrorMessage(ctx, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞');
    }
  }

  /**
   * –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
   */
  async moveToNextQuestion(ctx) {
    try {
      const currentQuestionId = ctx.session.currentQuestion;
      
      console.log('üîç MOVE TO NEXT QUESTION DEBUG:', {
        currentQuestionId,
        hasAnswers: !!ctx.session.answers,
        answersCount: Object.keys(ctx.session.answers || {}).length,
        completedCount: (ctx.session.completedQuestions || []).length,
        isChildFlow: this.surveyQuestions.isChildFlow(ctx.session.answers || {})
      });

      const nextQuestionId = this.surveyQuestions.getNextQuestion(
        currentQuestionId, 
        ctx.session.answers
      );

      console.log('üîç Next question calculation:', {
        currentQuestion: currentQuestionId,
        nextQuestion: nextQuestionId,
        userData: Object.keys(ctx.session.answers || {}),
        flowType: this.surveyQuestions.isChildFlow(ctx.session.answers || {}) ? 'child' : 'adult'
      });

      if (nextQuestionId) {
        console.log('‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É:', nextQuestionId);
        ctx.session.currentQuestion = nextQuestionId;
        ctx.session.questionStartTime = Date.now();
        await this.askQuestion(ctx, nextQuestionId);
      } else {
        console.log('üèÅ –ê–Ω–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞–Ω–∞–ª–∏–∑—É');
        // –ê–Ω–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        await this.completeSurvey(ctx);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ moveToNextQuestion:', error);
      console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
      console.error('–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏:', {
        currentQuestion: ctx.session?.currentQuestion,
        sessionAnswers: ctx.session?.answers,
        systemState: {
          surveyQuestionsAvailable: !!this.surveyQuestions,
          getNextQuestionMethod: !!this.surveyQuestions?.getNextQuestion
        }
      });
      await this.sendErrorMessage(ctx, '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É');
    }
  }

  /**
   * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
   */
  async completeSurvey(ctx) {
    try {
      console.log('üèÅ –ê–Ω–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑...');
      console.log('üìä –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', {
        totalAnswers: Object.keys(ctx.session.answers || {}).length,
        completedQuestions: (ctx.session.completedQuestions || []).length,
        answers: ctx.session.answers,
        isChildFlow: this.surveyQuestions.isChildFlow(ctx.session.answers || {}),
        surveyType: this.surveyQuestions.isChildFlow(ctx.session.answers || {}) ? '–¥–µ—Ç—Å–∫–∞—è' : '–≤–∑—Ä–æ—Å–ª–∞—è'
      });

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞–Ω–∞–ª–∏–∑–µ
      const surveyType = this.surveyQuestions.isChildFlow(ctx.session.answers || {}) ? '–¥–µ—Ç—Å–∫—É—é' : '–≤–∑—Ä–æ—Å–ª—É—é';
      const analysisMessage = `üß† *–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é ${surveyType} –∞–Ω–∫–µ—Ç—É...*

–ê–Ω–∞—Å—Ç–∞—Å–∏—è –∏–∑—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø–æ–¥–±–∏—Ä–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏${surveyType === '–¥–µ—Ç—Å–∫—É—é' ? ' –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞' : ''}.

–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥... ‚è≥`;

      await ctx.editMessageText(analysisMessage, { parse_mode: 'Markdown' });

      // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞
      await this.delay(config.ANALYSIS_DELAY_SECONDS * 1000);

      // VERSE-–∞–Ω–∞–ª–∏–∑ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è –¥–µ—Ç–µ–π –∏–ª–∏ –≤–∑—Ä–æ—Å–ª—ã—Ö)
      const analysisResult = this.verseAnalysis.analyzeUser(ctx.session.answers);
      
      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:', {
        segment: analysisResult.segment,
        primaryIssue: analysisResult.primaryIssue,
        scores: analysisResult.scores,
        hasRecommendations: !!analysisResult.recommendations,
        surveyType: surveyType
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–µ—Å—Å–∏–∏
      ctx.session.analysisResult = analysisResult;
      ctx.session.surveyCompleted = true;
      ctx.session.surveyType = surveyType;

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      await this.showAnalysisResults(ctx, analysisResult);

      // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –ª–∏–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—ã
      this.transferLeadAsync(ctx);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
      console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
      
      await ctx.editMessageText(
        'üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ê–Ω–∞—Å—Ç–∞—Å–∏—è —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –ª–∏—á–Ω–æ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã.',
        { parse_mode: 'Markdown' }
      );
    }
  }

  /**
   * –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
   */
  async showAnalysisResults(ctx, analysisResult) {
    try {
      console.log('üìã –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:', {
        segment: analysisResult.segment,
        hasMessage: !!analysisResult.personalMessage,
        messageLength: analysisResult.personalMessage?.length || 0,
        isChildFlow: this.surveyQuestions.isChildFlow(ctx.session?.answers || {})
      });

      const message = analysisResult.personalMessage;
      const isChildFlow = this.surveyQuestions.isChildFlow(ctx.session?.answers || {});

      // –†–∞–∑–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ—Ç—Å–∫–æ–≥–æ –∏ –≤–∑—Ä–æ—Å–ª–æ–≥–æ –ø–æ—Ç–æ–∫–∞
      let keyboard;
      if (isChildFlow) {
        keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ê–Ω–∞—Å—Ç–∞—Å–∏–µ–π', 'contact_request')],
          [Markup.button.callback('üìã –î–µ—Ç—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–¥—Ä–æ–±–Ω–µ–µ', 'child_program_details')],
          [Markup.button.callback('üéÅ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π', 'child_materials')]
        ]);
      } else {
        keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('üìû –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏', 'contact_request')],
          [Markup.button.callback('üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ', 'program_details')],
          [Markup.button.callback('üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã', 'free_materials')]
        ]);
      }

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        ...keyboard
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      ctx.session.analysisResult = analysisResult;
      ctx.session.surveyCompleted = true;
      
      console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∫–∞–∑–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
      console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
      await this.sendErrorMessage(ctx, '–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
   */
  async handleContactCollection(ctx, callbackData) {
    try {
      console.log('üìû –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–±–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', callbackData);
      const isChildFlow = this.surveyQuestions.isChildFlow(ctx.session?.answers || {});

      if (callbackData === 'contact_request') {
        await this.requestContactInfo(ctx);
      } else if (callbackData === 'program_details') {
        await this.showProgramDetails(ctx);
      } else if (callbackData === 'child_program_details') {
        await this.showChildProgramDetails(ctx);
      } else if (callbackData === 'free_materials') {
        await this.showFreeMaterials(ctx);
      } else if (callbackData === 'child_materials') {
        await this.showChildMaterials(ctx);
      } else if (callbackData === 'back_to_start') {
        await this.handleStart(ctx);
      } else if (callbackData === 'back_to_results') {
        if (ctx.session.analysisResult) {
          await this.showAnalysisResults(ctx, ctx.session.analysisResult);
        } else {
          await this.handleStart(ctx);
        }
      } else if (callbackData === 'contact_phone') {
        await this.handleContactInput(ctx, 'phone');
      } else if (callbackData === 'contact_email') {
        await this.handleContactInput(ctx, 'email');
      } else if (callbackData === 'contact_telegram') {
        await this.handleContactInput(ctx, 'telegram');
      } else if (callbackData === 'back_to_contact_choice') {
        await this.requestContactInfo(ctx);
      } else {
        console.log('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', callbackData);
        await ctx.answerCbQuery('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error);
      await this.sendErrorMessage(ctx, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞');
    }
  }

  /**
   * –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –¥–µ—Ç—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
   */
  async showChildProgramDetails(ctx) {
    try {
      const analysisResult = ctx.session.analysisResult;
      
      if (!analysisResult) {
        console.log('‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É');
        await this.handleStart(ctx);
        return;
      }

      const childAge = ctx.session.answers.child_age_detail || '–Ω–µ —É–∫–∞–∑–∞–Ω';
      const education = ctx.session.answers.child_education_status || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';
      const schedule = ctx.session.answers.child_schedule_stress || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';
      
      const programMessage = `üë∂ *–î–µ—Ç—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫*

üë¶ *–í–æ–∑—Ä–∞—Å—Ç:* ${this.getChildAgeDisplay(childAge)}
üéì *–û–±—É—á–µ–Ω–∏–µ:* ${this.getEducationDisplay(education)}
‚è∞ *–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å:* ${this.getScheduleDisplay(schedule)}

üéØ *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:*
${analysisResult.recommendations.main_program}

üéÆ *–¢–µ—Ö–Ω–∏–∫–∏ –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞:*
${analysisResult.recommendations.urgent_techniques.map(tech => `‚Ä¢ ${tech}`).join('\n')}

‚è∞ *–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏–π:* ${analysisResult.recommendations.timeline}

üë®‚Äçüë©‚Äçüëß‚Äçüë¶ *–î–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π:* ${analysisResult.recommendations.consultation_type}

üéÅ *–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞:*
${analysisResult.recommendations.support_materials.map(material => `‚Ä¢ ${material}`).join('\n')}

üí° *–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:* –í—Å–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ –≤–æ–∑—Ä–∞—Å—Ç –∏ –ø–æ–¥–∞—é—Ç—Å—è –≤ –∏–≥—Ä–æ–≤–æ–π —Ñ–æ—Ä–º–µ`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìû –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é', 'contact_request')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º', 'back_to_results')]
      ]);

      await ctx.editMessageText(programMessage, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã:', error);
      await this.sendErrorMessage(ctx, '–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã');
    }
  }

  /**
   * –ü–æ–∫–∞–∑ –¥–µ—Ç—Å–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
   */
  async showChildMaterials(ctx) {
    try {
      const analysisResult = ctx.session.analysisResult;
      
      if (!analysisResult) {
        console.log('‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É');
        await this.handleStart(ctx);
        return;
      }

      const childAge = ctx.session.answers.child_age_detail || '–Ω–µ —É–∫–∞–∑–∞–Ω';
      
      const materialsMessage = `üéÅ *–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –¥–µ—Ç—Å–∫–∏—Ö –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫*

üë∂ *–î–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ ${this.getChildAgeDisplay(childAge)}:*

üìö *–î–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π:*
‚Ä¢ PDF-–≥–∏–¥ "–î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ –∏–≥—Ä—ã –¥–ª—è –¥–µ—Ç–µ–π"
‚Ä¢ –í–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≤—Å–µ–º —Ç–µ—Ö–Ω–∏–∫–∞–º
‚Ä¢ –ß–µ–∫-–ª–∏—Å—Ç "–ö–∞–∫ –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–±–µ–Ω–∫–∞"
‚Ä¢ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–µ—Ç—Å–∫–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫

üéÆ *–î–ª—è —Ä–µ–±–µ–Ω–∫–∞:*
‚Ä¢ –°–∫–∞–∑–∫–∏-–º–µ–¥–∏—Ç–∞—Ü–∏–∏ —Å –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–º–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏
‚Ä¢ –ò–≥—Ä–æ–≤—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —Ç–µ—Ö–Ω–∏–∫–∞–º–∏
‚Ä¢ –î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å–∫—Ä–∞—Å–∫–∏
‚Ä¢ –ê—É–¥–∏–æ—Å–∫–∞–∑–∫–∏ –¥–ª—è —Å–Ω–∞

üéØ *–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø–æ–¥ –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞:*
${analysisResult.recommendations.support_materials.map(material => `üìÑ ${material}`).join('\n')}

üíå *–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å:*
1. –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏
2. –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø—Ä–∏–¥—É—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤
3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É —á–∞—Ç—É

üë®‚Äçüë©‚Äçüëß‚Äçüë¶ *–ë–æ–Ω—É—Å:* –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å —Ä–µ–±–µ–Ω–∫–æ–º (30 –º–∏–Ω)`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìû –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã', 'contact_request')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º', 'back_to_results')]
      ]);

      await ctx.editMessageText(materialsMessage, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç—Å–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', error);
      await this.sendErrorMessage(ctx, '–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤');
    }
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  getChildAgeDisplay(age) {
    const ageMap = {
      '3-4': '3-4 –≥–æ–¥–∞ (–¥–æ—à–∫–æ–ª—å–Ω–∏–∫)',
      '5-6': '5-6 –ª–µ—Ç (—Å—Ç–∞—Ä—à–∏–π –¥–æ—à–∫–æ–ª—å–Ω–∏–∫)',
      '7-8': '7-8 –ª–µ—Ç (–º–ª–∞–¥—à–∏–π —à–∫–æ–ª—å–Ω–∏–∫)',
      '9-10': '9-10 –ª–µ—Ç (–º–ª–∞–¥—à–∏–π —à–∫–æ–ª—å–Ω–∏–∫)',
      '11-12': '11-12 –ª–µ—Ç (—Å—Ä–µ–¥–Ω–∏–π —à–∫–æ–ª—å–Ω–∏–∫)',
      '13-15': '13-15 –ª–µ—Ç (–ø–æ–¥—Ä–æ—Å—Ç–æ–∫)',
      '16-17': '16-17 –ª–µ—Ç (—Å—Ç–∞—Ä—à–∏–π –ø–æ–¥—Ä–æ—Å—Ç–æ–∫)'
    };
    return ageMap[age] || age;
  }

  getEducationDisplay(education) {
    const eduMap = {
      'home_only': '–î–æ–º–∞—à–Ω–µ–µ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ',
      'private_kindergarten': '–ß–∞—Å—Ç–Ω—ã–π –¥–µ—Ç—Å–∫–∏–π —Å–∞–¥',
      'public_kindergarten': '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–µ—Ç—Å–∫–∏–π —Å–∞–¥',
      'private_school': '–ß–∞—Å—Ç–Ω–∞—è —à–∫–æ–ª–∞',
      'public_school': '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è —à–∫–æ–ª–∞',
      'gymnasium': '–ì–∏–º–Ω–∞–∑–∏—è/–ª–∏—Ü–µ–π',
      'homeschooling': '–°–µ–º–µ–π–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ',
      'alternative_school': '–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —à–∫–æ–ª–∞'
    };
    return eduMap[education] || education;
  }

  getScheduleDisplay(schedule) {
    const scheduleMap = {
      'relaxed': '–°–≤–æ–±–æ–¥–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
      'moderate': '–£–º–µ—Ä–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å',
      'busy': '–í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å',
      'overloaded': '–ü–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å',
      'intensive': '–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞'
    };
    return scheduleMap[schedule] || schedule;
  }

  // ... (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏)

  /**
   * –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
   */
  async requestContactInfo(ctx) {
    try {
      const isChildFlow = this.surveyQuestions.isChildFlow(ctx.session?.answers || {});
      
      const contactMessage = isChildFlow 
        ? `üì± *–ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?*

–ê–Ω–∞—Å—Ç–∞—Å–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –¥–µ—Ç—Å–∫—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –∏ —Å–≤—è–∂–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.

–£–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏:`
        : `üì± *–ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?*

–ê–Ω–∞—Å—Ç–∞—Å–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –∏ —Å–≤—è–∂–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.

–£–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏:`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìû –£–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', 'contact_phone')],
        [Markup.button.callback('‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram', 'contact_telegram')],
        [Markup.button.callback('üìß –£–∫–∞–∑–∞—Ç—å email', 'contact_email')]
      ]);

      await ctx.editMessageText(contactMessage, {
        parse_mode: 'Markdown',
        ...keyboard
      });

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
      ctx.session.awaitingContact = true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error);
      await this.sendErrorMessage(ctx, '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
   */
  async handleContactInput(ctx, contactType) {
    try {
      let promptMessage = '';
      let validationRegex = null;
      const isChildFlow = this.surveyQuestions.isChildFlow(ctx.session?.answers || {});
      
      switch (contactType) {
        case 'phone':
          promptMessage = isChildFlow 
            ? 'üìû *–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:*\n\n–ê–Ω–∞—Å—Ç–∞—Å–∏—è —Å–≤—è–∂–µ—Ç—Å—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: +7 999 123-45-67'
            : 'üìû *–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:*\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: +7 999 123-45-67';
          validationRegex = /^[\+]?[0-9\s\-\(\)]{10,15}$/;
          break;
        case 'email':
          promptMessage = isChildFlow
            ? 'üìß *–£–∫–∞–∂–∏—Ç–µ –≤–∞—à email:*\n\n–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –¥–µ—Ç—Å–∫–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫ –ø—Ä–∏–¥—É—Ç –Ω–∞ –ø–æ—á—Ç—É\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: example@mail.ru'
            : 'üìß *–£–∫–∞–∂–∏—Ç–µ –≤–∞—à email:*\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: example@mail.ru';
          validationRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
          break;
        case 'telegram':
          // Telegram –∫–æ–Ω—Ç–∞–∫—Ç —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
          const confirmMessage = isChildFlow
            ? `‚úÖ *–û—Ç–ª–∏—á–Ω–æ!*\n\n–í–∞—à Telegram: ${ctx.from.username ? `@${ctx.from.username}` : `ID: ${ctx.from.id}`}\n\n–ê–Ω–∞—Å—Ç–∞—Å–∏—è —Å–≤—è–∂–µ—Ç—Å—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫.`
            : `‚úÖ *–û—Ç–ª–∏—á–Ω–æ!*\n\n–í–∞—à Telegram: ${ctx.from.username ? `@${ctx.from.username}` : `ID: ${ctx.from.id}`}\n\n–ê–Ω–∞—Å—Ç–∞—Å–∏—è —Å–≤—è–∂–µ—Ç—Å—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã.`;
          
          await this.saveContactAndFinish(ctx, 'telegram', ctx.from.username ? `@${ctx.from.username}` : `ID: ${ctx.from.id}`);
          return;
      }

      ctx.session.contactType = contactType;
      ctx.session.contactValidation = validationRegex;
      
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ —Å–≤—è–∑–∏', 'back_to_contact_choice')]
      ]);

      await ctx.editMessageText(promptMessage, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error);
      await this.sendErrorMessage(ctx, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
    }
  }

  /**
   * –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
   */
  async showProgramDetails(ctx) {
    try {
      const analysisResult = ctx.session.analysisResult;
      
      if (!analysisResult) {
        console.log('‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É');
        await this.handleStart(ctx);
        return;
      }
      
      const programMessage = `üìã *–î–µ—Ç–∞–ª–∏ –≤–∞—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã:*

üéØ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:* ${analysisResult.profile.description}

üí™ *–û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:*
${analysisResult.recommendations.main_program}

‚ö° *–ü–µ—Ä–≤—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏:*
${analysisResult.recommendations.urgent_techniques.map(tech => `‚Ä¢ ${tech}`).join('\n')}

‚è∞ *–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:* ${analysisResult.recommendations.timeline}

üë©‚Äç‚öïÔ∏è *–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è:* ${analysisResult.recommendations.consultation_type}

üéÅ *–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:*
${analysisResult.recommendations.support_materials.map(material => `‚Ä¢ ${material}`).join('\n')}`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìû –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é', 'contact_request')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º', 'back_to_results')]
      ]);

      await ctx.editMessageText(programMessage, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã:', error);
      await this.sendErrorMessage(ctx, '–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã');
    }
  }

  /**
   * –ü–æ–∫–∞–∑ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
   */
  async showFreeMaterials(ctx) {
    try {
      const analysisResult = ctx.session.analysisResult;
      
      if (!analysisResult) {
        console.log('‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É');
        await this.handleStart(ctx);
        return;
      }
      
      const materialsMessage = `üéÅ *–í–∞—à–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:*

${analysisResult.recommendations.support_materials.map(material => `üìÑ ${material}`).join('\n')}

üíå *–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å:*
1. –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏
2. –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø—Ä–∏–¥—É—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç
3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É

üéØ *–≠—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø–æ–¥–æ–±—Ä–∞–Ω—ã –ø–æ–¥ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å "${analysisResult.profile.description}"*`;

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üìû –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã', 'contact_request')],
        [Markup.button.callback('üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º', 'back_to_results')]
      ]);

      await ctx.editMessageText(materialsMessage, {
        parse_mode: 'Markdown',
        ...keyboard
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:', error);
      await this.sendErrorMessage(ctx, '–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤');
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
   */
  async saveContactAndFinish(ctx, contactType, contactValue) {
    try {
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç:', { contactType, contactValue });
      const isChildFlow = this.surveyQuestions.isChildFlow(ctx.session?.answers || {});

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      ctx.session.contactInfo = {
        type: contactType,
        value: contactValue,
        provided_at: Date.now()
      };

      ctx.session.awaitingContact = false;
      ctx.session.contactType = null;
      ctx.session.contactValidation = null;

      const successMessage = isChildFlow ? `‚úÖ *–ö–æ–Ω—Ç–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!*

üìû ${contactType === 'phone' ? '–¢–µ–ª–µ—Ñ–æ–Ω' : contactType === 'email' ? 'Email' : 'Telegram'}: ${contactValue}

üë∂ *–ß—Ç–æ –¥–∞–ª—å—à–µ –¥–ª—è –¥–µ—Ç—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã:*
‚Ä¢ –ê–Ω–∞—Å—Ç–∞—Å–∏—è –ø–æ–ª—É—á–∏–ª–∞ –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–±–µ–Ω–∫–µ
‚Ä¢ –î–µ—Ç—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤
‚Ä¢ –í—ã –ø–æ–ª—É—á–∏—Ç–µ –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π
‚Ä¢ –ê–Ω–∞—Å—Ç–∞—Å–∏—è –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ—Ç –ø–æ —Ä–∞–±–æ—Ç–µ —Å —Ä–µ–±–µ–Ω–∫–æ–º

üéÅ *–ë–æ–Ω—É—Å:* –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –º–µ—Ç–æ–¥–∏—á–∫–∞ "–î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ –∏–≥—Ä—ã –¥–æ–º–∞"

üôè *–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–±–æ—Ç—É –æ –∑–¥–æ—Ä–æ–≤—å–µ —Ä–µ–±–µ–Ω–∫–∞!*` : `‚úÖ *–ö–æ–Ω—Ç–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!*

üìû ${contactType === 'phone' ? '–¢–µ–ª–µ—Ñ–æ–Ω' : contactType === 'email' ? 'Email' : 'Telegram'}: ${contactValue}

üéØ *–ß—Ç–æ –¥–∞–ª—å—à–µ:*
‚Ä¢ –ê–Ω–∞—Å—Ç–∞—Å–∏—è –ø–æ–ª—É—á–∏–ª–∞ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤
‚Ä¢ –í—ã –ø–æ–ª—É—á–∏—Ç–µ –≤—Å–µ –æ–±–µ—â–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
‚Ä¢ –ê–Ω–∞—Å—Ç–∞—Å–∏—è —Å–≤—è–∂–µ—Ç—Å—è –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è

üôè *–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!* –°–∫–æ—Ä–æ –º—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º —É–ª—É—á—à–∏—Ç—å –¥—ã—Ö–∞–Ω–∏–µ –∏ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ.`;

      await ctx.editMessageText(successMessage, { parse_mode: 'Markdown' });

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞ —Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
      if (ctx.session.analysisResult) {
        this.transferLeadAsync(ctx);
      }

      console.log('‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error);
      await this.sendErrorMessage(ctx, '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  async handleTextMessage(ctx) {
    try {
      console.log('üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', ctx.message.text);

      // –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      if (ctx.session.awaitingContact && ctx.session.contactType) {
        console.log('üìû –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
        const success = await this.validateAndSaveContact(ctx, ctx.message.text.trim());
        return;
      }

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–Ω–∫–µ—Ç—ã
      if (ctx.session.currentQuestion) {
        const isChildFlow = this.surveyQuestions.isChildFlow(ctx.session?.answers || {});
        const flowMessage = isChildFlow 
          ? '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ä–µ–±–µ–Ω–∫–µ üòä\n\nüí° –ú–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∫–Ω–æ–ø–∫–æ–π "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"'
          : '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã üòä\n\nüí° –ú–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∫–Ω–æ–ø–∫–æ–π "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"';
        await ctx.reply(flowMessage);
      } else {
        await ctx.reply('–ù–∞–ø–∏—à–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –¥—ã—Ö–∞–Ω–∏—è üå¨Ô∏è\n\nüí° –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–µ—Ç—Å–∫–∞—è –≤–µ—Ä—Å–∏—è –∞–Ω–∫–µ—Ç—ã!');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞:', error);
      await this.sendErrorMessage(ctx, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
   */
  async validateAndSaveContact(ctx, contactValue) {
    try {
      const contactType = ctx.session.contactType;
      const validation = ctx.session.contactValidation;
      const isChildFlow = this.surveyQuestions.isChildFlow(ctx.session?.answers || {});
      
      console.log('üîç –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç:', { contactType, contactValue, hasValidation: !!validation });
      
      if (validation && !validation.test(contactValue)) {
        let errorMessage = '';
        switch (contactType) {
          case 'phone':
            errorMessage = isChildFlow
              ? '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (–Ω—É–∂–µ–Ω –¥–ª—è —Å–≤—è–∑–∏ –ø–æ –¥–µ—Ç—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ):'
              : '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:';
            break;
          case 'email':
            errorMessage = isChildFlow
              ? '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ (–Ω–∞ –Ω–µ–≥–æ –ø—Ä–∏–¥—É—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞):'
              : '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:';
            break;
        }
        await ctx.reply(errorMessage);
        return false;
      }

      await this.saveContactAndFinish(ctx, contactType, contactValue);
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞:', error);
      await this.sendErrorMessage(ctx, '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
      return false;
    }
  }

  /**
   * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –ª–∏–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—ã - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
   */
  async transferLeadAsync(ctx) {
    try {
      const userData = this.prepareUserData(ctx);
      console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É –ª–∏–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—ã...', {
        userId: userData.userInfo.telegram_id,
        segment: userData.analysisResult?.segment,
        hasContact: !!userData.contactInfo,
        surveyType: userData.surveyType || 'adult',
        isChildFlow: this.surveyQuestions.isChildFlow(userData.surveyAnswers || {})
      });
      
      const transferResult = await this.leadTransfer.processLead(userData);
      
      if (transferResult.success) {
        console.log('‚úÖ –õ–∏–¥ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω –≤–æ –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã');
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –ª–∏–¥–∞:', transferResult);
      }
      
    } catch (error) {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –ª–∏–¥–∞:', error);
    }
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
   */
  prepareUserData(ctx) {
    const isChildFlow = this.surveyQuestions.isChildFlow(ctx.session?.answers || {});
    
    return {
      userInfo: {
        telegram_id: ctx.from.id,
        username: ctx.from.username,
        first_name: ctx.from.first_name,
        last_name: ctx.from.last_name,
        language_code: ctx.from.language_code
      },
      surveyAnswers: ctx.session.answers,
      analysisResult: ctx.session.analysisResult,
      contactInfo: ctx.session.contactInfo || null,
      startTime: ctx.session.startTime,
      completedAt: Date.now(),
      sessionDuration: Date.now() - ctx.session.startTime,
      surveyType: isChildFlow ? 'child' : 'adult',
      childData: isChildFlow ? {
        age: ctx.session.answers.child_age_detail,
        education: ctx.session.answers.child_education_status,
        schedule: ctx.session.answers.child_schedule_stress,
        problems: ctx.session.answers.child_problems_detailed,
        parentInvolvement: ctx.session.answers.child_parent_involvement,
        motivation: ctx.session.answers.child_motivation_approach,
        timeAvailability: ctx.session.answers.child_time_availability
      } : null
    };
  }

  /**
   * –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã - –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
   */
  async handleDebugCommand(ctx) {
    if (!this.isAdmin(ctx.from.id)) {
      return;
    }
    
    const debugInfo = {
      bot_status: 'running',
      current_time: new Date().toISOString(),
      uptime_seconds: Math.floor(process.uptime()),
      memory_mb: Math.round(process.memoryUsage().heapUsed / 1024 / 1024),
      node_version: process.version,
      features: {
        navigation_support: true,
        child_flow_support: true,
        back_button: true
      },
      components: {
        survey_questions: !!this.surveyQuestions,
        verse_analysis: !!this.verseAnalysis,
        lead_transfer: !!this.leadTransfer
      },
      session_info: ctx.session ? {
        has_session: true,
        current_question: ctx.session.currentQuestion,
        answers_count: Object.keys(ctx.session.answers || {}).length,
        completed_count: (ctx.session.completedQuestions || []).length,
        survey_completed: ctx.session.surveyCompleted || false,
        has_analysis_result: !!ctx.session.analysisResult,
        navigation_history_length: (ctx.session.navigationHistory || []).length,
        is_child_flow: this.surveyQuestions.isChildFlow(ctx.session.answers || {}),
        survey_type: ctx.session.surveyType || 'adult'
      } : { has_session: false }
    };
    
    await ctx.reply(`üîß *Debug Info (v2.0 —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π):*\n\`\`\`json\n${JSON.stringify(debugInfo, null, 2)}\n\`\`\``, {
      parse_mode: 'Markdown'
    });
  }

  async handleResetCommand(ctx) {
    console.log('üîÑ –°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.from.id);
    
    ctx.session = {
      currentQuestion: null,
      answers: {},
      multipleChoiceSelections: {},
      startTime: Date.now(),
      questionStartTime: Date.now(),
      completedQuestions: [],
      navigationHistory: []
    };
    
    await ctx.reply('üîÑ –°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /start\n\n‚ú® –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n‚Ä¢ –ö–Ω–æ–ø–∫–∞ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"\n‚Ä¢ –î–µ—Ç—Å–∫–∞—è –≤–µ—Ä—Å–∏—è –∞–Ω–∫–µ—Ç—ã\n‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è');
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
   */
  async sendErrorMessage(ctx, message) {
    try {
      if (ctx && ctx.reply) {
        await ctx.reply(`üòî ${message}`);
      }
    } catch (error) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', error);
    }
  }

  generateProgressBar(percentage) {
    const totalBlocks = 10;
    const filledBlocks = Math.round((percentage / 100) * totalBlocks);
    const emptyBlocks = totalBlocks - filledBlocks;
    
    return 'üü©'.repeat(filledBlocks) + '‚¨ú'.repeat(emptyBlocks);
  }

  getSelectionDisplayText(selection) {
    const displayTexts = {
      'chronic_stress': '–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç—Ä–µ—Å—Å',
      'insomnia': '–ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–Ω–æ–º',
      'breathing_issues': '–ü—Ä–æ–±–ª–µ–º—ã —Å –¥—ã—Ö–∞–Ω–∏–µ–º',
      'high_pressure': '–ü–æ–≤—ã—à–µ–Ω–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ',
      'anxiety': '–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å',
      'fatigue': '–£—Å—Ç–∞–ª–æ—Å—Ç—å',
      'video': '–í–∏–¥–µ–æ—É—Ä–æ–∫–∏',
      'audio': '–ê—É–¥–∏–æ–ø—Ä–∞–∫—Ç–∏–∫–∏',
      'text': '–¢–µ–∫—Å—Ç–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
      'individual': '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏',
      // –î–µ—Ç—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
      'tantrums': '–ò—Å—Ç–µ—Ä–∏–∫–∏',
      'sleep_problems': '–ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–Ω–æ–º',
      'hyperactivity': '–ì–∏–ø–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
      'anxiety': '–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å',
      'separation_anxiety': '–ë–æ—è–∑–Ω—å —Ä–∞–∑–ª—É–∫–∏',
      'concentration_issues': '–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–µ–π',
      'social_difficulties': '–°–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ –æ–±—â–µ–Ω–∏–∏',
      'aggression': '–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å',
      'weak_immunity': '–°–ª–∞–±—ã–π –∏–º–º—É–Ω–∏—Ç–µ—Ç',
      'breathing_issues': '–ü—Ä–æ–±–ª–µ–º—ã —Å –¥—ã—Ö–∞–Ω–∏–µ–º',
      'prevention': '–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞'
    };
    
    return displayTexts[selection] || selection;
  }

  isAdmin(userId) {
    return config.ADMIN_ID && userId.toString() === config.ADMIN_ID.toString();
  }

  async notifyAdminAboutError(error, ctx) {
    if (!config.ADMIN_ID) return;
    
    try {
      const isChildFlow = this.surveyQuestions.isChildFlow(ctx?.session?.answers || {});
      const errorMessage = `üö® *–û—à–∏–±–∫–∞ –≤ –ª–∏–¥-–±–æ—Ç–µ v2.0:*\n\n` +
        `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${ctx?.from?.id}\n` +
        `üìù –¢–∏–ø: ${error.name}\n` +
        `üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}\n` +
        `üéØ –ü–æ—Ç–æ–∫: ${isChildFlow ? '–î–µ—Ç—Å–∫–∏–π' : '–í–∑—Ä–æ—Å–ª—ã–π'}\n` +
        `üïê –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}`;
      
      await this.bot.telegram.sendMessage(config.ADMIN_ID, errorMessage, {
        parse_mode: 'Markdown'
      });
    } catch (adminError) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', adminError);
    }
  }

  /**
   * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - –û–ë–ù–û–í–õ–ï–ù–ù–´–ï
   */
  async showStats(ctx) {
    try {
      const stats = await this.leadTransfer.getTransferStats('24h');
      
      const statsMessage = `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 24 —á–∞—Å–∞ (v2.0):*

üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*
‚Ä¢ –ù–∞—á–∞–ª–∏ –∞–Ω–∫–µ—Ç—É: ${stats?.started || 'N/A'}
‚Ä¢ –ó–∞–≤–µ—Ä—à–∏–ª–∏ –∞–Ω–∫–µ—Ç—É: ${stats?.completed || 'N/A'}
‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: ${stats?.conversion_rate || 'N/A'}%

üéØ *–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ª–∏–¥–æ–≤:*
‚Ä¢ üî• HOT: ${stats?.segments?.hot || 0}
‚Ä¢ ‚≠ê WARM: ${stats?.segments?.warm || 0}
‚Ä¢ ‚ùÑÔ∏è COLD: ${stats?.segments?.cold || 0}
‚Ä¢ üå± NURTURE: ${stats?.segments?.nurture || 0}

üë∂ *–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ –î–µ—Ç—Å–∫–∏–µ –∞–Ω–∫–µ—Ç—ã: ${stats?.child_surveys || 'N/A'}
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥": ${stats?.back_navigation || 'N/A'}

üîÑ *–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:*
‚Ä¢ –ü–µ—Ä–µ–¥–∞–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç: ${stats?.transferred || 'N/A'}
‚Ä¢ –û—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥–∞—á–∏: ${stats?.errors || 0}

‚è±Ô∏è *–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:*
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∞–Ω–∫–µ—Ç—ã: ${stats?.avg_duration || 'N/A'} –º–∏–Ω

üïê *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* ${new Date().toLocaleString('ru-RU')}`;

      await ctx.reply(statsMessage, { parse_mode: 'Markdown' });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
  }

  async showHealthStatus(ctx) {
    try {
      const healthStatus = await this.leadTransfer.healthCheck();
      
      const statusEmoji = {
        true: '‚úÖ',
        false: '‚ùå',
        'not_configured': '‚ö†Ô∏è'
      };
      
      const healthMessage = `üè• *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã v2.0:*

ü§ñ *–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç:* ${statusEmoji[healthStatus.mainBot]} ${healthStatus.mainBot ? '–î–æ—Å—Ç—É–ø–µ–Ω' : '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}

üìä *CRM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:* ${statusEmoji[healthStatus.crm]} ${
        healthStatus.crm === true ? '–†–∞–±–æ—Ç–∞–µ—Ç' : 
        healthStatus.crm === 'not_configured' ? '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ' : '–û—à–∏–±–∫–∞'
      }

üÜï *–ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç
‚Ä¢ –î–µ—Ç—Å–∫–∏–π –ø–æ—Ç–æ–∫: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω
‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: ‚úÖ –†–∞–±–æ—Ç–∞—é—Ç

üîß *–í–µ—Ä—Å–∏—è –±–æ—Ç–∞:* 2.0.0 (—Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π)
üìÖ *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:* ${this.getUptime()}
üíæ *–ü–∞–º—è—Ç—å:* ${this.getMemoryUsage()}

üïê *–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ:* ${new Date().toLocaleString('ru-RU')}`;

      await ctx.reply(healthMessage, { parse_mode: 'Markdown' });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã');
    }
  }

  getUptime() {
    const uptime = process.uptime();
    const hours = Math.floor(uptime / 3600);
    const minutes = Math.floor((uptime % 3600) / 60);
    return `${hours}—á ${minutes}–º`;
  }

  getMemoryUsage() {
    const used = process.memoryUsage();
    const mb = Math.round(used.heapUsed / 1024 / 1024);
    return `${mb} MB`;
  }

  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
   */
  launch() {
    console.log('ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º –ª–∏–¥–æ–≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–µ–≥–æ –±–æ—Ç–∞ v2.0...');
    console.log('‚ú® –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: –Ω–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥ + –¥–µ—Ç—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    this.validateConfiguration();
    
    this.bot.launch({
      webhook: process.env.NODE_ENV === 'production' ? {
        domain: config.APP_URL,
        port: config.PORT
      } : undefined
    });

    console.log('‚úÖ –ë–æ—Ç v2.0 –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üåê –†–µ–∂–∏–º: ${process.env.NODE_ENV || 'development'}`);
    console.log('üÜï –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:');
    console.log('   ‚Ä¢ –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥ (‚¨ÖÔ∏è –∫–Ω–æ–ø–∫–∞)');
    console.log('   ‚Ä¢ –î–µ—Ç—Å–∫–∞—è –≤–µ—Ä—Å–∏—è –∞–Ω–∫–µ—Ç—ã');
    console.log('   ‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É');
    console.log('   ‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞');
    
    // Graceful shutdown
    process.once('SIGINT', () => this.bot.stop('SIGINT'));
    process.once('SIGTERM', () => this.bot.stop('SIGTERM'));
  }

  validateConfiguration() {
    const requiredVars = ['LEAD_BOT_TOKEN'];
    const missing = requiredVars.filter(key => !process.env[key]);
    
    if (missing.length > 0) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
      missing.forEach(key => console.error(`   - ${key}`));
      process.exit(1);
    }
    
    console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞');
  }
}

// –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try {
  const leadBot = new BreathingLeadBot();
  leadBot.launch();
} catch (error) {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
  process.exit(1);
}
		
