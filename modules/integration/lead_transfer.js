// –§–∞–π–ª: lead_bot/modules/integration/lead_transfer.js
// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–µ–±—Ö—É–∫–æ–≤

const axios = require('axios');
const config = require('../../config');

class LeadTransferSystem {
  constructor() {
    this.retryAttempts = 3;
    this.retryDelay = 2000;
    this.mainBotWebhook = config.MAIN_BOT_WEBHOOK || '';
    this.crmWebhook = config.CRM_WEBHOOK || '';
    this.notificationBotWebhook = config.NOTIFICATION_BOT_WEBHOOK || '';
  }

  async processLead(userData) {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ª–∏–¥–∞:', userData.userInfo?.telegram_id);

    try {
      await this.transferToMainBot(userData);

      if (this.crmWebhook) {
        await this.transferToCRM(userData);
      } else {
        console.warn('‚ö†Ô∏è CRM webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É');
      }

      await this.notifyAnalyst(userData);
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏–¥–∞:', error.message);
      throw error;
    }
  }

  async transferToMainBot(userData) {
    if (!this.mainBotWebhook) {
      console.warn('‚ö†Ô∏è Main bot webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      throw new Error('Main bot webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    console.log(`üì§ –ü–µ—Ä–µ–¥–∞–µ–º –ª–∏–¥–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç: ${userData.userInfo?.telegram_id}`);
    console.log(`üîó Main bot webhook URL: ${this.mainBotWebhook}`);

    for (let attempt = 1; attempt <= this.retryAttempts; attempt++) {
      try {
        await axios.post(this.mainBotWebhook, userData);
        console.log('‚úÖ –õ–∏–¥ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç');
        return;
      } catch (error) {
        console.error(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${this.retryAttempts} –Ω–µ—É–¥–∞—á–Ω–∞:`, error.message);
        if (attempt === this.retryAttempts) {
          throw new Error(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç: ${error.message}`);
        }
        console.log(`–û–∂–∏–¥–∞–Ω–∏–µ ${this.retryDelay}ms –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...`);
        await new Promise(resolve => setTimeout(resolve, this.retryDelay));
      }
    }
  }

  async transferToCRM(userData) {
    console.log(`üì§ –ü–µ—Ä–µ–¥–∞–µ–º –ª–∏–¥–∞ –≤ CRM: ${userData.userInfo?.telegram_id}`);
    console.log(`üîó CRM webhook URL: ${this.crmWebhook}`);

    for (let attempt = 1; attempt <= this.retryAttempts; attempt++) {
      try {
        await axios.post(this.crmWebhook, userData);
        console.log('‚úÖ –õ–∏–¥ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω –≤ CRM');
        return;
      } catch (error) {
        console.error(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${this.retryAttempts} –Ω–µ—É–¥–∞—á–Ω–∞:`, error.message);
        if (attempt === this.retryAttempts) {
          throw new Error(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –≤ CRM: ${error.message}`);
        }
        console.log(`–û–∂–∏–¥–∞–Ω–∏–µ ${this.retryDelay}ms –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...`);
        await new Promise(resolve => setTimeout(resolve, this.retryDelay));
      }
    }
  }

  async notifyAnalyst(userData) {
    if (!this.notificationBotWebhook) {
      console.warn('‚ö†Ô∏è Notification bot webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      throw new Error('Notification bot webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    console.log('üì¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ê–Ω–∞—Å—Ç–∞—Å–∏–∏');
    console.log(`üîó Notification bot webhook URL: ${this.notificationBotWebhook}`);

    const notificationData = {
      telegram_id: userData.userInfo?.telegram_id,
      survey_type: userData.surveyType,
      segment: userData.analysisResult?.segment,
      primary_issue: userData.analysisResult?.primaryIssue
    };

    for (let attempt = 1; attempt <= this.retryAttempts; attempt++) {
      try {
        await axios.post(this.notificationBotWebhook, notificationData);
        console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
        return;
      } catch (error) {
        console.error(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${this.retryAttempts} –Ω–µ—É–¥–∞—á–Ω–∞:`, error.message);
        if (attempt === this.retryAttempts) {
          throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${error.message}`);
        }
        console.log(`–û–∂–∏–¥–∞–Ω–∏–µ ${this.retryDelay}ms –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...`);
        await new Promise(resolve => setTimeout(resolve, this.retryDelay));
      }
    }
  }
}

module.exports = LeadTransferSystem;
