// –§–∞–π–ª: lead_bot/modules/integration/lead_transfer.js
// –°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º –∏ CRM

const axios = require('axios');
const config = require('../../config');

class LeadTransferSystem {
  constructor() {
    this.mainBotApiUrl = config.MAIN_BOT_API_URL;
    this.crmWebhookUrl = config.CRM_WEBHOOK_URL;
    this.retryAttempts = 3;
    this.retryDelay = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã
  }

  /**
   * –ü–µ—Ä–µ–¥–∞—á–∞ –ª–∏–¥–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
   */
  async transferToMainBot(userData) {
    const payload = this.prepareMainBotPayload(userData);
    
    try {
      console.log('üì§ –ü–µ—Ä–µ–¥–∞–µ–º –ª–∏–¥–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç:', userData.telegram_id);
      
      const response = await this.makeRequest('POST', `${this.mainBotApiUrl}/api/leads/import`, payload);
      
      console.log('‚úÖ –õ–∏–¥ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç');
      return { success: true, data: response.data };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç:', error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –≤ CRM
   */
  async transferToCRM(userData) {
    if (!this.crmWebhookUrl) {
      console.log('‚ö†Ô∏è CRM webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É');
      return { success: true, skipped: true };
    }

    const payload = this.prepareCRMPayload(userData);
    
    try {
      console.log('üì§ –ü–µ—Ä–µ–¥–∞–µ–º –ª–∏–¥–∞ –≤ CRM:', userData.telegram_id);
      
      const response = await this.makeRequest('POST', this.crmWebhookUrl, payload);
      
      console.log('‚úÖ –õ–∏–¥ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω –≤ CRM');
      return { success: true, data: response.data };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –≤ CRM:', error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ê–Ω–∞—Å—Ç–∞—Å–∏–∏ –æ –Ω–æ–≤–æ–º –ª–∏–¥–µ
   */
  async notifyAnastasia(userData) {
    if (!config.ADMIN_ID) {
      console.log('‚ö†Ô∏è ADMIN_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
      return { success: true, skipped: true };
    }

    const message = this.prepareAdminNotification(userData);
    
    try {
      console.log('üì¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ê–Ω–∞—Å—Ç–∞—Å–∏–∏');
      
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Telegram API
      const response = await this.makeRequest('POST', `${this.mainBotApiUrl}/api/admin/notify`, {
        admin_id: config.ADMIN_ID,
        message: message,
        priority: this.getNotificationPriority(userData.analysisResult)
      });
      
      console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      return { success: true, data: response.data };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –ª–∏–¥–∞ –≤–æ –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã
   */
  async processLead(userData) {
    const results = {
      mainBot: null,
      crm: null,
      notification: null,
      timestamp: new Date().toISOString(),
      success: false
    };

    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ª–∏–¥–∞:', userData.telegram_id);

    // 1. –ü–µ—Ä–µ–¥–∞—á–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç (–∫—Ä–∏—Ç–∏—á–Ω–æ)
    results.mainBot = await this.transferToMainBot(userData);
    
    // 2. –ü–µ—Ä–µ–¥–∞—á–∞ –≤ CRM (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ)
    results.crm = await this.transferToCRM(userData);
    
    // 3. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ)
    results.notification = await this.notifyAnastasia(userData);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —É—Å–ø–µ—Ö
    results.success = results.mainBot.success;

    if (results.success) {
      console.log('‚úÖ –õ–∏–¥ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
    } else {
      console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏–¥–∞');
    }

    return results;
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
   */
  prepareMainBotPayload(userData) {
    const { userInfo, surveyAnswers, analysisResult, contactInfo } = userData;
    
    return {
      // –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      telegram_id: userInfo.telegram_id,
      username: userInfo.username,
      first_name: userInfo.first_name,
      last_name: userInfo.last_name,
      
      // –ò—Å—Ç–æ—á–Ω–∏–∫ –ª–∏–¥–∞
      source: 'lead_bot',
      source_channel: 'telegram_diagnostic_bot',
      
      // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∫–µ—Ç—ã
      survey_data: {
        answers: surveyAnswers,
        completed_at: new Date().toISOString(),
        session_duration: this.calculateSessionDuration(userData),
        questions_count: Object.keys(surveyAnswers).length
      },
      
      // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã VERSE-–∞–Ω–∞–ª–∏–∑–∞
      analysis: {
        segment: analysisResult.segment,
        primary_issue: analysisResult.primaryIssue,
        scores: analysisResult.scores,
        profile: analysisResult.profile,
        recommendations: analysisResult.recommendations
      },
      
      // –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
      personalization: {
        recommended_program: analysisResult.recommendations.main_program,
        urgent_techniques: analysisResult.recommendations.urgent_techniques,
        consultation_type: analysisResult.recommendations.consultation_type,
        support_materials: analysisResult.recommendations.support_materials,
        timeline: analysisResult.recommendations.timeline
      },
      
      // –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
      contact_info: contactInfo || null,
      
      // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      metadata: {
        lead_quality: analysisResult.segment,
        urgency_level: this.getUrgencyLevel(analysisResult.scores.urgency),
        expected_success_rate: analysisResult.profile.expectedSuccess,
        processing_timestamp: new Date().toISOString()
      }
    };
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è CRM
   */
  prepareCRMPayload(userData) {
    const { userInfo, analysisResult, contactInfo } = userData;
    
    return {
      // –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      contact: {
        name: `${userInfo.first_name} ${userInfo.last_name || ''}`.trim(),
        telegram: userInfo.username ? `@${userInfo.username}` : null,
        telegram_id: userInfo.telegram_id,
        phone: contactInfo?.phone || null,
        email: contactInfo?.email || null
      },
      
      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–¥–µ
      lead_info: {
        source: 'Telegram Diagnostic Bot',
        quality: analysisResult.segment,
        score: analysisResult.scores.total,
        primary_problem: this.translateIssueForCRM(analysisResult.primaryIssue),
        urgency: this.getUrgencyLevel(analysisResult.scores.urgency)
      },
      
      // –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
      recommendations: {
        main_program: analysisResult.recommendations.main_program,
        consultation_type: analysisResult.recommendations.consultation_type,
        estimated_value: this.estimateLeadValue(analysisResult)
      },
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      additional_data: {
        stress_level: userData.surveyAnswers.stress_level,
        sleep_quality: userData.surveyAnswers.sleep_quality,
        breathing_experience: userData.surveyAnswers.breathing_experience,
        time_commitment: userData.surveyAnswers.time_commitment,
        preferred_formats: userData.surveyAnswers.format_preferences
      },
      
      // –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ–ª—è
      created_at: new Date().toISOString(),
      source_details: {
        bot_version: '1.0',
        survey_version: 'extended_18q',
        analysis_engine: 'VERSE_3.0'
      }
    };
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
   */
  prepareAdminNotification(userData) {
    const { userInfo, analysisResult } = userData;
    const urgencyEmoji = this.getUrgencyEmoji(analysisResult.scores.urgency);
    const segmentEmoji = this.getSegmentEmoji(analysisResult.segment);
    
    return `${urgencyEmoji} *–ù–û–í–´–ô –õ–ò–î* ${segmentEmoji}

üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${userInfo.first_name} ${userInfo.last_name || ''}
üì± *Telegram:* ${userInfo.username ? '@' + userInfo.username : `ID: ${userInfo.telegram_id}`}

üìä *–ê–Ω–∞–ª–∏–∑:*
‚Ä¢ –°–µ–≥–º–µ–Ω—Ç: ${analysisResult.segment} (${analysisResult.scores.total} –±–∞–ª–ª–æ–≤)
‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞: ${this.translateIssueForCRM(analysisResult.primaryIssue)}
‚Ä¢ –°—Ç—Ä–µ—Å—Å: ${userData.surveyAnswers.stress_level}/10
‚Ä¢ –°–æ–Ω: ${userData.surveyAnswers.sleep_quality}/10

üéØ *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*
‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∞: ${analysisResult.recommendations.main_program}
‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: ${analysisResult.recommendations.consultation_type}
‚Ä¢ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${analysisResult.recommendations.timeline}

‚è∞ *–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:* ${new Date().toLocaleString('ru-RU')}

${this.getActionButtons(analysisResult.segment)}`;
  }

  /**
   * HTTP-–∑–∞–ø—Ä–æ—Å —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
   */
  async makeRequest(method, url, data, attempt = 1) {
    try {
      const config = {
        method,
        url,
        timeout: 30000, // 30 —Å–µ–∫—É–Ω–¥
        headers: {
          'Content-Type': 'application/json',
          'User-Agent': 'BreathingLeadBot/1.0'
        }
      };

      if (data) {
        config.data = data;
      }

      const response = await axios(config);
      return response;
      
    } catch (error) {
      console.error(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${this.retryAttempts} –Ω–µ—É–¥–∞—á–Ω–∞:`, error.message);
      
      if (attempt < this.retryAttempts) {
        console.log(`–û–∂–∏–¥–∞–Ω–∏–µ ${this.retryDelay}ms –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...`);
        await this.delay(this.retryDelay);
        return this.makeRequest(method, url, data, attempt + 1);
      }
      
      throw error;
    }
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
   */
  calculateSessionDuration(userData) {
    if (userData.startTime) {
      return Math.round((Date.now() - userData.startTime) / 1000); // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    }
    return null;
  }

  getUrgencyLevel(urgencyScore) {
    if (urgencyScore >= 80) return 'CRITICAL';
    if (urgencyScore >= 60) return 'HIGH';
    if (urgencyScore >= 40) return 'MEDIUM';
    return 'LOW';
  }

  getUrgencyEmoji(urgencyScore) {
    if (urgencyScore >= 80) return 'üÜò';
    if (urgencyScore >= 60) return 'üî•';
    if (urgencyScore >= 40) return '‚ö†Ô∏è';
    return 'üíö';
  }

  getSegmentEmoji(segment) {
    const emojis = {
      'HOT_LEAD': 'üî•',
      'WARM_LEAD': '‚≠ê',
      'COLD_LEAD': '‚ùÑÔ∏è',
      'NURTURE_LEAD': 'üå±'
    };
    return emojis[segment] || 'üìä';
  }

  getNotificationPriority(analysisResult) {
    const priorities = {
      'HOT_LEAD': 'HIGH',
      'WARM_LEAD': 'MEDIUM',
      'COLD_LEAD': 'LOW',
      'NURTURE_LEAD': 'LOW'
    };
    return priorities[analysisResult.segment] || 'MEDIUM';
  }

  translateIssueForCRM(issue) {
    const translations = {
      'panic_attacks': '–ü–∞–Ω–∏—á–µ—Å–∫–∏–µ –∞—Ç–∞–∫–∏',
      'chronic_stress': '–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç—Ä–µ—Å—Å',
      'anxiety': '–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å',
      'insomnia': '–ë–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞',
      'high_pressure': '–ü–æ–≤—ã—à–µ–Ω–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ',
      'breathing_issues': '–ü—Ä–æ–±–ª–µ–º—ã —Å –¥—ã—Ö–∞–Ω–∏–µ–º',
      'fatigue': '–•—Ä–æ–Ω–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–ª–æ—Å—Ç—å',
      'concentration_issues': '–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–µ–π',
      'general_wellness': '–û–±—â–µ–µ –æ–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–µ'
    };
    return translations[issue] || issue;
  }

  estimateLeadValue(analysisResult) {
    // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ª–∏–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ–≥–º–µ–Ω—Ç–∞ –∏ –ø—Ä–æ–±–ª–µ–º—ã
    const baseValues = {
      'HOT_LEAD': 15000,    // –≤—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ –¥–æ—Ä–æ–≥–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
      'WARM_LEAD': 8000,    // —Å—Ä–µ–¥–Ω—è—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
      'COLD_LEAD': 3000,    // –±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
      'NURTURE_LEAD': 1000  // –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –ø–æ–¥–æ–≥—Ä–µ–≤
    };

    const problemMultipliers = {
      'panic_attacks': 1.5,     // –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞, –≥–æ—Ç–æ–≤—ã –ø–ª–∞—Ç–∏—Ç—å –±–æ–ª—å—à–µ
      'chronic_stress': 1.2,    // –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞
      'anxiety': 1.3,           // –≤—ã—Å–æ–∫–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è
      'insomnia': 1.1,          // —Ö–æ—Ä–æ—à–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è
      'general_wellness': 0.8   // –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞, –º–µ–Ω—å—à–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–∏—Ç—å
    };

    const baseValue = baseValues[analysisResult.segment] || 5000;
    const multiplier = problemMultipliers[analysisResult.primaryIssue] || 1.0;
    
    return Math.round(baseValue * multiplier);
  }

  getActionButtons(segment) {
    if (segment === 'HOT_LEAD') {
      return 'üö® *–ü–†–ò–û–†–ò–¢–ï–¢:* –°–≤—è–∑–∞—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤!';
    } else if (segment === 'WARM_LEAD') {
      return '‚è∞ *–î–ï–ô–°–¢–í–ò–ï:* –°–≤—è–∑–∞—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤';
    } else {
      return 'üìÖ *–ü–õ–ê–ù:* –î–æ–±–∞–≤–∏—Ç—å –≤ –ø–ª–∞–Ω –æ–±–∑–≤–æ–Ω–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é';
    }
  }

  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä–µ–¥–∞—á
   */
  async getTransferStats(period = '24h') {
    try {
      const response = await this.makeRequest('GET', `${this.mainBotApiUrl}/api/leads/stats?period=${period}`);
      return response.data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
      return null;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
   */
  async healthCheck() {
    const results = {
      mainBot: false,
      crm: false,
      timestamp: new Date().toISOString()
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
    try {
      await this.makeRequest('GET', `${this.mainBotApiUrl}/api/health`);
      results.mainBot = true;
    } catch (error) {
      console.error('–û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ CRM
    if (this.crmWebhookUrl) {
      try {
        await this.makeRequest('POST', this.crmWebhookUrl, { test: true });
        results.crm = true;
      } catch (error) {
        console.error('CRM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
      }
    } else {
      results.crm = 'not_configured';
    }

    return results;
  }
}

module.exports = LeadTransferSystem;
