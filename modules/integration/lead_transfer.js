// –§–∞–π–ª: modules/integration/lead_transfer.js
// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø - —Ä–∞–±–æ—Ç–∞ –±–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞

const axios = require('axios');
const config = require('../../config');

class LeadTransferSystem {
  constructor() {
    this.retryAttempts = 3;
    this.retryDelay = 2000;
    
    this.mainBotWebhook = config.MAIN_BOT_API_URL;
    this.crmWebhook = config.CRM_WEBHOOK_URL;
    this.trainerContact = config.TRAINER_CONTACT;
    
    this.enableRetries = true;
    this.enableLogging = config.NODE_ENV !== 'production';
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–µ–∂–∏–º –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    this.standaloneMode = !this.mainBotWebhook;
    
    if (this.standaloneMode) {
      console.log('üîÑ LeadTransferSystem: –†–µ–∂–∏–º –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã (–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ)');
    }
  }

  async processLead(userData) {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ª–∏–¥–∞:', userData.userInfo?.telegram_id);

    try {
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
      if (this.standaloneMode) {
        console.log('üíæ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–¥ –ª–æ–∫–∞–ª—å–Ω–æ');
        return await this.saveLeadLocally(userData);
      }

      // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç - –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–¥–∞—Ç—å
      await this.transferToMainBot(userData);

      // CRM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞)
      if (config.FEATURES?.enable_crm_integration && this.crmWebhook) {
        await this.transferToCRM(userData);
      } else {
        console.log('‚ö†Ô∏è CRM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
      }

      await this.logLeadSuccess(userData);
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏–¥–∞:', error.message);
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–¥ –ª–æ–∫–∞–ª—å–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥–∞—á–∏');
      await this.saveLeadLocally(userData);
      await this.logLeadError(userData, error);
    }
  }

  async transferToMainBot(userData) {
    if (!this.mainBotWebhook) {
      console.log('‚ö†Ô∏è Main bot webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ');
      return this.saveLeadLocally(userData);
    }

    const webhookUrl = `${this.mainBotWebhook}/api/leads/import`;
    console.log(`üì§ –ü–µ—Ä–µ–¥–∞–µ–º –ª–∏–¥–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç: ${userData.userInfo?.telegram_id}`);

    const payload = {
      timestamp: new Date().toISOString(),
      source: 'lead_bot',
      data: userData
    };

    for (let attempt = 1; attempt <= this.retryAttempts; attempt++) {
      try {
        const response = await axios.post(webhookUrl, payload, {
          timeout: 10000,
          headers: {
            'Content-Type': 'application/json',
            'User-Agent': 'BreathingLeadBot/2.4',
            'X-Source': 'lead-bot'
          }
        });

        if (response.status >= 200 && response.status < 300) {
          console.log('‚úÖ –õ–∏–¥ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç');
          return response.data;
        } else {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
      } catch (error) {
        console.error(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${this.retryAttempts} –Ω–µ—É–¥–∞—á–Ω–∞:`, error.message);
        
        if (attempt === this.retryAttempts) {
          console.error('üí• –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –∏—Å—á–µ—Ä–ø–∞–Ω—ã');
          // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
          return this.saveLeadLocally(userData);
        }
        
        if (this.enableRetries) {
          console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${this.retryDelay}ms –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...`);
          await new Promise(resolve => setTimeout(resolve, this.retryDelay));
        }
      }
    }
  }

  async transferToCRM(userData) {
    if (!this.crmWebhook) {
      console.log('‚ö†Ô∏è CRM webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return;
    }

    console.log(`üì§ –ü–µ—Ä–µ–¥–∞–µ–º –ª–∏–¥–∞ –≤ CRM: ${userData.userInfo?.telegram_id}`);

    const crmPayload = {
      contact: {
        name: userData.userInfo?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram',
        telegram_id: userData.userInfo?.telegram_id,
        username: userData.userInfo?.username || '',
        source: 'Telegram Diagnostic Bot'
      },
      lead_info: {
        survey_type: userData.surveyType || 'adult',
        quality: userData.analysisResult?.segment || 'UNKNOWN',
        score: userData.analysisResult?.scores?.total || 0,
        primary_issue: userData.analysisResult?.primaryIssue || 'general_wellness',
        timestamp: new Date().toISOString()
      },
      survey_data: userData.surveyAnswers || {},
      analysis: userData.analysisResult || {}
    };

    for (let attempt = 1; attempt <= this.retryAttempts; attempt++) {
      try {
        const response = await axios.post(this.crmWebhook, crmPayload, {
          timeout: 15000,
          headers: {
            'Content-Type': 'application/json',
            'User-Agent': 'BreathingLeadBot/2.4',
            'X-Source': 'telegram-lead-bot'
          }
        });

        if (response.status >= 200 && response.status < 300) {
          console.log('‚úÖ –õ–∏–¥ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω –≤ CRM');
          return response.data;
        } else {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
      } catch (error) {
        console.error(`‚ùå CRM –ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${this.retryAttempts} –Ω–µ—É–¥–∞—á–Ω–∞:`, error.message);
        
        if (attempt === this.retryAttempts) {
          console.error('üí• –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–¥–∞—á–∏ –≤ CRM –∏—Å—á–µ—Ä–ø–∞–Ω—ã');
          // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        } else if (this.enableRetries) {
          console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${this.retryDelay}ms –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...`);
          await new Promise(resolve => setTimeout(resolve, this.retryDelay));
        }
      }
    }
  }

  async saveLeadLocally(userData) {
    try {
      const leadData = {
        timestamp: new Date().toISOString(),
        telegram_id: userData.userInfo?.telegram_id,
        survey_type: userData.surveyType,
        segment: userData.analysisResult?.segment,
        score: userData.analysisResult?.scores?.total,
        primary_issue: userData.analysisResult?.primaryIssue,
        answers: userData.surveyAnswers,
        trainer_contact: this.trainerContact,
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        user_info: userData.userInfo,
        analysis_result: userData.analysisResult,
        saved_locally: true,
        processing_mode: this.standaloneMode ? 'standalone' : 'fallback'
      };

      console.log('üíæ –õ–û–ö–ê–õ–¨–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï –õ–ò–î–ê:', JSON.stringify({
        telegram_id: leadData.telegram_id,
        segment: leadData.segment,
        score: leadData.score,
        timestamp: leadData.timestamp,
        mode: leadData.processing_mode
      }, null, 2));
      
      return { 
        success: true, 
        stored_locally: true, 
        data: leadData,
        mode: this.standaloneMode ? 'standalone' : 'fallback'
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      return { success: false, error: error.message };
    }
  }

  async logLeadSuccess(userData) {
    if (!this.enableLogging) return;

    const logData = {
      event: 'lead_processed_successfully',
      timestamp: new Date().toISOString(),
      telegram_id: userData.userInfo?.telegram_id,
      survey_type: userData.surveyType,
      segment: userData.analysisResult?.segment,
      processing_time: Date.now() - (userData.startTime || Date.now()),
      mode: this.standaloneMode ? 'standalone' : 'integrated'
    };

    console.log('‚úÖ –£–°–ü–ï–®–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –õ–ò–î–ê:', JSON.stringify(logData, null, 2));
  }

  async logLeadError(userData, error) {
    const errorData = {
      event: 'lead_processing_error',
      timestamp: new Date().toISOString(),
      telegram_id: userData.userInfo?.telegram_id,
      error_message: error.message,
      error_stack: error.stack,
      userData_summary: {
        survey_type: userData.surveyType,
        has_answers: !!userData.surveyAnswers,
        has_analysis: !!userData.analysisResult
      },
      fallback_used: true
    };

    console.error('üí• –û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –õ–ò–î–ê:', JSON.stringify(errorData, null, 2));
  }

  async testConnections() {
    const results = {
      main_bot: { status: 'not_configured', url: this.mainBotWebhook },
      crm: { status: 'not_configured', url: this.crmWebhook },
      standalone_mode: this.standaloneMode,
      timestamp: new Date().toISOString()
    };

    if (this.mainBotWebhook) {
      try {
        const response = await axios.get(`${this.mainBotWebhook}/api/health`, { 
          timeout: 5000,
          validateStatus: () => true // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        });
        
        results.main_bot.status = response.status === 200 ? 'connected' : 'error';
        results.main_bot.response_time = response.headers['x-response-time'] || 'unknown';
        results.main_bot.http_status = response.status;
      } catch (error) {
        results.main_bot.status = 'error';
        results.main_bot.error = error.message;
      }
    }

    if (this.crmWebhook) {
      try {
        const testPayload = { test: true, timestamp: Date.now() };
        const response = await axios.post(this.crmWebhook, testPayload, { 
          timeout: 5000,
          validateStatus: () => true
        });
        results.crm.status = response.status >= 200 && response.status < 300 ? 'connected' : 'error';
        results.crm.http_status = response.status;
      } catch (error) {
        results.crm.status = 'error';
        results.crm.error = error.message;
      }
    }

    return results;
  }

  getStats() {
    return {
      configuration: {
        main_bot_configured: !!this.mainBotWebhook,
        crm_configured: !!this.crmWebhook,
        trainer_contact: this.trainerContact,
        retries_enabled: this.enableRetries,
        retry_attempts: this.retryAttempts,
        retry_delay: this.retryDelay,
        standalone_mode: this.standaloneMode // –ò–°–ü–†–ê–í–õ–ï–ù–û
      },
      endpoints: {
        main_bot: this.mainBotWebhook ? `${this.mainBotWebhook}/api/leads/import` : null,
        crm: this.crmWebhook,
        trainer: this.trainerContact
      },
      version: '2.4.1', // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏—é
      last_updated: new Date().toISOString()
    };
  }
}

module.exports = LeadTransferSystem;
