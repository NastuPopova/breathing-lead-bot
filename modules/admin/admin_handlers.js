// –§–∞–π–ª: modules/admin/admin_handlers.js - –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥ (–æ—Ç–¥–µ–ª–µ–Ω—ã –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ handlers.js)

const config = require('../../config');

class AdminHandlers {
  constructor(bot, adminNotifications, verseAnalysis, leadTransfer, pdfManager) {
    this.bot = bot; // –≠—Ç–æ —ç–∫–∑–µ–º–ø–ª—è—Ä BreathingLeadBot
    this.telegramBot = bot.bot; // –≠—Ç–æ —ç–∫–∑–µ–º–ø–ª—è—Ä Telegraf
    this.adminNotifications = adminNotifications;
    this.verseAnalysis = verseAnalysis;
    this.leadTransfer = leadTransfer;
    this.pdfManager = pdfManager;
    this.adminId = config.ADMIN_ID;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥
    this.commandStats = {
      totalCommands: 0,
      commandsUsed: {},
      lastCommand: null,
      errors: 0
    };
  }

  // ===== –ù–ê–°–¢–†–û–ô–ö–ê –ö–û–ú–ê–ù–î =====

  setupCommands() {
    if (!this.adminId) {
      console.log('‚ö†Ô∏è ADMIN_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã');
      return;
    }

    console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥...');

    // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    this.telegramBot.command('admin', this.checkAdmin(this.handleMainCommand.bind(this)));
    this.telegramBot.command('stats', this.checkAdmin(this.handleStatsCommand.bind(this)));
    this.telegramBot.command('analytics', this.checkAdmin(this.handleAnalyticsCommand.bind(this)));
    this.telegramBot.command('hot_leads', this.checkAdmin(this.handleHotLeadsCommand.bind(this)));
    this.telegramBot.command('today_leads', this.checkAdmin(this.handleTodayLeadsCommand.bind(this)));
    this.telegramBot.command('search_lead', this.checkAdmin(this.handleSearchLeadCommand.bind(this)));
    this.telegramBot.command('health', this.checkAdmin(this.handleHealthCommand.bind(this)));
    this.telegramBot.command('export_leads', this.checkAdmin(this.handleExportLeadsCommand.bind(this)));
    this.telegramBot.command('settings', this.checkAdmin(this.handleSettingsCommand.bind(this)));

    console.log('‚úÖ –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }

  checkAdmin(handler) {
    return async (ctx) => {
      if (ctx.from.id.toString() !== this.adminId) {
        await ctx.reply('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        return;
      }
      
      this.trackCommandUsage(ctx.message.text);
      return handler(ctx);
    };
  }

  trackCommandUsage(command) {
    this.commandStats.totalCommands++;
    this.commandStats.lastCommand = {
      command: command,
      timestamp: new Date().toISOString()
    };
    
    if (!this.commandStats.commandsUsed[command]) {
      this.commandStats.commandsUsed[command] = 0;
    }
    this.commandStats.commandsUsed[command]++;
  }

  // ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =====

  async handleMainCommand(ctx) {
    console.log(`üéõÔ∏è –ö–æ–º–∞–Ω–¥–∞ /admin –æ—Ç –∞–¥–º–∏–Ω–∞ ${ctx.from.id}`);
    
    try {
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
      const stats = this.adminNotifications?.getStats?.() || this.getDefaultStats();
      const uptime = Math.round(process.uptime() / 3600);

      let message = `üéõÔ∏è *–ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–ê–Ø –ü–ê–ù–ï–õ–¨*\n\n`;
      message += `üë®‚Äçüíº –ê–¥–º–∏–Ω: ${ctx.from.first_name}\n`;
      message += `‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${uptime}—á\n`;
      message += `üìä –õ–∏–¥–æ–≤ —Å–µ–≥–æ–¥–Ω—è: ${stats.daily_stats?.totalLeads || 0}\n`;
      message += `üî• –ì–æ—Ä—è—á–∏—Ö: ${stats.daily_stats?.hotLeads || 0}\n\n`;
      
      message += `üïê *–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*\n`;
      message += `‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ª–∏–¥: ${this.getLastLeadTime()}\n`;
      message += `‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏: ${this.formatTime(this.commandStats.lastCommand?.timestamp)}\n\n`;
      
      message += `‚ö° *–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*`;

      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üî• –ì–æ—Ä—è—á–∏–µ –ª–∏–¥—ã', callback_data: 'admin_hot_leads' },
            { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' }
          ],
          [
            { text: 'üìã –í—Å–µ –ª–∏–¥—ã —Å–µ–≥–æ–¥–Ω—è', callback_data: 'admin_today_leads' },
            { text: 'üîç –ü–æ–∏—Å–∫ –ª–∏–¥–∞', callback_data: 'admin_search' }
          ],
          [
            { text: 'üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞', callback_data: 'admin_analytics' },
            { text: 'üîß –°–∏—Å—Ç–µ–º–∞', callback_data: 'admin_system' }
          ],
          [
            { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'admin_settings' },
            { text: 'üì§ –≠–∫—Å–ø–æ—Ä—Ç', callback_data: 'admin_export' }
          ],
          [
            { text: 'üÜò –ü–æ–º–æ—â—å', callback_data: 'admin_help' },
            { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_refresh' }
          ]
        ]
      };

      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handleMainCommand:', error);
      this.commandStats.errors++;
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏');
    }
  }

  async handleStatsCommand(ctx) {
    console.log(`üìä –ö–æ–º–∞–Ω–¥–∞ /stats –æ—Ç –∞–¥–º–∏–Ω–∞ ${ctx.from.id}`);
    
    try {
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å fallback
      const adminStats = this.adminNotifications?.getStats?.() || this.getDefaultStats();
      const botStats = this.bot?.middleware?.getStats?.() || this.getDefaultBotStats();
      
      let message = `üìä *–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê*\n\n`;
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–∏–¥–æ–≤
      message += `üë• *–õ–ò–î–´:*\n`;
      message += `‚Ä¢ –í—Å–µ–≥–æ —Å–µ–≥–æ–¥–Ω—è: ${adminStats.daily_stats?.totalLeads || 0}\n`;
      message += `‚Ä¢ üî• –ì–æ—Ä—è—á–∏–µ: ${adminStats.daily_stats?.hotLeads || 0}\n`;
      message += `‚Ä¢ ‚≠ê –¢–µ–ø–ª—ã–µ: ${adminStats.daily_stats?.warmLeads || 0}\n`;
      message += `‚Ä¢ ‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω—ã–µ: ${adminStats.daily_stats?.coldLeads || 0}\n`;
      message += `‚Ä¢ üå± –î–ª—è –≤–∑—Ä–∞—â–∏–≤–∞–Ω–∏—è: ${adminStats.daily_stats?.nurtureLeads || 0}\n\n`;
      
      // –ö–æ–Ω–≤–µ—Ä—Å–∏—è
      const totalLeads = adminStats.daily_stats?.totalLeads || 0;
      const hotLeads = adminStats.daily_stats?.hotLeads || 0;
      const conversionRate = totalLeads > 0 ? ((hotLeads / totalLeads) * 100).toFixed(1) : 0;
      message += `üìà *–ö–û–ù–í–ï–†–°–ò–Ø:*\n`;
      message += `‚Ä¢ –í –≥–æ—Ä—è—á–∏–µ –ª–∏–¥—ã: ${conversionRate}%\n`;
      message += `‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª VERSE: ${this.getAverageScore()}/100\n\n`;
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
      message += `ü§ñ *–ë–û–¢:*\n`;
      message += `‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${botStats.requests?.unique_users || 0}\n`;
      message += `‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${botStats.requests?.total || 0}\n`;
      message += `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: ${botStats.sessions?.created || 0}\n`;
      message += `‚Ä¢ –û—à–∏–±–æ–∫: ${botStats.errors?.handled || 0}\n\n`;
      
      // –°–∏—Å—Ç–µ–º–∞
      message += `‚è±Ô∏è *–°–ò–°–¢–ï–ú–ê:*\n`;
      message += `‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${this.formatUptime(process.uptime())}\n`;
      message += `‚Ä¢ –ü–∞–º—è—Ç—å: ${this.getMemoryUsage()}MB\n`;
      message += `‚Ä¢ –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥: ${this.commandStats.totalCommands}\n`;
      message += `‚Ä¢ –°—Ç–∞—Ç—É—Å: –†–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ\n`;

      const keyboard = {
        inline_keyboard: [
          [{ text: 'üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞', callback_data: 'admin_analytics' }],
          [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
        ]
      };

      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handleStatsCommand:', error);
      this.commandStats.errors++;
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
  }

  async handleAnalyticsCommand(ctx) {
    console.log(`üìà –ö–æ–º–∞–Ω–¥–∞ /analytics –æ—Ç –∞–¥–º–∏–Ω–∞ ${ctx.from.id}`);
    
    try {
      const leadsData = this.adminNotifications.leadDataStorage || {};
      const analysis = this.analyzeLeadsData(leadsData);

      let message = `üìà *–ê–ù–ê–õ–ò–¢–ò–ö–ê –õ–ò–î–û–í*\n\n`;
      
      // –¢–æ–ø –ø—Ä–æ–±–ª–µ–º—ã
      message += `üéØ *–¢–û–ü-5 –ü–†–û–ë–õ–ï–ú:*\n`;
      if (analysis.topIssues.length > 0) {
        analysis.topIssues.forEach((issue, index) => {
          message += `${index + 1}. ${this.translateIssue(issue.key)}: ${issue.count}\n`;
        });
      } else {
        message += `–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö\n`;
      }
      message += `\n`;
      
      // –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã
      message += `üë• *–í–û–ó–†–ê–°–¢–ù–´–ï –ì–†–£–ü–ü–´:*\n`;
      if (Object.keys(analysis.ageGroups).length > 0) {
        Object.entries(analysis.ageGroups).forEach(([age, count]) => {
          const percentage = ((count / analysis.totalLeads) * 100).toFixed(1);
          message += `‚Ä¢ ${this.translateAge(age)}: ${count} (${percentage}%)\n`;
        });
      } else {
        message += `–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö\n`;
      }
      message += `\n`;
      
      // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
      message += `üìä *–û–°–ù–û–í–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:*\n`;
      message += `‚Ä¢ –í—Å–µ–≥–æ –ª–∏–¥–æ–≤: ${analysis.totalLeads}\n`;
      message += `‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: ${analysis.averageScore.toFixed(1)}\n`;
      if (analysis.topIssues.length > 0) {
        message += `‚Ä¢ –ì–ª–∞–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞: ${this.translateIssue(analysis.topIssues[0]?.key)}\n`;
      }

      const keyboard = {
        inline_keyboard: [
          [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' }],
          [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
        ]
      };

      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handleAnalyticsCommand:', error);
      this.commandStats.errors++;
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏');
    }
  }

  async handleHotLeadsCommand(ctx) {
    console.log(`üî• –ö–æ–º–∞–Ω–¥–∞ /hot_leads –æ—Ç –∞–¥–º–∏–Ω–∞ ${ctx.from.id}`);
    
    try {
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ leadDataStorage
      if (!this.adminNotifications.leadDataStorage) {
        console.warn('‚ö†Ô∏è leadDataStorage –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
        this.adminNotifications.leadDataStorage = {};
      }

      const leads = Object.values(this.adminNotifications.leadDataStorage || {})
        .filter(lead => lead.analysisResult?.segment === 'HOT_LEAD')
        .sort((a, b) => new Date(b.timestamp || 0) - new Date(a.timestamp || 0))
        .slice(0, 10);

      if (!leads.length) {
        await ctx.reply('‚úÖ –ù–µ—Ç –≥–æ—Ä—è—á–∏—Ö –ª–∏–¥–æ–≤', {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_hot_leads' }],
              [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
            ]
          }
        });
        return;
      }

      let message = `üî• *–ì–û–†–Ø–ß–ò–ï –õ–ò–î–´ (${leads.length})*\n\n`;
      
      leads.forEach((lead, index) => {
        const user = lead.userInfo;
        const score = lead.analysisResult?.scores?.total || 0;
        const timeAgo = this.getTimeAgo(lead.timestamp);
        
        message += `${index + 1}. **${user?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}**\n`;
        message += `   üÜî ID: \`${user?.telegram_id}\`\n`;
        message += `   üìä –ë–∞–ª–ª: ${score}/100\n`;
        message += `   ‚è∞ ${timeAgo}\n`;
        message += `   üéØ ${this.translateIssue(lead.analysisResult?.primaryIssue)}\n\n`;
      });

      const keyboard = {
        inline_keyboard: [
          [{ text: 'üìû –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ—Ö', callback_data: 'admin_process_all_hot' }],
          [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_hot_leads' }],
          [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
        ]
      };

      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handleHotLeadsCommand:', error);
      this.commandStats.errors++;
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä—è—á–∏—Ö –ª–∏–¥–æ–≤');
    }
  }

  async handleTodayLeadsCommand(ctx) {
    console.log(`üìã –ö–æ–º–∞–Ω–¥–∞ /today_leads –æ—Ç –∞–¥–º–∏–Ω–∞ ${ctx.from.id}`);
    
    try {
      const today = new Date().toDateString();
      const leads = Object.values(this.adminNotifications.leadDataStorage || {})
        .filter(lead => {
          const leadDate = lead.timestamp ? new Date(lead.timestamp).toDateString() : null;
          return leadDate === today;
        })
        .sort((a, b) => new Date(b.timestamp || 0) - new Date(a.timestamp || 0));

      if (!leads.length) {
        await ctx.reply('üìã *–õ–ò–î–´ –°–ï–ì–û–î–ù–Ø*\n\n‚úÖ –°–µ–≥–æ–¥–Ω—è –ª–∏–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç', {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_today_leads' }],
              [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
            ]
          }
        });
        return;
      }

      let message = `üìã *–õ–ò–î–´ –°–ï–ì–û–î–ù–Ø (${leads.length})*\n\n`;
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
      const bySegment = leads.reduce((acc, lead) => {
        const segment = lead.analysisResult?.segment || 'UNKNOWN';
        if (!acc[segment]) acc[segment] = [];
        acc[segment].push(lead);
        return acc;
      }, {});

      Object.entries(bySegment).forEach(([segment, segmentLeads]) => {
        const emoji = this.getSegmentEmoji(segment);
        message += `${emoji} **${segment}** (${segmentLeads.length}):\n`;
        
        segmentLeads.slice(0, 3).forEach(lead => {
          const user = lead.userInfo;
          const time = new Date(lead.timestamp).toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit'
          });
          message += `   ‚Ä¢ ${user?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (${time})\n`;
        });
        
        if (segmentLeads.length > 3) {
          message += `   ‚Ä¢ ... –∏ –µ—â–µ ${segmentLeads.length - 3}\n`;
        }
        message += `\n`;
      });

      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üî• –¢–æ–ª—å–∫–æ –≥–æ—Ä—è—á–∏–µ', callback_data: 'admin_hot_leads' },
            { text: 'üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–Ω—è', callback_data: 'admin_day_analytics' }
          ],
          [
            { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_today_leads' },
            { text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }
          ]
        ]
      };

      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handleTodayLeadsCommand:', error);
      this.commandStats.errors++;
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏–¥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è');
    }
  }

  async handleSearchLeadCommand(ctx) {
    console.log(`üîç –ö–æ–º–∞–Ω–¥–∞ /search_lead –æ—Ç –∞–¥–º–∏–Ω–∞ ${ctx.from.id}`);
    
    const searchTerm = ctx.message.text.split(' ').slice(1).join(' ');
    
    if (!searchTerm) {
      await ctx.reply(
        `üîç *–ü–û–ò–°–ö –õ–ò–î–û–í*\n\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: \`/search_lead <–∑–∞–ø—Ä–æ—Å>\`\n\n` +
        `–ú–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å –ø–æ:\n` +
        `‚Ä¢ Telegram ID\n` +
        `‚Ä¢ –ò–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n` +
        `‚Ä¢ Username (–±–µ–∑ @)\n` +
        `‚Ä¢ –ü—Ä–æ–±–ª–µ–º–µ\n` +
        `‚Ä¢ –°–µ–≥–º–µ–Ω—Ç—É\n\n` +
        `–ü—Ä–∏–º–µ—Ä—ã:\n` +
        `\`/search_lead 123456789\`\n` +
        `\`/search_lead –ê–Ω–Ω–∞\`\n` +
        `\`/search_lead —Å—Ç—Ä–µ—Å—Å\`\n` +
        `\`/search_lead HOT_LEAD\``,
        { parse_mode: 'Markdown' }
      );
      return;
    }

    try {
      const results = this.performLeadSearch(searchTerm);
      
      if (!results.length) {
        await ctx.reply(
          `‚ùå *–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ*\n\n–ü–æ –∑–∞–ø—Ä–æ—Å—É "${searchTerm}" –ª–∏–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`,
          {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
              ]
            }
          }
        );
        return;
      }

      let message = `üîç *–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê*\n`;
      message += `–ó–∞–ø—Ä–æ—Å: "${searchTerm}"\n`;
      message += `–ù–∞–π–¥–µ–Ω–æ: ${results.length}\n\n`;

      results.slice(0, 5).forEach((lead, index) => {
        const user = lead.userInfo;
        const segment = lead.analysisResult?.segment || 'UNKNOWN';
        const timeAgo = this.getTimeAgo(lead.timestamp);
        
        message += `${index + 1}. **${user?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}**\n`;
        message += `   üÜî ID: \`${user?.telegram_id}\`\n`;
        message += `   üìä –°–µ–≥–º–µ–Ω—Ç: ${this.getSegmentEmoji(segment)} ${segment}\n`;
        message += `   ‚è∞ ${timeAgo}\n\n`;
      });

      if (results.length > 5) {
        message += `... –∏ –µ—â–µ ${results.length - 5} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n\n`;
      }

      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
          ]
        }
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handleSearchLeadCommand:', error);
      this.commandStats.errors++;
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ª–∏–¥–æ–≤');
    }
  }

  async handleHealthCommand(ctx) {
    console.log(`üîß –ö–æ–º–∞–Ω–¥–∞ /health –æ—Ç –∞–¥–º–∏–Ω–∞ ${ctx.from.id}`);
    
    try {
      const health = await this.getSystemHealthData();
      
      let message = `üîß *–°–û–°–¢–û–Ø–ù–ò–ï –°–ò–°–¢–ï–ú–´*\n\n`;
      
      // –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
      const statusEmoji = health.overall === 'HEALTHY' ? '‚úÖ' : health.overall === 'DEGRADED' ? '‚ö†Ô∏è' : '‚ùå';
      message += `${statusEmoji} **–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:** ${health.overall}\n\n`;
      
      // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
      message += `ü§ñ *–ö–û–ú–ü–û–ù–ï–ù–¢–´:*\n`;
      Object.entries(health.components).forEach(([component, data]) => {
        const emoji = data.status === 'HEALTHY' ? '‚úÖ' : data.status === 'DEGRADED' ? '‚ö†Ô∏è' : '‚ùå';
        message += `${emoji} ${component}: ${data.status}\n`;
      });
      message += `\n`;
      
      // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
      message += `üìä *–ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:*\n`;
      message += `‚Ä¢ –ü–∞–º—è—Ç—å: ${health.performance.memory}MB\n`;
      message += `‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${this.formatUptime(health.performance.uptime)}\n\n`;
      
      // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
      message += `üîó *–ò–ù–¢–ï–ì–†–ê–¶–ò–ò:*\n`;
      message += `‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç: ${health.integrations.mainBot ? '‚úÖ' : '‚ùå'}\n`;
      message += `‚Ä¢ CRM: ${health.integrations.crm ? '‚úÖ' : '‚ùå'}\n`;

      const keyboard = {
        inline_keyboard: [
          [{ text: 'üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', callback_data: 'admin_detailed_diagnostics' }],
          [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
        ]
      };

      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handleHealthCommand:', error);
      this.commandStats.errors++;
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ');
    }
  }

  async handleExportLeadsCommand(ctx) {
    console.log(`üì§ –ö–æ–º–∞–Ω–¥–∞ /export_leads –æ—Ç –∞–¥–º–∏–Ω–∞ ${ctx.from.id}`);
    
    try {
      const leads = Object.values(this.adminNotifications.leadDataStorage || {});
      
      if (!leads.length) {
        await ctx.reply('üìã –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
        return;
      }

      const exportData = this.prepareLeadsForExport(leads);
      const jsonString = JSON.stringify(exportData, null, 2);
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π "—Ñ–∞–π–ª" –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
      let message = `üì§ *–≠–ö–°–ü–û–†–¢ –õ–ò–î–û–í*\n\n`;
      message += `‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${leads.length}\n`;
      message += `‚Ä¢ –î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}\n`;
      message += `‚Ä¢ –í—Ä–µ–º—è: ${new Date().toLocaleTimeString('ru-RU')}\n\n`;
      message += `üìä **–ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n`;
      
      const segmentCounts = leads.reduce((acc, lead) => {
        const segment = lead.analysisResult?.segment || 'UNKNOWN';
        acc[segment] = (acc[segment] || 0) + 1;
        return acc;
      }, {});

      Object.entries(segmentCounts).forEach(([segment, count]) => {
        const emoji = this.getSegmentEmoji(segment);
        message += `${emoji} ${segment}: ${count}\n`;
      });

      message += `\nüíæ –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –∫ —ç–∫—Å–ø–æ—Ä—Ç—É –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ`;

      const keyboard = {
        inline_keyboard: [
          [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
        ]
      };

      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handleExportLeadsCommand:', error);
      this.commandStats.errors++;
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ª–∏–¥–æ–≤');
    }
  }

  async handleSettingsCommand(ctx) {
    console.log(`‚öôÔ∏è –ö–æ–º–∞–Ω–¥–∞ /settings –æ—Ç –∞–¥–º–∏–Ω–∞ ${ctx.from.id}`);
    
    try {
      let message = `‚öôÔ∏è *–ù–ê–°–¢–†–û–ô–ö–ò –°–ò–°–¢–ï–ú–´*\n\n`;
      
      message += `üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**\n`;
      message += `‚Ä¢ –ì–æ—Ä—è—á–∏–µ –ª–∏–¥—ã: ‚úÖ\n`;
      message += `‚Ä¢ –¢–µ–ø–ª—ã–µ –ª–∏–¥—ã: ‚úÖ\n`;
      message += `‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ—à–∏–±–∫–∏: ‚úÖ\n\n`;
      
      message += `üìä **–°–∏—Å—Ç–µ–º–∞:**\n`;
      message += `‚Ä¢ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤: 7 –¥–Ω–µ–π\n`;
      message += `‚Ä¢ –õ–∏–º–∏—Ç rate limiting: —É–ª—É—á—à–µ–Ω–Ω—ã–π\n`;
      message += `‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π: –≤–∫–ª—é—á–µ–Ω–æ\n\n`;
      
      message += `üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥:**\n`;
      message += `‚Ä¢ –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${this.commandStats.totalCommands}\n`;
      message += `‚Ä¢ –û—à–∏–±–æ–∫: ${this.commandStats.errors}\n`;
      message += `‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–º–∞–Ω–¥–∞: ${this.commandStats.lastCommand?.command || '–Ω–µ—Ç'}\n`;

      const keyboard = {
        inline_keyboard: [
          [{ text: 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: 'admin_notifications' }],
          [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
        ]
      };

      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handleSettingsCommand:', error);
      this.commandStats.errors++;
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    }
  }

// ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ getDefaultStats
  getDefaultStats() {
    return {
      daily_stats: { 
        totalLeads: 0, 
        hotLeads: 0, 
        warmLeads: 0, 
        coldLeads: 0, 
        nurtureLeads: 0 
      },
      requests: { total: 0, unique_users: 0 },
      sessions: { created: 0 },
      errors: { handled: 0 },
      uptime: { hours: Math.round(process.uptime() / 3600) }
    };
  }

  getDefaultBotStats() {
    return {
      requests: { total: 0, unique_users: 0 },
      sessions: { created: 0 },
      errors: { handled: 0 }
    };
  }

  getAverageScore() {
    const leads = Object.values(this.adminNotifications.leadDataStorage || {});
    if (!leads.length) return 0;
    
    const scores = leads
      .map(lead => lead.analysisResult?.scores?.total)
      .filter(score => typeof score === 'number');
    
    if (!scores.length) return 0;
    return Math.round(scores.reduce((sum, score) => sum + score, 0) / scores.length);
  }

  analyzeLeadsData(leadsData) {
    const leads = Object.values(leadsData);
    const analysis = {
      totalLeads: leads.length,
      topIssues: [],
      ageGroups: {},
      averageScore: 0
    };

    if (!leads.length) return analysis;

    let totalScore = 0;
    const issueCount = {};

    leads.forEach(lead => {
      // –ü—Ä–æ–±–ª–µ–º—ã
      const issue = lead.analysisResult?.primaryIssue;
      if (issue) {
        issueCount[issue] = (issueCount[issue] || 0) + 1;
      }

      // –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã
      const age = lead.surveyAnswers?.age_group || lead.surveyAnswers?.child_age_detail;
      if (age) {
        analysis.ageGroups[age] = (analysis.ageGroups[age] || 0) + 1;
      }

      // –ë–∞–ª–ª
      const score = lead.analysisResult?.scores?.total;
      if (typeof score === 'number') {
        totalScore += score;
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ø –ø—Ä–æ–±–ª–µ–º
    analysis.topIssues = Object.entries(issueCount)
      .map(([key, count]) => ({ key, count }))
      .sort((a, b) => b.count - a.count)
      .slice(0, 5);

    analysis.averageScore = leads.length > 0 ? totalScore / leads.length : 0;

    return analysis;
  }

  performLeadSearch(searchTerm) {
    const leads = Object.values(this.adminNotifications.leadDataStorage || {});
    const term = searchTerm.toLowerCase();

    return leads.filter(lead => {
      const user = lead.userInfo || {};
      const answers = lead.surveyAnswers || {};
      const analysis = lead.analysisResult || {};

      // –ü–æ–∏—Å–∫ –ø–æ ID
      if (user.telegram_id && user.telegram_id.toString().includes(term)) {
        return true;
      }

      // –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
      if (user.first_name && user.first_name.toLowerCase().includes(term)) {
        return true;
      }

      // –ü–æ–∏—Å–∫ –ø–æ username
      if (user.username && user.username.toLowerCase().includes(term)) {
        return true;
      }

      // –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–±–ª–µ–º–µ
      if (analysis.primaryIssue && analysis.primaryIssue.toLowerCase().includes(term)) {
        return true;
      }

      // –ü–æ–∏—Å–∫ –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É
      if (analysis.segment && analysis.segment.toLowerCase().includes(term)) {
        return true;
      }

      return false;
    });
  }

  async getSystemHealthData() {
    return {
      overall: 'HEALTHY',
      components: {
        'telegram_bot': { status: 'HEALTHY' },
        'admin_handlers': { status: 'HEALTHY' },
        'lead_storage': { status: 'HEALTHY' },
        'pdf_generator': { status: 'HEALTHY' }
      },
      performance: {
        memory: Math.round(process.memoryUsage().heapUsed / 1024 / 1024),
        uptime: process.uptime()
      },
      integrations: {
        mainBot: !!config.MAIN_BOT_API_URL,
        crm: !!config.CRM_WEBHOOK_URL,
        database: !!config.DATABASE_URL
      }
    };
  }

  prepareLeadsForExport(leads) {
    return leads.map(lead => ({
      timestamp: lead.timestamp || new Date().toISOString(),
      telegram_id: lead.userInfo?.telegram_id,
      first_name: lead.userInfo?.first_name,
      username: lead.userInfo?.username,
      segment: lead.analysisResult?.segment,
      score: lead.analysisResult?.scores?.total,
      primary_issue: lead.analysisResult?.primaryIssue,
      survey_type: lead.surveyType,
      age_group: lead.surveyAnswers?.age_group || lead.surveyAnswers?.child_age_detail,
      stress_level: lead.surveyAnswers?.stress_level,
      processed: lead.processed || false
    }));
  }

  // ===== –£–¢–ò–õ–ò–¢–´ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø =====

  getLastLeadTime() {
    const leadsData = Object.values(this.adminNotifications.leadDataStorage || {});
    if (!leadsData.length) return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
    
    const latest = leadsData.reduce((latest, lead) => {
      const leadTime = new Date(lead.timestamp || 0);
      const latestTime = new Date(latest.timestamp || 0);
      return leadTime > latestTime ? lead : latest;
    }, leadsData[0]);
    
    return this.getTimeAgo(latest.timestamp);
  }

  formatTime(timestamp) {
    if (!timestamp) return '–ù–∏–∫–æ–≥–¥–∞';
    return new Date(timestamp).toLocaleString('ru-RU');
  }

  formatUptime(seconds) {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    
    if (hours > 24) {
      const days = Math.floor(hours / 24);
      const remainingHours = hours % 24;
      return `${days}–¥ ${remainingHours}—á ${minutes}–º`;
    }
    
    return `${hours}—á ${minutes}–º`;
  }

  getTimeAgo(timestamp) {
    if (!timestamp) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    
    const now = new Date();
    const time = new Date(timestamp);
    const diffMs = now - time;
    const diffMins = Math.floor(diffMs / 60000);
    
    if (diffMins < 1) return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
    if (diffMins < 60) return `${diffMins} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    
    const diffHours = Math.floor(diffMins / 60);
    if (diffHours < 24) return `${diffHours} —á –Ω–∞–∑–∞–¥`;
    
    const diffDays = Math.floor(diffHours / 24);
    return `${diffDays} –¥–Ω –Ω–∞–∑–∞–¥`;
  }

  getMemoryUsage() {
    return Math.round(process.memoryUsage().heapUsed / 1024 / 1024);
  }

  getSegmentEmoji(segment) {
    const emojis = {
      'HOT_LEAD': 'üî•',
      'WARM_LEAD': '‚≠ê',
      'COLD_LEAD': '‚ùÑÔ∏è',
      'NURTURE_LEAD': 'üå±'
    };
    return emojis[segment] || '‚ùì';
  }

  translateIssue(issue) {
    const translations = {
      'chronic_stress': '–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç—Ä–µ—Å—Å',
      'anxiety': '–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å',
      'insomnia': '–ë–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞',
      'breathing_issues': '–ü—Ä–æ–±–ª–µ–º—ã —Å –¥—ã—Ö–∞–Ω–∏–µ–º',
      'high_pressure': '–í—ã—Å–æ–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ',
      'fatigue': '–£—Å—Ç–∞–ª–æ—Å—Ç—å',
      'hyperactivity': '–ì–∏–ø–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
      'sleep_problems': '–ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–Ω–æ–º'
    };
    return translations[issue] || issue || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
  }

  translateAge(age) {
    const translations = {
      '18-30': '18-30 –ª–µ—Ç',
      '31-45': '31-45 –ª–µ—Ç',
      '46-60': '46-60 –ª–µ—Ç',
      '60+': '60+ –ª–µ—Ç',
      '3-4': '3-4 –≥–æ–¥–∞',
      '5-6': '5-6 –ª–µ—Ç',
      '7-8': '7-8 –ª–µ—Ç',
      '9-10': '9-10 –ª–µ—Ç'
    };
    return translations[age] || age || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
  }

  // ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î –î–õ–Ø –í–ù–ï–®–ù–ï–ì–û –í–´–ó–û–í–ê =====

  async handleCommand(ctx, commandName) {
    console.log(`üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã: ${commandName}`);
    
    try {
      switch (commandName) {
        case 'admin':
          await this.handleMainCommand(ctx);
          break;
        case 'stats':
          await this.handleStatsCommand(ctx);
          break;
        case 'analytics':
          await this.handleAnalyticsCommand(ctx);
          break;
        case 'hot_leads':
          await this.handleHotLeadsCommand(ctx);
          break;
        case 'today_leads':
          await this.handleTodayLeadsCommand(ctx);
          break;
        case 'health':
          await this.handleHealthCommand(ctx);
          break;
        case 'export_leads':
          await this.handleExportLeadsCommand(ctx);
          break;
        case 'settings':
          await this.handleSettingsCommand(ctx);
          break;
        default:
          console.warn('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞:', commandName);
          await ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:', error);
      this.commandStats.errors++;
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã');
    }
  }

  // ===== –≠–ö–°–ü–û–†–¢ –°–¢–ê–¢–ò–°–¢–ò–ö–ò =====

  getCommandStats() {
    return {
      ...this.commandStats,
      admin_id: this.adminId,
      uptime: this.formatUptime(process.uptime()),
      memory_usage: this.getMemoryUsage()
    };
  }

  exportStats() {
    return {
      name: 'AdminHandlers',
      version: '1.0.0',
      admin_id: this.adminId,
      features: [
        'command_handling',
        'lead_analytics',
        'search_functionality',
        'health_monitoring',
        'data_export',
        'statistics_tracking'
      ],
      command_stats: this.getCommandStats(),
      last_updated: new Date().toISOString()
    };
  }

  cleanup() {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ AdminHandlers...');
    console.log('üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥:', JSON.stringify(this.getCommandStats(), null, 2));
    console.log('‚úÖ AdminHandlers –æ—á–∏—â–µ–Ω');
  }
}

module.exports = AdminHandlers;