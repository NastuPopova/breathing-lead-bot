const { Markup } = require('telegraf');
const config = require('../../config');

class EnhancedAdminPanel {
  constructor(bot, adminNotifications, verseAnalysis, leadTransfer) {
    this.bot = bot;
    this.adminNotifications = adminNotifications;
    this.verseAnalysis = verseAnalysis;
    this.leadTransfer = leadTransfer;
    this.adminId = config.ADMIN_ID;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–Ω–µ–ª–∏
    this.panelStats = {
      lastAccess: null,
      totalSessions: 0,
      commandsUsed: {}
    };

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    this.notificationSettings = {
      hotLeads: true,
      warmLeads: true,
      coldLeads: false,
      systemErrors: true,
      dailyReport: true,
      weeklyReport: true
    };
  }

  // ===== –û–°–ù–û–í–ù–´–ï –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´ =====

  setupAdminCommands() {
    if (!this.adminId) {
      console.log('‚ö†Ô∏è ADMIN_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –æ—Ç–∫–ª—é—á–µ–Ω–∞');
      return;
    }

    // –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å
    this.bot.command('admin', this.checkAdmin(this.showMainPanel.bind(this)));
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    this.bot.command('stats', this.checkAdmin(this.showDetailedStats.bind(this)));
    this.bot.command('analytics', this.checkAdmin(this.showAnalytics.bind(this)));
    this.bot.command('leads_report', this.checkAdmin(this.showLeadsReport.bind(this)));
    
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–¥–∞–º–∏
    this.bot.command('hot_leads', this.checkAdmin(this.showHotLeads.bind(this)));
    this.bot.command('today_leads', this.checkAdmin(this.showTodayLeads.bind(this)));
    this.bot.command('search_lead', this.checkAdmin(this.searchLead.bind(this)));
    
    // –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    this.bot.command('health', this.checkAdmin(this.showSystemHealth.bind(this)));
    this.bot.command('logs', this.checkAdmin(this.showRecentLogs.bind(this)));
    this.bot.command('restart_bot', this.checkAdmin(this.restartBot.bind(this)));
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    this.bot.command('settings', this.checkAdmin(this.showSettings.bind(this)));
    this.bot.command('notifications', this.checkAdmin(this.manageNotifications.bind(this)));
    
    // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    this.bot.command('export_leads', this.checkAdmin(this.exportLeads.bind(this)));
    this.bot.command('export_stats', this.checkAdmin(this.exportStats.bind(this)));

    console.log('‚úÖ –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
  checkAdmin(handler) {
    return async (ctx) => {
      if (ctx.from.id.toString() !== this.adminId) {
        await ctx.reply('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        return;
      }
      
      this.trackAdminAccess(ctx.message.text);
      return handler(ctx);
    };
  }

  trackAdminAccess(command) {
    this.panelStats.lastAccess = new Date().toISOString();
    this.panelStats.totalSessions++;
    this.panelStats.commandsUsed[command] = (this.panelStats.commandsUsed[command] || 0) + 1;
  }

  // ===== –ì–õ–ê–í–ù–ê–Ø –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ =====

  async showMainPanel(ctx) {
    const stats = this.adminNotifications.getStats();
    const uptime = Math.round(process.uptime() / 3600);

    let message = `üéõÔ∏è *–ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–ê–Ø –ü–ê–ù–ï–õ–¨*\n\n`;
    message += `üë®‚Äçüíº –ê–¥–º–∏–Ω: ${ctx.from.first_name}\n`;
    message += `‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${uptime}—á\n`;
    message += `üìä –õ–∏–¥–æ–≤ —Å–µ–≥–æ–¥–Ω—è: ${stats.daily_stats?.totalLeads || 0}\n`;
    message += `üî• –ì–æ—Ä—è—á–∏—Ö: ${stats.daily_stats?.hotLeads || 0}\n\n`;
    
    message += `üïê *–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*\n`;
    message += `‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ª–∏–¥: ${this.getLastLeadTime()}\n`;
    message += `‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏: ${this.formatTime(this.panelStats.lastAccess)}\n\n`;
    
    message += `‚ö° *–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*`;

    const keyboard = [
      [
        Markup.button.callback('üî• –ì–æ—Ä—è—á–∏–µ –ª–∏–¥—ã', 'admin_hot_leads'),
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin_stats')
      ],
      [
        Markup.button.callback('üìã –í—Å–µ –ª–∏–¥—ã —Å–µ–≥–æ–¥–Ω—è', 'admin_today_leads'),
        Markup.button.callback('üîç –ü–æ–∏—Å–∫ –ª–∏–¥–∞', 'admin_search')
      ],
      [
        Markup.button.callback('üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞', 'admin_analytics'),
        Markup.button.callback('üìÑ –û—Ç—á–µ—Ç—ã', 'admin_reports')
      ],
      [
        Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'admin_settings'),
        Markup.button.callback('üîß –°–∏—Å—Ç–µ–º–∞', 'admin_system')
      ],
      [
        Markup.button.callback('üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö', 'admin_export'),
        Markup.button.callback('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'admin_notifications_menu')
      ],
      [
        Markup.button.callback('üÜò –ü–æ–º–æ—â—å', 'admin_help'),
        Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'admin_refresh')
      ]
    ];

    await ctx.reply(message, {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard(keyboard)
    });
  }

  // ===== –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê =====

  async showDetailedStats(ctx) {
    const stats = this.adminNotifications.getStats();
    const botStats = this.bot.middleware?.getStats() || {};
    
    let message = `üìä *–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê*\n\n`;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–∏–¥–æ–≤
    message += `üë• *–õ–ò–î–´:*\n`;
    message += `‚Ä¢ –í—Å–µ–≥–æ —Å–µ–≥–æ–¥–Ω—è: ${stats.daily_stats?.totalLeads || 0}\n`;
    message += `‚Ä¢ üî• –ì–æ—Ä—è—á–∏–µ: ${stats.daily_stats?.hotLeads || 0}\n`;
    message += `‚Ä¢ ‚≠ê –¢–µ–ø–ª—ã–µ: ${stats.daily_stats?.warmLeads || 0}\n`;
    message += `‚Ä¢ ‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω—ã–µ: ${stats.daily_stats?.coldLeads || 0}\n`;
    message += `‚Ä¢ üå± –î–ª—è –≤–∑—Ä–∞—â–∏–≤–∞–Ω–∏—è: ${stats.daily_stats?.nurtureLeads || 0}\n\n`;
    
    // –ö–æ–Ω–≤–µ—Ä—Å–∏—è
    const totalLeads = stats.daily_stats?.totalLeads || 0;
    const hotLeads = stats.daily_stats?.hotLeads || 0;
    const conversionRate = totalLeads > 0 ? ((hotLeaks / totalLeads) * 100).toFixed(1) : 0;
    message += `üìà *–ö–û–ù–í–ï–†–°–ò–Ø:*\n`;
    message += `‚Ä¢ –í –≥–æ—Ä—è—á–∏–µ –ª–∏–¥—ã: ${conversionRate}%\n`;
    message += `‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª VERSE: ${this.getAverageScore()}/100\n\n`;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
    message += `ü§ñ *–ë–û–¢:*\n`;
    message += `‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${botStats.requests?.unique_users || 0}\n`;
    message += `‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${botStats.requests?.total || 0}\n`;
    message += `‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: ${botStats.sessions?.created || 0}\n`;
    message += `‚Ä¢ –û—à–∏–±–æ–∫: ${botStats.errors?.handled || 0}\n\n`;
    
    // –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
    const uptime = process.uptime();
    message += `‚è±Ô∏è *–°–ò–°–¢–ï–ú–ê:*\n`;
    message += `‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${this.formatUptime(uptime)}\n`;
    message += `‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫: ${this.getLastRestart()}\n`;
    message += `‚Ä¢ –°—Ç–∞—Ç—É—Å: ${this.getSystemStatus()}\n`;

    await ctx.reply(message, {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard([
        [Markup.button.callback('üìà –ì—Ä–∞—Ñ–∏–∫–∏', 'admin_charts')],
        [Markup.button.callback('üìä –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', 'admin_export_stats')],
        [Markup.button.callback('üîô –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', 'admin_main')]
      ])
    });
  }

  // ===== –ê–ù–ê–õ–ò–¢–ò–ö–ê –ò –û–¢–ß–ï–¢–´ =====

  async showAnalytics(ctx) {
    const leadsData = this.adminNotifications.leadDataStorage || {};
    const analysis = this.analyzeLeadsData(leadsData);

    let message = `üìà *–ê–ù–ê–õ–ò–¢–ò–ö–ê –õ–ò–î–û–í*\n\n`;
    
    // –¢–æ–ø –ø—Ä–æ–±–ª–µ–º—ã
    message += `üéØ *–¢–û–ü-5 –ü–†–û–ë–õ–ï–ú:*\n`;
    analysis.topIssues.forEach((issue, index) => {
      message += `${index + 1}. ${this.translateIssue(issue.key)}: ${issue.count}\n`;
    });
    message += `\n`;
    
    // –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã
    message += `üë• *–í–û–ó–†–ê–°–¢–ù–´–ï –ì–†–£–ü–ü–´:*\n`;
    Object.entries(analysis.ageGroups).forEach(([age, count]) => {
      const percentage = ((count / analysis.totalLeads) * 100).toFixed(1);
      message += `‚Ä¢ ${this.translateAge(age)}: ${count} (${percentage}%)\n`;
    });
    message += `\n`;
    
    // –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    message += `‚è∞ *–ü–û –í–†–ï–ú–ï–ù–ò –°–£–¢–û–ö:*\n`;
    Object.entries(analysis.timeDistribution).forEach(([hour, count]) => {
      message += `‚Ä¢ ${hour}:00-${hour}:59: ${count} –ª–∏–¥–æ–≤\n`;
    });
    message += `\n`;
    
    // –¢—Ä–µ–Ω–¥—ã
    message += `üìä *–¢–†–ï–ù–î–´:*\n`;
    message += `‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª VERSE: ${analysis.averageScore.toFixed(1)}\n`;
    message += `‚Ä¢ –°–∞–º–∞—è —á–∞—Å—Ç–∞—è –ø—Ä–æ–±–ª–µ–º–∞: ${this.translateIssue(analysis.topIssues[0]?.key)}\n`;
    message += `‚Ä¢ –ü–∏–∫–æ–≤–æ–µ –≤—Ä–µ–º—è: ${analysis.peakHour}:00\n`;

    await ctx.reply(message, {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard([
        [Markup.button.callback('üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç', 'admin_detailed_report')],
        [Markup.button.callback('üìà –¢—Ä–µ–Ω–¥—ã –Ω–µ–¥–µ–ª–∏', 'admin_weekly_trends')],
        [Markup.button.callback('üîô –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', 'admin_main')]
      ])
    });
  }

  // ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –õ–ò–î–ê–ú–ò =====

  async showHotLeads(ctx) {
    const leads = Object.values(this.adminNotifications.leadDataStorage || {})
      .filter(lead => lead.analysisResult?.segment === 'HOT_LEAD')
      .sort((a, b) => new Date(b.timestamp || 0) - new Date(a.timestamp || 0))
      .slice(0, 10);

    if (!leads.length) {
      await ctx.reply('‚úÖ –ù–µ—Ç –≥–æ—Ä—è—á–∏—Ö –ª–∏–¥–æ–≤', {
        ...Markup.inlineKeyboard([
          [Markup.button.callback('üîô –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', 'admin_main')]
        ])
      });
      return;
    }

    let message = `üî• *–ì–û–†–Ø–ß–ò–ï –õ–ò–î–´ (${leads.length})*\n\n`;
    
    leads.forEach((lead, index) => {
      const user = lead.userInfo;
      const score = lead.analysisResult?.scores?.total || 0;
      const timeAgo = this.getTimeAgo(lead.timestamp);
      
      message += `${index + 1}. **${user?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}**\n`;
      message += `   üÜî ID: \`${user?.telegram_id}\`\n`;
      message += `   üìä –ë–∞–ª–ª: ${score}/100\n`;
      message += `   ‚è∞ ${timeAgo}\n`;
      message += `   üéØ ${this.translateIssue(lead.analysisResult?.primaryIssue)}\n\n`;
    });

    const keyboard = [
      [Markup.button.callback('üìû –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ—Ö', 'admin_process_all_hot')],
      [Markup.button.callback('üìã –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞', 'admin_export_hot_leads')],
      [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'admin_hot_leads')],
      [Markup.button.callback('üîô –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', 'admin_main')]
    ];

    await ctx.reply(message, {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard(keyboard)
    });
  }

  // ===== –ü–û–ò–°–ö –õ–ò–î–û–í =====

  async searchLead(ctx) {
    const searchTerm = ctx.message.text.split(' ').slice(1).join(' ');
    
    if (!searchTerm) {
      await ctx.reply(
        `üîç *–ü–û–ò–°–ö –õ–ò–î–û–í*\n\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: \`/search_lead <–∑–∞–ø—Ä–æ—Å>\`\n\n` +
        `–ú–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å –ø–æ:\n` +
        `‚Ä¢ Telegram ID\n` +
        `‚Ä¢ –ò–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n` +
        `‚Ä¢ Username (–±–µ–∑ @)\n` +
        `‚Ä¢ –ü—Ä–æ–±–ª–µ–º–µ\n\n` +
        `–ü—Ä–∏–º–µ—Ä—ã:\n` +
        `\`/search_lead 123456789\`\n` +
        `\`/search_lead –ê–Ω–Ω–∞\`\n` +
        `\`/search_lead —Å—Ç—Ä–µ—Å—Å\``,
        { parse_mode: 'Markdown' }
      );
      return;
    }

    const results = this.performLeadSearch(searchTerm);
    
    if (!results.length) {
      await ctx.reply(
        `‚ùå *–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ*\n\n–ü–æ –∑–∞–ø—Ä–æ—Å—É "${searchTerm}" –ª–∏–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`,
        {
          parse_mode: 'Markdown',
          ...Markup.inlineKeyboard([
            [Markup.button.callback('üîô –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', 'admin_main')]
          ])
        }
      );
      return;
    }

    let message = `üîç *–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê*\n`;
    message += `–ó–∞–ø—Ä–æ—Å: "${searchTerm}"\n`;
    message += `–ù–∞–π–¥–µ–Ω–æ: ${results.length}\n\n`;

    results.slice(0, 5).forEach((lead, index) => {
      const user = lead.userInfo;
      const segment = lead.analysisResult?.segment || 'UNKNOWN';
      const timeAgo = this.getTimeAgo(lead.timestamp);
      
      message += `${index + 1}. **${user?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}**\n`;
      message += `   üÜî ID: \`${user?.telegram_id}\`\n`;
      message += `   üìä –°–µ–≥–º–µ–Ω—Ç: ${this.getSegmentEmoji(segment)} ${segment}\n`;
      message += `   ‚è∞ ${timeAgo}\n\n`;
    });

    if (results.length > 5) {
      message += `... –∏ –µ—â–µ ${results.length - 5} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n\n`;
    }

    await ctx.reply(message, {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard([
        [Markup.button.callback('üìã –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫', 'admin_full_search_results')],
        [Markup.button.callback('üîô –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', 'admin_main')]
      ])
    });
  }

  // ===== –°–ò–°–¢–ï–ú–ù–û–ï –ó–î–û–†–û–í–¨–ï =====

  async showSystemHealth(ctx) {
    const health = await this.getSystemHealthData();
    
    let message = `üîß *–°–û–°–¢–û–Ø–ù–ò–ï –°–ò–°–¢–ï–ú–´*\n\n`;
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    message += `ü§ñ *–ö–û–ú–ü–û–ù–ï–ù–¢–´:*\n`;
    Object.entries(health.components).forEach(([component, data]) => {
      const emoji = data.status === 'HEALTHY' ? '‚úÖ' : data.status === 'DEGRADED' ? '‚ö†Ô∏è' : '‚ùå';
      message += `${emoji} ${component}: ${data.status}\n`;
    });
    message += `\n`;
    
    // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    message += `üìä *–ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:*\n`;
    message += `‚Ä¢ CPU: ${health.performance.cpu}%\n`;
    message += `‚Ä¢ –ü–∞–º—è—Ç—å: ${health.performance.memory}MB\n`;
    message += `‚Ä¢ –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: ${health.performance.responseTime}ms\n\n`;
    
    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    message += `üîó *–ò–ù–¢–ï–ì–†–ê–¶–ò–ò:*\n`;
    message += `‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç: ${health.integrations.mainBot ? '‚úÖ' : '‚ùå'}\n`;
    message += `‚Ä¢ CRM: ${health.integrations.crm ? '‚úÖ' : '‚ùå'}\n`;
    message += `‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${health.integrations.database ? '‚úÖ' : '‚ùå'}\n`;

    const statusEmoji = health.overall === 'HEALTHY' ? '‚úÖ' : health.overall === 'DEGRADED' ? '‚ö†Ô∏è' : '‚ùå';

    await ctx.reply(message, {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard([
        [Markup.button.callback(`${statusEmoji} –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: ${health.overall}`, 'admin_detailed_health')],
        [Markup.button.callback('üìã –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã', 'admin_logs')],
        [Markup.button.callback('üîÑ –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π', 'admin_test_connections')],
        [Markup.button.callback('üîô –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', 'admin_main')]
      ])
    });
  }

  // ===== –≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–• =====

  async exportLeads(ctx, format = 'json') {
    try {
      const leads = Object.values(this.adminNotifications.leadDataStorage || {});
      
      if (!leads.length) {
        await ctx.reply('üìã –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
        return;
      }

      const exportData = this.prepareLeadsForExport(leads);
      const fileName = `leads_export_${new Date().toISOString().split('T')[0]}.${format}`;
      
      let fileContent;
      if (format === 'csv') {
        fileContent = this.convertToCSV(exportData);
      } else {
        fileContent = JSON.stringify(exportData, null, 2);
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      const fs = require('fs');
      const filePath = `./temp/${fileName}`;
      
      if (!fs.existsSync('./temp')) {
        fs.mkdirSync('./temp', { recursive: true });
      }
      
      fs.writeFileSync(filePath, fileContent, 'utf8');

      await ctx.replyWithDocument(
        { source: filePath },
        {
          caption: `üìä –≠–∫—Å–ø–æ—Ä—Ç –ª–∏–¥–æ–≤\n\n‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${leads.length}\n‚Ä¢ –§–æ—Ä–º–∞—Ç: ${format.toUpperCase()}\n‚Ä¢ –î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}`,
          ...Markup.inlineKeyboard([
            [Markup.button.callback('üîô –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', 'admin_main')]
          ])
        }
      );

      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        try {
          fs.unlinkSync(filePath);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', error);
        }
      }, 30000);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ª–∏–¥–æ–≤:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö');
    }
  }

  // ===== –ù–ê–°–¢–†–û–ô–ö–ò =====

  async showSettings(ctx) {
    let message = `‚öôÔ∏è *–ù–ê–°–¢–†–û–ô–ö–ò –°–ò–°–¢–ï–ú–´*\n\n`;
    
    message += `üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*\n`;
    message += `‚Ä¢ –ì–æ—Ä—è—á–∏–µ –ª–∏–¥—ã: ${this.notificationSettings.hotLeads ? '‚úÖ' : '‚ùå'}\n`;
    message += `‚Ä¢ –¢–µ–ø–ª—ã–µ –ª–∏–¥—ã: ${this.notificationSettings.warmLeads ? '‚úÖ' : '‚ùå'}\n`;
    message += `‚Ä¢ –•–æ–ª–æ–¥–Ω—ã–µ –ª–∏–¥—ã: ${this.notificationSettings.coldLeads ? '‚úÖ' : '‚ùå'}\n`;
    message += `‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ—à–∏–±–∫–∏: ${this.notificationSettings.systemErrors ? '‚úÖ' : '‚ùå'}\n`;
    message += `‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç: ${this.notificationSettings.dailyReport ? '‚úÖ' : '‚ùå'}\n`;
    message += `‚Ä¢ –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç: ${this.notificationSettings.weeklyReport ? '‚úÖ' : '‚ùå'}\n\n`;
    
    message += `üìä *–°–∏—Å—Ç–µ–º–∞:*\n`;
    message += `‚Ä¢ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤: 7 –¥–Ω–µ–π\n`;
    message += `‚Ä¢ –õ–∏–º–∏—Ç rate limiting: —É–ª—É—á—à–µ–Ω–Ω—ã–π\n`;
    message += `‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π: –≤–∫–ª—é—á–µ–Ω–æ\n`;

    const keyboard = [
      [
        Markup.button.callback('üîî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'admin_notification_settings'),
        Markup.button.callback('‚è±Ô∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–∞–π–º–∞—É—Ç—ã', 'admin_timeout_settings')
      ],
      [
        Markup.button.callback('üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', 'admin_cleanup_data'),
        Markup.button.callback('üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', 'admin_reset_stats')
      ],
      [
        Markup.button.callback('üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è', 'admin_backup'),
        Markup.button.callback('üì§ –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'admin_export_settings')
      ],
      [
        Markup.button.callback('üîô –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', 'admin_main')
      ]
    ];

    await ctx.reply(message, {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard(keyboard)
    });
  }

  // ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====

  analyzeLeadsData(leadsData) {
    const leads = Object.values(leadsData);
    const analysis = {
      totalLeads: leads.length,
      topIssues: {},
      ageGroups: {},
      timeDistribution: {},
      averageScore: 0,
      peakHour: 0
    };

    if (!leads.length) return analysis;

    let totalScore = 0;
    const hourCounts = {};

    leads.forEach(lead => {
      // –ü—Ä–æ–±–ª–µ–º—ã
      const issue = lead.analysisResult?.primaryIssue;
      if (issue) {
        analysis.topIssues[issue] = (analysis.topIssues[issue] || 0) + 1;
      }

      // –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã
      const age = lead.surveyAnswers?.age_group || lead.surveyAnswers?.child_age_detail;
      if (age) {
        analysis.ageGroups[age] = (analysis.ageGroups[age] || 0) + 1;
      }

      // –í—Ä–µ–º—è
      const timestamp = lead.timestamp || lead.startTime;
      if (timestamp) {
        const hour = new Date(timestamp).getHours();
        hourCounts[hour] = (hourCounts[hour] || 0) + 1;
      }

      // –ë–∞–ª–ª
      const score = lead.analysisResult?.scores?.total;
      if (typeof score === 'number') {
        totalScore += score;
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    analysis.topIssues = Object.entries(analysis.topIssues)
      .map(([key, count]) => ({ key, count }))
      .sort((a, b) => b.count - a.count)
      .slice(0, 5);

    analysis.averageScore = leads.length > 0 ? totalScore / leads.length : 0;
    
    analysis.peakHour = Object.entries(hourCounts)
      .reduce((max, [hour, count]) => count > (hourCounts[max] || 0) ? hour : max, 0);

    // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–≥—Ä—É–ø–ø–∏—Ä—É–µ–º –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã)
    Object.entries(hourCounts).forEach(([hour, count]) => {
      const interval = `${hour}`;
      analysis.timeDistribution[interval] = count;
    });

    return analysis;
  }

  performLeadSearch(searchTerm) {
    const leads = Object.values(this.adminNotifications.leadDataStorage || {});
    const term = searchTerm.toLowerCase();

    return leads.filter(lead => {
      const user = lead.userInfo || {};
      const answers = lead.surveyAnswers || {};
      const analysis = lead.analysisResult || {};

      // –ü–æ–∏—Å–∫ –ø–æ ID
      if (user.telegram_id && user.telegram_id.toString().includes(term)) {
        return true;
      }

      // –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
      if (user.first_name && user.first_name.toLowerCase().includes(term)) {
        return true;
      }

      // –ü–æ–∏—Å–∫ –ø–æ username
      if (user.username && user.username.toLowerCase().includes(term)) {
        return true;
      }

      // –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–±–ª–µ–º–µ
      if (analysis.primaryIssue && analysis.primaryIssue.toLowerCase().includes(term)) {
        return true;
      }

      // –ü–æ–∏—Å–∫ –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É
      if (analysis.segment && analysis.segment.toLowerCase().includes(term)) {
        return true;
      }

      return false;
    });
  }

  async getSystemHealthData() {
    return {
      overall: 'HEALTHY',
      components: {
        'telegram_bot': { status: 'HEALTHY' },
        'main_bot_api': { status: 'HEALTHY' },
        'database': { status: 'UNKNOWN' },
        'crm': { status: 'UNKNOWN' }
      },
      performance: {
        cpu: Math.round(Math.random() * 20 + 10), // –ó–∞–≥–ª—É—à–∫–∞
        memory: Math.round(process.memoryUsage().heapUsed / 1024 / 1024),
        responseTime: Math.round(Math.random() * 100 + 50)
      },
      integrations: {
        mainBot: !!config.MAIN_BOT_API_URL,
        crm: !!config.CRM_WEBHOOK_URL,
        database: !!config.DATABASE_URL
      }
    };
  }

  prepareLeadsForExport(leads) {
    return leads.map(lead => ({
      timestamp: lead.timestamp || new Date().toISOString(),
      telegram_id: lead.userInfo?.telegram_id,
      first_name: lead.userInfo?.first_name,
      username: lead.userInfo?.username,
      segment: lead.analysisResult?.segment,
      score: lead.analysisResult?.scores?.total,
      primary_issue: lead.analysisResult?.primaryIssue,
      survey_type: lead.surveyType,
      age_group: lead.surveyAnswers?.age_group || lead.surveyAnswers?.child_age_detail,
      stress_level: lead.surveyAnswers?.stress_level,
      processed: lead.processed || false
    }));
  }

  convertToCSV(data) {
    if (!data.length) return '';
    
    const headers = Object.keys(data[0]);
    const csvRows = [headers.join(',')];
    
    data.forEach(row => {
      const values = headers.map(header => {
        const value = row[header];
        return typeof value === 'string' ? `"${value.replace(/"/g, '""')}"` : value;
      });
      csvRows.push(values.join(','));
    });
    
    return csvRows.join('\n');
  }

  // ===== –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï =====

  getLastLeadTime() {
    const leds = Object.values(this.adminNotifications.leadDataStorage || {});
    if (!leads.length) return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
    
    const latest = leads.reduce((latest, lead) => {
      const leadTime = new Date(lead.timestamp || 0);
      const latestTime = new Date(latest.timestamp || 0);
      return leadTime > latestTime ? lead : latest;
    }, leads[0]);
    
    return this.getTimeAgo(latest.timestamp);
  }

  formatTime(timestamp) {
    if (!timestamp) return '–ù–∏–∫–æ–≥–¥–∞';
    return new Date(timestamp).toLocaleString('ru-RU');
  }

  formatUptime(seconds) {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = Math.floor(seconds % 60);
    
    if (hours > 24) {
      const days = Math.floor(hours / 24);
      const remainingHours = hours % 24;
      return `${days}–¥ ${remainingHours}—á ${minutes}–º`;
    }
    
    return `${hours}—á ${minutes}–º ${secs}—Å`;
  }

  getTimeAgo(timestamp) {
    if (!timestamp) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    
    const now = new Date();
    const time = new Date(timestamp);
    const diffMs = now - time;
    const diffMins = Math.floor(diffMs / 60000);
    
    if (diffMins < 1) return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
    if (diffMins < 60) return `${diffMins} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    
    const diffHours = Math.floor(diffMins / 60);
    if (diffHours < 24) return `${diffHours} —á –Ω–∞–∑–∞–¥`;
    
    const diffDays = Math.floor(diffHours / 24);
    return `${diffDays} –¥–Ω –Ω–∞–∑–∞–¥`;
  }

  getLastRestart() {
    return this.formatTime(new Date(Date.now() - process.uptime() * 1000).toISOString());
  }

  getSystemStatus() {
    const uptime = process.uptime();
    if (uptime < 300) return 'üü° –ù–µ–¥–∞–≤–Ω–∏–π –∑–∞–ø—É—Å–∫';
    if (uptime < 3600) return 'üü¢ –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞';
    return 'üü¢ –î–æ–ª–≥–∞—è —Ä–∞–±–æ—Ç–∞';
  }

  getAverageScore() {
    const leads = Object.values(this.adminNotifications.leadDataStorage || {});
    if (!leads.length) return 0;
    
    const scores = leads
      .map(lead => lead.analysisResult?.scores?.total)
      .filter(score => typeof score === 'number');
    
    if (!scores.length) return 0;
    return Math.round(scores.reduce((sum, score) => sum + score, 0) / scores.length);
  }

  getSegmentEmoji(segment) {
    const emojis = {
      'HOT_LEAD': 'üî•',
      'WARM_LEAD': '‚≠ê',
      'COLD_LEAD': '‚ùÑÔ∏è',
      'NURTURE_LEAD': 'üå±'
    };
    return emojis[segment] || '‚ùì';
  }

  translateIssue(issue) {
    const translations = {
      'chronic_stress': '–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç—Ä–µ—Å—Å',
      'anxiety': '–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å',
      'insomnia': '–ë–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞',
      'breathing_issues': '–ü—Ä–æ–±–ª–µ–º—ã —Å –¥—ã—Ö–∞–Ω–∏–µ–º',
      'high_pressure': '–í—ã—Å–æ–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ',
      'fatigue': '–£—Å—Ç–∞–ª–æ—Å—Ç—å',
      'hyperactivity': '–ì–∏–ø–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
      'sleep_problems': '–ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–Ω–æ–º'
    };
    return translations[issue] || issue || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
  }

  translateAge(age) {
    const translations = {
      '18-30': '18-30 –ª–µ—Ç',
      '31-45': '31-45 –ª–µ—Ç',
      '46-60': '46-60 –ª–µ—Ç',
      '60+': '60+ –ª–µ—Ç',
      '3-4': '3-4 –≥–æ–¥–∞',
      '5-6': '5-6 –ª–µ—Ç',
      '7-8': '7-8 –ª–µ—Ç',
      '9-10': '9-10 –ª–µ—Ç',
      '11-12': '11-12 –ª–µ—Ç',
      '13-15': '13-15 –ª–µ—Ç',
      '16-17': '16-17 –ª–µ—Ç'
    };
    return translations[age] || age || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
  }

  // ===== CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====

  setupCallbacks() {
    // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    this.bot.action('admin_main', this.checkAdminCallback(this.showMainPanel.bind(this)));
    this.bot.action('admin_refresh', this.checkAdminCallback(this.showMainPanel.bind(this)));
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    this.bot.action('admin_stats', this.checkAdminCallback(this.showDetailedStats.bind(this)));
    this.bot.action('admin_analytics', this.checkAdminCallback(this.showAnalytics.bind(this)));
    this.bot.action('admin_reports', this.checkAdminCallback(this.showLeadsReport.bind(this)));
    
    // –õ–∏–¥—ã
    this.bot.action('admin_hot_leads', this.checkAdminCallback(this.showHotLeads.bind(this)));
    this.bot.action('admin_today_leads', this.checkAdminCallback(this.showTodayLeads.bind(this)));
    
    // –°–∏—Å—Ç–µ–º–∞
    this.bot.action('admin_system', this.checkAdminCallback(this.showSystemHealth.bind(this)));
    this.bot.action('admin_settings', this.checkAdminCallback(this.showSettings.bind(this)));
    this.bot.action('admin_logs', this.checkAdminCallback(this.showRecentLogs.bind(this)));
    
    // –≠–∫—Å–ø–æ—Ä—Ç
    this.bot.action('admin_export', this.checkAdminCallback(this.showExportMenu.bind(this)));
    this.bot.action('admin_export_leads_json', this.checkAdminCallback((ctx) => this.exportLeads(ctx, 'json')));
    this.bot.action('admin_export_leads_csv', this.checkAdminCallback((ctx) => this.exportLeads(ctx, 'csv')));
    this.bot.action('admin_export_stats', this.checkAdminCallback(this.exportStats.bind(this)));
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    this.bot.action('admin_notifications_menu', this.checkAdminCallback(this.showNotificationsMenu.bind(this)));
    
    // –ü–æ–º–æ—â—å
    this.bot.action('admin_help', this.checkAdminCallback(this.showHelp.bind(this)));

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    this.bot.action('admin_confirm_restart', this.checkAdminCallback(this.handleRestartConfirm.bind(this)));
    
    console.log('‚úÖ –í—Å–µ admin callbacks –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }

  checkAdminCallback(handler) {
    return async (ctx) => {
      if (ctx.from.id.toString() !== this.adminId) {
        await ctx.answerCbQuery('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        return;
      }
      
      await ctx.answerCbQuery();
      return handler(ctx);
    };
  }

  async showTodayLeads(ctx) {
    const today = new Date().toDateString();
    const leads = Object.values(this.adminNotifications.leadDataStorage || {})
      .filter(lead => {
        const leadDate = lead.timestamp ? new Date(lead.timestamp).toDateString() : null;
        return leadDate === today;
      })
      .sort((a, b) => new Date(b.timestamp || 0) - new Date(a.timestamp || 0));

    if (!leads.length) {
      await ctx.editMessageText(
        'üìã *–õ–ò–î–´ –°–ï–ì–û–î–ù–Ø*\n\n‚úÖ –°–µ–≥–æ–¥–Ω—è –ª–∏–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç',
        {
          parse_mode: 'Markdown',
          ...Markup.inlineKeyboard([
            [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'admin_today_leads')],
            [Markup.button.callback('üîô –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', 'admin_main')]
          ])
        }
      );
      return;
    }

    let message = `üìã *–õ–ò–î–´ –°–ï–ì–û–î–ù–Ø (${leads.length})*\n\n`;
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
    const bySegment = leads.reduce((acc, lead) => {
      const segment = lead.analysisResult?.segment || 'UNKNOWN';
      if (!acc[segment]) acc[segment] = [];
      acc[segment].push(lead);
      return acc;
    }, {});

    Object.entries(bySegment).forEach(([segment, segmentLeads]) => {
      const emoji = this.getSegmentEmoji(segment);
      message += `${emoji} **${segment}** (${segmentLeads.length}):\n`;
      
      segmentLeads.slice(0, 3).forEach(lead => {
        const user = lead.userInfo;
        const time = new Date(lead.timestamp).toLocaleTimeString('ru-RU', {
          hour: '2-digit',
          minute: '2-digit'
        });
        message += `   ‚Ä¢ ${user?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (${time})\n`;
      });
      
      if (segmentLeads.length > 3) {
        message += `   ‚Ä¢ ... –∏ –µ—â–µ ${segmentLeads.length - 3}\n`;
      }
      message += `\n`;
    });

    const keyboard = [
      [
        Markup.button.callback('üî• –¢–æ–ª—å–∫–æ –≥–æ—Ä—è—á–∏–µ', 'admin_hot_leads'),
        Markup.button.callback('üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–Ω—è', 'admin_day_analytics')
      ],
      [
        Markup.button.callback('üì§ –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞', 'admin_export_today'),
        Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'admin_today_leads')
      ],
      [
        Markup.button.callback('üîô –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', 'admin_main')
      ]
    ];

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard(keyboard)
    });
  }

  async showExportMenu(ctx) {
    let message = `üì§ *–≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–•*\n\n`;
    message += `–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:\n\n`;
    message += `üìã **–õ–∏–¥—ã:**\n`;
    message += `‚Ä¢ –í—Å–µ –ª–∏–¥—ã (JSON/CSV)\n`;
    message += `‚Ä¢ –¢–æ–ª—å–∫–æ –≥–æ—Ä—è—á–∏–µ –ª–∏–¥—ã\n`;
    message += `‚Ä¢ –õ–∏–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥\n\n`;
    message += `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n`;
    message += `‚Ä¢ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n`;
    message += `‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º\n`;
    message += `‚Ä¢ –û—Ç—á–µ—Ç –æ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏\n\n`;
    message += `‚öôÔ∏è **–°–∏—Å—Ç–µ–º–∞:**\n`;
    message += `‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n`;
    message += `‚Ä¢ –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã`;

    const keyboard = [
      [
        Markup.button.callback('üìã –õ–∏–¥—ã (JSON)', 'admin_export_leads_json'),
        Markup.button.callback('üìã –õ–∏–¥—ã (CSV)', 'admin_export_leads_csv')
      ],
      [
        Markup.button.callback('üî• –ì–æ—Ä—è—á–∏–µ –ª–∏–¥—ã', 'admin_export_hot'),
        Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin_export_stats')
      ],
      [
        Markup.button.callback('üìÖ –ó–∞ –ø–µ—Ä–∏–æ–¥', 'admin_export_period'),
        Markup.button.callback('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'admin_export_settings')
      ],
      [
        Markup.button.callback('üîô –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', 'admin_main')
      ]
    ];

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard(keyboard)
    });
  }

  async showNotificationsMenu(ctx) {
    let message = `üîî *–ù–ê–°–¢–†–û–ô–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô*\n\n`;
    message += `–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n`;
    
    Object.entries(this.notificationSettings).forEach(([key, enabled]) => {
      const emoji = enabled ? '‚úÖ' : '‚ùå';
      const name = this.getNotificationName(key);
      message += `${emoji} ${name}\n`;
    });

    const keyboard = [
      [
        Markup.button.callback('üî• –ì–æ—Ä—è—á–∏–µ –ª–∏–¥—ã', 'admin_toggle_hot_notif'),
        Markup.button.callback('‚≠ê –¢–µ–ø–ª—ã–µ –ª–∏–¥—ã', 'admin_toggle_warm_notif')
      ],
      [
        Markup.button.callback('‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω—ã–µ –ª–∏–¥—ã', 'admin_toggle_cold_notif'),
        Markup.button.callback('‚ö†Ô∏è –û—à–∏–±–∫–∏ —Å–∏—Å—Ç–µ–º—ã', 'admin_toggle_errors_notif')
      ],
      [
        Markup.button.callback('üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç', 'admin_toggle_daily_notif'),
        Markup.button.callback('üìà –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç', 'admin_toggle_weekly_notif')
      ],
      [
        Markup.button.callback('üîï –û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ', 'admin_disable_all_notif'),
        Markup.button.callback('üîî –í–∫–ª—é—á–∏—Ç—å –≤—Å–µ', 'admin_enable_all_notif')
      ],
      [
        Markup.button.callback('üîô –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'admin_settings')
      ]
    ];

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard(keyboard)
    });
  }

  async showHelp(ctx) {
    let message = `üÜò *–°–ü–†–ê–í–ö–ê –ü–û –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò*\n\n`;
    
    message += `üìã **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n`;
    message += `‚Ä¢ \`/admin\` - –≥–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å\n`;
    message += `‚Ä¢ \`/stats\` - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n`;
    message += `‚Ä¢ \`/hot_leads\` - –≥–æ—Ä—è—á–∏–µ –ª–∏–¥—ã\n`;
    message += `‚Ä¢ \`/search_lead <–∑–∞–ø—Ä–æ—Å>\` - –ø–æ–∏—Å–∫ –ª–∏–¥–æ–≤\n`;
    message += `‚Ä¢ \`/health\` - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã\n\n`;
    
    message += `üîç **–ü–æ–∏—Å–∫ –ª–∏–¥–æ–≤:**\n`;
    message += `–ú–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å –ø–æ:\n`;
    message += `‚Ä¢ Telegram ID: \`/search_lead 123456\`\n`;
    message += `‚Ä¢ –ò–º–µ–Ω–∏: \`/search_lead –ê–Ω–Ω–∞\`\n`;
    message += `‚Ä¢ –ü—Ä–æ–±–ª–µ–º–µ: \`/search_lead —Å—Ç—Ä–µ—Å—Å\`\n\n`;
    
    message += `üìä **–°–µ–≥–º–µ–Ω—Ç—ã –ª–∏–¥–æ–≤:**\n`;
    message += `‚Ä¢ üî• HOT_LEAD - —Ç—Ä–µ–±—É–µ—Ç —Å—Ä–æ—á–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è\n`;
    message += `‚Ä¢ ‚≠ê WARM_LEAD - –∞–∫—Ç–∏–≤–Ω–æ –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n`;
    message += `‚Ä¢ ‚ùÑÔ∏è COLD_LEAD - —É–º–µ—Ä–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å\n`;
    message += `‚Ä¢ üå± NURTURE_LEAD - –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ\n\n`;
    
    message += `‚ö° **–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**\n`;
    message += `‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n`;
    message += `‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON/CSV\n`;
    message += `‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥ —Å–µ–±—è\n`;
    message += `‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏\n\n`;
    
    message += `üìû **–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**\n`;
    message += `–ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.`;

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard([
        [Markup.button.callback('üìã –ö–æ–º–∞–Ω–¥—ã', 'admin_commands_list')],
        [Markup.button.callback('üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', 'admin_diagnostics')],
        [Markup.button.callback('üîô –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', 'admin_main')]
      ])
    });
  }

  getNotificationName(key) {
    const names = {
      hotLeads: '–ì–æ—Ä—è—á–∏–µ –ª–∏–¥—ã',
      warmLeads: '–¢–µ–ø–ª—ã–µ –ª–∏–¥—ã',
      coldLeads: '–•–æ–ª–æ–¥–Ω—ã–µ –ª–∏–¥—ã',
      systemErrors: '–°–∏—Å—Ç–µ–º–Ω—ã–µ –æ—à–∏–±–∫–∏',
      dailyReport: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç',
      weeklyReport: '–ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç'
    };
    return names[key] || key;
  }

  // ===== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –û–¢–ß–ï–¢–´ =====

  async startScheduledReports() {
    if (!this.notificationSettings.dailyReport) return;

    // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –≤ 20:00
    setInterval(async () => {
      const now = new Date();
      if (now.getHours() === 20 && now.getMinutes() === 0) {
        await this.sendDailyReport();
      }
    }, 60000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

    console.log('‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }

  async sendDailyReport() {
    if (!this.adminId) return;

    try {
      const stats = this.adminNotifications.getStats();
      const today = new Date().toLocaleDateString('ru-RU');
      
      let message = `üìä *–ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–ï–¢*\n`;
      message += `üìÖ ${today}\n\n`;
      
      message += `üë• **–õ–∏–¥—ã –∑–∞ –¥–µ–Ω—å:**\n`;
      message += `‚Ä¢ –í—Å–µ–≥–æ: ${stats.daily_stats?.totalLeads || 0}\n`;
      message += `‚Ä¢ üî• –ì–æ—Ä—è—á–∏–µ: ${stats.daily_stats?.hotLeads || 0}\n`;
      message += `‚Ä¢ ‚≠ê –¢–µ–ø–ª—ã–µ: ${stats.daily_stats?.warmLeads || 0}\n`;
      message += `‚Ä¢ ‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω—ã–µ: ${stats.daily_stats?.coldLeads || 0}\n\n`;
      
      const totalLeads = stats.daily_stats?.totalLeads || 0;
      const hotLeads = stats.daily_stats?.hotLeads || 0;
      const conversion = totalLeads > 0 ? ((hotLeads / totalLeads) * 100).toFixed(1) : 0;
      
      message += `üìà **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**\n`;
      message += `‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –≥–æ—Ä—è—á–∏–µ: ${conversion}%\n`;
      message += `‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª VERSE: ${this.getAverageScore()}/100\n\n`;
      
      message += `üéØ **–°–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:**\n`;
      if (hotLeads > 0) {
        message += `‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å ${hotLeads} –≥–æ—Ä—è—á–∏—Ö –ª–∏–¥–æ–≤\n`;
      }
      if (totalLeads === 0) {
        message += `‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏—á–∏–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ª–∏–¥–æ–≤\n`;
      }
      message += `‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n\n`;
      
      message += `üïê –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç ‚Ä¢ ${new Date().toLocaleTimeString('ru-RU')}`;

      await this.bot.telegram.sendMessage(this.adminId, message, {
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard([
          [Markup.button.callback('üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'admin_stats')],
          [Markup.button.callback('üéõÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'admin_main')]
        ])
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞:', error);
    }
  }

  // ===== –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –ú–ï–¢–û–î–´ –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í =====

  async showLeadsReport(ctx) {
    const leadsData = this.adminNotifications.leadDataStorage || {};
    const analysis = this.analyzeLeadsData(leadsData);

    let message = `üìÑ *–û–¢–ß–ï–¢ –ü–û –õ–ò–î–ê–ú*\n\n`;
    
    // –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    message += `üìä *–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:*\n`;
    message += `‚Ä¢ –í—Å–µ–≥–æ –ª–∏–¥–æ–≤: ${analysis.totalLeads}\n`;
    message += `‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª VERSE: ${analysis.averageScore.toFixed(1)}\n`;
    message += `‚Ä¢ –ü–∏–∫–æ–≤–æ–µ –≤—Ä–µ–º—è: ${analysis.peakHour}:00\n\n`;
    
    // –î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
    const segmentCounts = Object.values(this.adminNotifications.leadDataStorage || {})
      .reduce((acc, lead) => {
        const segment = lead.analysisResult?.segment || 'UNKNOWN';
        acc[segment] = (acc[segment] || 0) + 1;
        return acc;
      }, {});

    message += `üéØ *–ü–û –°–ï–ì–ú–ï–ù–¢–ê–ú:*\n`;
    Object.entries(segmentCounts).forEach(([segment, count]) => {
      const emoji = this.getSegmentEmoji(segment);
      const percentage = analysis.totalLeads > 0 ? ((count / analysis.totalLeads) * 100).toFixed(1) : 0;
      message += `${emoji} ${segment}: ${count} (${percentage}%)\n`;
    });

    message += `\nüìà *–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:*\n`;
    if (segmentCounts.HOT_LEAD > 0) {
      message += `‚Ä¢ –°—Ä–æ—á–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å ${segmentCounts.HOT_LEAD} –≥–æ—Ä—è—á–∏—Ö –ª–∏–¥–æ–≤\n`;
    }
    if (analysis.averageScore < 50) {
      message += `‚Ä¢ –ù–∏–∑–∫–∏–π —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª - –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è\n`;
    }
    if (analysis.totalLeads === 0) {
      message += `‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏—á–∏–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ª–∏–¥–æ–≤\n`;
    }

    await ctx.reply(message, {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard([
        [Markup.button.callback('üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞', 'admin_analytics')],
        [Markup.button.callback('üì§ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞', 'admin_export_report')],
        [Markup.button.callback('üîô –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', 'admin_main')]
      ])
    });
  }

  async showRecentLogs(ctx) {
    let message = `üìã *–ü–û–°–õ–ï–î–ù–ò–ï –õ–û–ì–ò –°–ò–°–¢–ï–ú–´*\n\n`;
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–∑–∞–≥–ª—É—à–∫–∞, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —á–∏—Ç–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤)
    const recentEvents = [
      { time: new Date(), level: 'INFO', message: '–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ' },
      { time: new Date(Date.now() - 300000), level: 'INFO', message: '–ù–æ–≤—ã–π –ª–∏–¥ –ø–æ–ª—É—á–µ–Ω' },
      { time: new Date(Date.now() - 600000), level: 'WARN', message: '–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä' },
      { time: new Date(Date.now() - 900000), level: 'INFO', message: '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞' }
    ];

    recentEvents.forEach((event, index) => {
      const emoji = event.level === 'ERROR' ? '‚ùå' : event.level === 'WARN' ? '‚ö†Ô∏è' : '‚úÖ';
      const timeStr = event.time.toLocaleTimeString('ru-RU');
      message += `${emoji} ${timeStr} [${event.level}]\n`;
      message += `   ${event.message}\n\n`;
    });

    message += `üìù *–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* –ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å–æ–±—ã—Ç–∏—è`;

    await ctx.reply(message, {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard([
        [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏', 'admin_logs')],
        [Markup.button.callback('üì§ –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤', 'admin_export_logs')],
        [Markup.button.callback('üîô –°–∏—Å—Ç–µ–º–∞', 'admin_system')]
      ])
    });
  }

  async restartBot(ctx) {
    let message = `üîÑ *–ü–ï–†–ï–ó–ê–ü–£–°–ö –ë–û–¢–ê*\n\n`;
    message += `‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!** –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞:\n`;
    message += `‚Ä¢ –ü—Ä–µ—Ä–≤–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n`;
    message += `‚Ä¢ –ú–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 10-30 —Å–µ–∫—É–Ω–¥\n`;
    message += `‚Ä¢ –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n\n`;
    message += `ü§î –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞?`;

    await ctx.reply(message, {
      parse_mode: 'Markdown',
      ...Markup.inlineKeyboard([
        [
          Markup.button.callback('‚úÖ –î–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å', 'admin_confirm_restart'),
          Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'admin_main')
        ]
      ])
    });
  }

  async handleRestartConfirm(ctx) {
    await ctx.editMessageText(
      `üîÑ *–ü–ï–†–ï–ó–ê–ü–£–°–ö –ù–ê–ß–ê–õ–°–Ø*\n\n` +
      `‚è≥ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç...\n` +
      `–≠—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 30 —Å–µ–∫—É–Ω–¥.\n\n` +
      `üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è...`,
      { parse_mode: 'Markdown' }
    );

    // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
    setTimeout(() => {
      console.log('üîÑ –ê–¥–º–∏–Ω –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞');
      process.exit(0); // Graceful shutdown, –ø—Ä–æ—Ü–µ—Å—Å-–º–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç
    }, 2000);
  }

  async manageNotifications(ctx) {
    await this.showNotificationsMenu(ctx);
  }

  async exportStats(ctx) {
    try {
      const stats = {
        timestamp: new Date().toISOString(),
        admin_panel: this.exportStats(),
        leads_analytics: this.analyzeLeadsData(this.adminNotifications.leadDataStorage || {}),
        system_health: await this.getSystemHealthData(),
        bot_performance: {
          uptime: process.uptime(),
          memory: process.memoryUsage(),
          leads_count: Object.keys(this.adminNotifications.leadDataStorage || {}).length
        }
      };

      const fs = require('fs');
      const fileName = `stats_export_${new Date().toISOString().split('T')[0]}.json`;
      const filePath = `./temp/${fileName}`;
      
      if (!fs.existsSync('./temp')) {
        fs.mkdirSync('./temp', { recursive: true });
      }
      
      fs.writeFileSync(filePath, JSON.stringify(stats, null, 2), 'utf8');

      await ctx.replyWithDocument(
        { source: filePath },
        {
          caption: `üìä –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n\n‚Ä¢ –î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}\n‚Ä¢ –í—Ä–µ–º—è: ${new Date().toLocaleTimeString('ru-RU')}`,
          ...Markup.inlineKeyboard([
            [Markup.button.callback('üîô –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', 'admin_main')]
          ])
        }
      );

      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        try {
          fs.unlinkSync(filePath);
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', error);
        }
      }, 30000);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
  }

  // ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====

  initialize() {
    this.setupAdminCommands();
    this.setupCallbacks();
    this.startScheduledReports();
    
    console.log('‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    if (this.adminId) {
      setTimeout(async () => {
        try {
          await this.bot.telegram.sendMessage(this.adminId, 
            `üéõÔ∏è *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞*\n\n` +
            `–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n` +
            `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n\n` +
            `‚è∞ ${new Date().toLocaleString('ru-RU')}`, 
            { parse_mode: 'Markdown' }
          );
        } catch (error) {
          console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω—É');
        }
      }, 5000);
    }
  }

  // ===== –≠–ö–°–ü–û–†–¢ –°–¢–ê–¢–ò–°–¢–ò–ö–ò =====

  exportStats() {
    return {
      panel_stats: this.panelStats,
      notification_settings: this.notificationSettings,
      admin_id: this.adminId,
      version: '1.0.0',
      last_updated: new Date().toISOString()
    };
  }
}

module.exports = EnhancedAdminPanel;
