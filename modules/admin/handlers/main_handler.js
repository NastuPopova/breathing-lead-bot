// –§–∞–π–ª: modules/admin/handlers/main_handler.js
// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –±–µ–∑ –æ—à–∏–±–æ–∫ Markdown

const config = require('../../../config');

class MainHandler {
  constructor(bot, adminNotifications) {
    this.bot = bot;
    this.telegramBot = bot.bot;
    this.adminNotifications = adminNotifications;
    this.adminId = config.ADMIN_ID;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    this.mainHandlerStats = {
      totalCommands: 0,
      commandsUsed: {},
      lastCommand: null,
      panelViews: 0,
      modeToggles: 0
    };
  }

  setupCommands() {
    if (!this.adminId) {
      console.log('‚ö†Ô∏è ADMIN_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã');
      return;
    }

    console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥...');
    
    this.telegramBot.command('admin', this.checkAdmin(this.handleMainCommand.bind(this)));
    
    console.log('‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }

  checkAdmin(handler) {
    return async (ctx) => {
      if (ctx.from.id.toString() !== this.adminId) {
        await ctx.reply('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        return;
      }
      
      this.trackCommandUsage(ctx.message.text);
      return handler(ctx);
    };
  }

  /**
   * –ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Å –∫–Ω–æ–ø–∫–æ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
   */
  async handleMainCommand(ctx) {
    console.log(`üéõÔ∏è –ö–æ–º–∞–Ω–¥–∞ /admin –æ—Ç –∞–¥–º–∏–Ω–∞ ${ctx.from.id}`);
    this.mainHandlerStats.panelViews++;
    
    try {
      const stats = this.adminNotifications?.getStats?.() || this.getDefaultStats();
      const currentMode = this.adminNotifications?.getNotificationMode?.() || this.getDefaultMode();
      const uptime = Math.round(process.uptime() / 3600);

      let message = `üéõÔ∏è *–ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–ê–Ø –ü–ê–ù–ï–õ–¨*\n\n`;
      message += `üë®‚Äçüíº –ê–¥–º–∏–Ω: ${ctx.from.first_name}\n`;
      message += `‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${uptime}—á\n`;
      message += `üìä –õ–∏–¥–æ–≤ —Å–µ–≥–æ–¥–Ω—è: ${stats.daily_stats?.totalLeads || 0}\n`;
      message += `üî• –ì–æ—Ä—è—á–∏—Ö: ${stats.daily_stats?.hotLeads || 0}\n\n`;
      
      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∂–∏–º–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      message += `üîî *–†–µ–∂–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:*\n`;
      message += `${currentMode.emoji} ${currentMode.description}\n\n`;
      
      message += `üïê *–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*\n`;
      message += `‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ª–∏–¥: ${this.getLastLeadTime()}\n`;
      message += `‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏: ${this.formatTime(this.mainHandlerStats.lastCommand?.timestamp)}\n\n`;
      
      message += `‚ö° *–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*`;

      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üî• –ì–æ—Ä—è—á–∏–µ –ª–∏–¥—ã', callback_data: 'admin_hot_leads' },
            { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' }
          ],
          [
            { text: 'üìã –í—Å–µ –ª–∏–¥—ã —Å–µ–≥–æ–¥–Ω—è', callback_data: 'admin_today_leads' },
            { text: 'üîç –ü–æ–∏—Å–∫ –ª–∏–¥–∞', callback_data: 'admin_search' }
          ],
          [
            { text: 'üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞', callback_data: 'admin_analytics' },
            { text: 'üîß –°–∏—Å—Ç–µ–º–∞', callback_data: 'admin_system' }
          ],
          [
            { text: currentMode.buttonText, callback_data: 'admin_toggle_notifications' },
            { text: 'üß™ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: 'admin_test_notification' }
          ],
          [
            { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'admin_settings' },
            { text: 'üì§ –≠–∫—Å–ø–æ—Ä—Ç', callback_data: 'admin_export' }
          ],
          [
            { text: 'üÜò –ü–æ–º–æ—â—å', callback_data: 'admin_help' },
            { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_refresh' }
          ]
        ]
      };

      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handleMainCommand:', error);
      this.mainHandlerStats.errors = (this.mainHandlerStats.errors || 0) + 1;
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async handleToggleNotifications(ctx) {
    console.log(`üîî –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∞ ${ctx.from.id}`);
    this.mainHandlerStats.modeToggles++;
    
    try {
      if (!this.adminNotifications) {
        await ctx.answerCbQuery('–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        return;
      }

      const oldMode = this.adminNotifications.getNotificationMode();
      const newMode = this.adminNotifications.toggleNotificationMode();
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–Ω—ã –¥–≤–æ–π–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ
      let message = `üîÑ *–†–ï–ñ–ò–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –ò–ó–ú–ï–ù–ï–ù*\n\n`;
      message += `üì§ –ë—ã–ª–æ: ${oldMode.emoji} ${oldMode.mode}\n`;
      message += `üì• –°—Ç–∞–ª–æ: ${newMode.emoji} ${newMode.mode}\n\n`;
      message += `üìù ${newMode.description}\n\n`;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —Ä–µ–∂–∏–º–∞–º
      message += `üí° *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:*\n`;
      message += `üîá –¢–∏—Ö–∏–π - –Ω–∏–∫–∞–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n`;
      message += `üîí –§–∏–ª—å—Ç—Ä - —Ç–æ–ª—å–∫–æ –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n`;
      message += `üß™ –¢–µ—Å—Ç - –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–≤–∫–ª—é—á–∞—è —Å–≤–æ–∏)\n`;
      message += `üîì –í—Å–µ - –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤\n\n`;
      
      message += `üîÑ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –µ—â–µ —Ä–∞–∑ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–∂–∏–º–∞`;

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: newMode.buttonText, callback_data: 'admin_toggle_notifications' },
              { text: 'üß™ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: 'admin_test_notification' }
            ],
            [
              { text: 'üìä –°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', callback_data: 'admin_notification_status' },
              { text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }
            ]
          ]
        }
      });

      await ctx.answerCbQuery(`${newMode.emoji} ${newMode.mode}`);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handleToggleNotifications:', error);
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞');
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  async handleTestNotification(ctx) {
    console.log(`üß™ –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞ ${ctx.from.id}`);
    
    try {
      if (!this.adminNotifications) {
        await ctx.answerCbQuery('–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        return;
      }

      await ctx.answerCbQuery('–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...');

      await this.adminNotifications.sendTestNotification();

      const message = `üß™ *–¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û–¢–ü–†–ê–í–õ–ï–ù–û*\n\n` +
        `‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á–∞—Ç - –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–π—Ç–∏ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n` +
        `üìä –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: ${this.adminNotifications.getNotificationMode().emoji} ${this.adminNotifications.getNotificationMode().mode}\n\n` +
        `üí° –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏—à–ª–æ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:\n` +
        `‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n` +
        `‚Ä¢ ADMIN_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è\n` +
        `‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API`;

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üîÑ –ï—â–µ —Ç–µ—Å—Ç', callback_data: 'admin_test_notification' },
              { text: 'üîî –†–µ–∂–∏–º', callback_data: 'admin_toggle_notifications' }
            ],
            [
              { text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }
            ]
          ]
        }
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handleTestNotification:', error);
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
      
      const errorMessage = `‚ùå *–û–®–ò–ë–ö–ê –¢–ï–°–¢–û–í–û–ì–û –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø*\n\n` +
        `üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n` +
        `üìù –û—à–∏–±–∫–∞: ${error.message}\n\n` +
        `üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n` +
        `‚Ä¢ ADMIN_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n` +
        `‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å Telegram API\n` +
        `‚Ä¢ –û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`;

      await ctx.editMessageText(errorMessage, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', callback_data: 'admin_detailed_diagnostics' },
              { text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }
            ]
          ]
        }
      });
    }
  }

  /**
   * –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async handleNotificationStatus(ctx) {
    console.log(`üìä –°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∞ ${ctx.from.id}`);
    
    try {
      if (!this.adminNotifications) {
        await ctx.editMessageText('‚ùå –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        return;
      }

      const mode = this.adminNotifications.getNotificationMode();
      const stats = this.adminNotifications.getStats();
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–Ω—ã –¥–≤–æ–π–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–∏
      let message = `üìä *–î–ï–¢–ê–õ–¨–ù–´–ô –°–¢–ê–¢–£–° –£–í–ï–î–û–ú–õ–ï–ù–ò–ô*\n\n`;
      
      message += `${mode.emoji} *–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º:* ${mode.mode}\n`;
      message += `üìù ${mode.description}\n\n`;
      
      message += `‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏:*\n`;
      message += `‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã: ${stats.notifications_enabled ? '‚úÖ' : '‚ùå'}\n`;
      message += `‚Ä¢ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: ${stats.settings.test_mode ? '‚úÖ' : '‚ùå'}\n`;
      message += `‚Ä¢ –§–∏–ª—å—Ç—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${stats.settings.filter_admin_responses ? '‚úÖ' : '‚ùå'}\n`;
      message += `‚Ä¢ –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º: ${stats.settings.silent_mode ? '‚úÖ' : '‚ùå'}\n`;
      message += `‚Ä¢ Admin ID: ${stats.admin_id || '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n\n`;
      
      message += `üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n`;
      message += `‚Ä¢ –õ–∏–¥–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: ${stats.stored_leads_count}\n`;
      message += `‚Ä¢ –í—Å–µ–≥–æ —Å–µ–≥–æ–¥–Ω—è: ${stats.daily_stats.totalLeads}\n`;
      message += `‚Ä¢ üî• –ì–æ—Ä—è—á–∏—Ö: ${stats.daily_stats.hotLeads}\n`;
      message += `‚Ä¢ ‚≠ê –¢–µ–ø–ª—ã—Ö: ${stats.daily_stats.warmLeads}\n`;
      message += `‚Ä¢ ‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω—ã—Ö: ${stats.daily_stats.coldLeads}\n`;
      message += `‚Ä¢ üå± –í–∑—Ä–∞—â–∏–≤–∞–Ω–∏–µ: ${stats.daily_stats.nurtureLeads}\n\n`;
      
      if (stats.analytics) {
        message += `üìä *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:*\n`;
        message += `‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${stats.analytics.notifications?.totalSent || 0}\n`;
        message += `‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: ${stats.analytics.notifications?.successful || 0}\n`;
        message += `‚Ä¢ –û—à–∏–±–æ–∫: ${stats.analytics.notifications?.failed || 0}\n`;
      }

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º', callback_data: 'admin_toggle_notifications' },
              { text: 'üß™ –¢–µ—Å—Ç', callback_data: 'admin_test_notification' }
            ],
            [
              { text: 'üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞', callback_data: 'admin_analytics' },
              { text: 'üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', callback_data: 'admin_detailed_diagnostics' }
            ],
            [
              { text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }
            ]
          ]
        }
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handleNotificationStatus:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞
   */
  async handleCommand(ctx, commandName) {
    console.log(`üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã: ${commandName}`);
    
    try {
      switch (commandName) {
        case 'admin':
          await this.handleMainCommand(ctx);
          break;
        default:
          console.warn('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞:', commandName);
          await ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã:', error);
      this.mainHandlerStats.errors = (this.mainHandlerStats.errors || 0) + 1;
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã');
    }
  }

  // ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====

  trackCommandUsage(command) {
    this.mainHandlerStats.totalCommands++;
    this.mainHandlerStats.lastCommand = {
      command: command,
      timestamp: new Date().toISOString()
    };
    
    if (!this.mainHandlerStats.commandsUsed[command]) {
      this.mainHandlerStats.commandsUsed[command] = 0;
    }
    this.mainHandlerStats.commandsUsed[command]++;
  }

  getDefaultStats() {
    return {
      daily_stats: { 
        totalLeads: 0, 
        hotLeads: 0, 
        warmLeads: 0, 
        coldLeads: 0, 
        nurtureLeads: 0 
      }
    };
  }

  getDefaultMode() {
    return {
      mode: 'filtered',
      description: '–§–∏–ª—å—Ç—Ä –≤–∫–ª—é—á–µ–Ω - —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è',
      emoji: 'üîí',
      buttonText: 'üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º'
    };
  }

  getLastLeadTime() {
    const leadsData = Object.values(this.adminNotifications?.leadDataStorage || {});
    if (!leadsData.length) return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
    
    const latest = leadsData.reduce((latest, lead) => {
      const leadTime = new Date(lead.timestamp || 0);
      const latestTime = new Date(latest.timestamp || 0);
      return leadTime > latestTime ? lead : latest;
    }, leadsData[0]);
    
    return this.getTimeAgo(latest.timestamp);
  }

  getTimeAgo(timestamp) {
    if (!timestamp) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    
    const now = new Date();
    const time = new Date(timestamp);
    const diffMs = now - time;
    const diffMins = Math.floor(diffMs / 60000);
    
    if (diffMins < 1) return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
    if (diffMins < 60) return `${diffMins} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    
    const diffHours = Math.floor(diffMins / 60);
    if (diffHours < 24) return `${diffHours} —á –Ω–∞–∑–∞–¥`;
    
    const diffDays = Math.floor(diffHours / 24);
    return `${diffDays} –¥–Ω –Ω–∞–∑–∞–¥`;
  }

  formatTime(timestamp) {
    if (!timestamp) return '–ù–∏–∫–æ–≥–¥–∞';
    return new Date(timestamp).toLocaleString('ru-RU');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
   */
  getStats() {
    return {
      name: 'MainHandler',
      total_commands: this.mainHandlerStats.totalCommands,
      commands_used: this.mainHandlerStats.commandsUsed,
      last_command: this.mainHandlerStats.lastCommand,
      panel_views: this.mainHandlerStats.panelViews,
      mode_toggles: this.mainHandlerStats.modeToggles,
      errors: this.mainHandlerStats.errors || 0,
      uptime: this.formatUptime(process.uptime()),
      memory_usage: this.getMemoryUsage(),
      last_updated: new Date().toISOString()
    };
  }

  formatUptime(seconds) {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    
    if (hours > 24) {
      const days = Math.floor(hours / 24);
      const remainingHours = hours % 24;
      return `${days}–¥ ${remainingHours}—á ${minutes}–º`;
    }
    
    return `${hours}—á ${minutes}–º`;
  }

  getMemoryUsage() {
    return Math.round(process.memoryUsage().heapUsed / 1024 / 1024);
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  cleanup() {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ MainHandler...');
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:', JSON.stringify(this.getStats(), null, 2));
    console.log('‚úÖ MainHandler –æ—á–∏—â–µ–Ω');
  }
}

module.exports = MainHandler;
