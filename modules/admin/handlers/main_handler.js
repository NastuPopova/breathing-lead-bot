// –§–∞–π–ª: modules/admin/handlers/main_handler.js
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–ª–∞–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ –∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥

const config = require('../../../config');

class MainHandler {
  constructor(bot, adminNotifications) {
    this.bot = bot;
    this.telegramBot = bot.bot;
    this.adminNotifications = adminNotifications;
    this.adminId = config.ADMIN_ID;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    this.mainHandlerStats = {
      totalCommands: 0,
      commandsUsed: {},
      lastCommand: null,
      panelViews: 0
    };
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
   */
  setupCommands() {
    if (!this.adminId) {
      console.log('‚ö†Ô∏è ADMIN_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã');
      return;
    }

    console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥...');
    
    // –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    this.telegramBot.command('admin', this.checkAdmin(this.handleMainCommand.bind(this)));
    
    console.log('‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
   */
  checkAdmin(handler) {
    return async (ctx) => {
      if (ctx.from.id.toString() !== this.adminId) {
        await ctx.reply('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        return;
      }
      
      this.trackCommandUsage(ctx.message.text);
      return handler(ctx);
    };
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã /admin
   */
  async handleMainCommand(ctx) {
    console.log(`üéõÔ∏è –ö–æ–º–∞–Ω–¥–∞ /admin –æ—Ç –∞–¥–º–∏–Ω–∞ ${ctx.from.id}`);
    this.mainHandlerStats.panelViews++;
    
    try {
      const stats = this.adminNotifications?.getStats?.() || this.getDefaultStats();
      const uptime = Math.round(process.uptime() / 3600);

      let message = `üéõÔ∏è *–ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–ê–Ø –ü–ê–ù–ï–õ–¨*\n\n`;
      message += `üë®‚Äçüíº –ê–¥–º–∏–Ω: ${ctx.from.first_name}\n`;
      message += `‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${uptime}—á\n`;
      message += `üìä –õ–∏–¥–æ–≤ —Å–µ–≥–æ–¥–Ω—è: ${stats.daily_stats?.totalLeads || 0}\n`;
      message += `üî• –ì–æ—Ä—è—á–∏—Ö: ${stats.daily_stats?.hotLeads || 0}\n\n`;
      
      message += `üïê *–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*\n`;
      message += `‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ª–∏–¥: ${this.getLastLeadTime()}\n`;
      message += `‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏: ${this.formatTime(this.mainHandlerStats.lastCommand?.timestamp)}\n\n`;
      
      message += `‚ö° *–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*`;

      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üî• –ì–æ—Ä—è—á–∏–µ –ª–∏–¥—ã', callback_data: 'admin_hot_leads' },
            { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' }
          ],
          [
            { text: 'üìã –í—Å–µ –ª–∏–¥—ã —Å–µ–≥–æ–¥–Ω—è', callback_data: 'admin_today_leads' },
            { text: 'üîç –ü–æ–∏—Å–∫ –ª–∏–¥–∞', callback_data: 'admin_search' }
          ],
          [
            { text: 'üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞', callback_data: 'admin_analytics' },
            { text: 'üîß –°–∏—Å—Ç–µ–º–∞', callback_data: 'admin_system' }
          ],
          [
            { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'admin_settings' },
            { text: 'üì§ –≠–∫—Å–ø–æ—Ä—Ç', callback_data: 'admin_export' }
          ],
          [
            { text: 'üÜò –ü–æ–º–æ—â—å', callback_data: 'admin_help' },
            { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_refresh' }
          ]
        ]
      };

      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handleMainCommand:', error);
      this.mainHandlerStats.errors = (this.mainHandlerStats.errors || 0) + 1;
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞
   */
  async handleCommand(ctx, commandName) {
    console.log(`üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã: ${commandName}`);
    
    try {
      switch (commandName) {
        case 'admin':
          await this.handleMainCommand(ctx);
          break;
        default:
          console.warn('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞:', commandName);
          await ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã:', error);
      this.mainHandlerStats.errors = (this.mainHandlerStats.errors || 0) + 1;
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã');
    }
  }

  // ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====

  trackCommandUsage(command) {
    this.mainHandlerStats.totalCommands++;
    this.mainHandlerStats.lastCommand = {
      command: command,
      timestamp: new Date().toISOString()
    };
    
    if (!this.mainHandlerStats.commandsUsed[command]) {
      this.mainHandlerStats.commandsUsed[command] = 0;
    }
    this.mainHandlerStats.commandsUsed[command]++;
  }

  getDefaultStats() {
    return {
      daily_stats: { 
        totalLeads: 0, 
        hotLeads: 0, 
        warmLeads: 0, 
        coldLeads: 0, 
        nurtureLeads: 0 
      }
    };
  }

  getLastLeadTime() {
    const leadsData = Object.values(this.adminNotifications?.leadDataStorage || {});
    if (!leadsData.length) return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
    
    const latest = leadsData.reduce((latest, lead) => {
      const leadTime = new Date(lead.timestamp || 0);
      const latestTime = new Date(latest.timestamp || 0);
      return leadTime > latestTime ? lead : latest;
    }, leadsData[0]);
    
    return this.getTimeAgo(latest.timestamp);
  }

  getTimeAgo(timestamp) {
    if (!timestamp) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    
    const now = new Date();
    const time = new Date(timestamp);
    const diffMs = now - time;
    const diffMins = Math.floor(diffMs / 60000);
    
    if (diffMins < 1) return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
    if (diffMins < 60) return `${diffMins} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    
    const diffHours = Math.floor(diffMins / 60);
    if (diffHours < 24) return `${diffHours} —á –Ω–∞–∑–∞–¥`;
    
    const diffDays = Math.floor(diffHours / 24);
    return `${diffDays} –¥–Ω –Ω–∞–∑–∞–¥`;
  }

  formatTime(timestamp) {
    if (!timestamp) return '–ù–∏–∫–æ–≥–¥–∞';
    return new Date(timestamp).toLocaleString('ru-RU');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
   */
  getStats() {
    return {
      name: 'MainHandler',
      total_commands: this.mainHandlerStats.totalCommands,
      commands_used: this.mainHandlerStats.commandsUsed,
      last_command: this.mainHandlerStats.lastCommand,
      panel_views: this.mainHandlerStats.panelViews,
      errors: this.mainHandlerStats.errors || 0,
      uptime: this.formatUptime(process.uptime()),
      memory_usage: this.getMemoryUsage(),
      last_updated: new Date().toISOString()
    };
  }

  formatUptime(seconds) {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    
    if (hours > 24) {
      const days = Math.floor(hours / 24);
      const remainingHours = hours % 24;
      return `${days}–¥ ${remainingHours}—á ${minutes}–º`;
    }
    
    return `${hours}—á ${minutes}–º`;
  }

  getMemoryUsage() {
    return Math.round(process.memoryUsage().heapUsed / 1024 / 1024);
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  cleanup() {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ MainHandler...');
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:', JSON.stringify(this.getStats(), null, 2));
    console.log('‚úÖ MainHandler –æ—á–∏—â–µ–Ω');
  }
}

module.exports = MainHandler;