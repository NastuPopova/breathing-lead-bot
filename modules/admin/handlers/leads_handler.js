// –§–∞–π–ª: modules/admin/handlers/leads_handler.js
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–∏–¥–∞–º–∏

const config = require('../../../config');

class LeadsHandler {
  constructor(bot, adminNotifications) {
    this.bot = bot;
    this.telegramBot = bot.bot;
    this.adminNotifications = adminNotifications;
    this.adminId = config.ADMIN_ID;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥ —Ä–∞–±–æ—Ç—ã —Å –ª–∏–¥–∞–º–∏
    this.leadsHandlerStats = {
      totalCommands: 0,
      commandsUsed: {},
      lastCommand: null,
      leadsProcessed: new Set(),
      searchQueries: 0
    };
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–∏–¥–∞–º–∏
   */
  setupCommands() {
    if (!this.adminId) {
      console.log('‚ö†Ô∏è ADMIN_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∫–æ–º–∞–Ω–¥—ã –ª–∏–¥–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω—ã');
      return;
    }

    console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ —Ä–∞–±–æ—Ç—ã —Å –ª–∏–¥–∞–º–∏...');
    
    this.telegramBot.command('hot_leads', this.checkAdmin(this.handleHotLeadsCommand.bind(this)));
    this.telegramBot.command('today_leads', this.checkAdmin(this.handleTodayLeadsCommand.bind(this)));
    this.telegramBot.command('search_lead', this.checkAdmin(this.handleSearchLeadCommand.bind(this)));
    
    console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç—ã —Å –ª–∏–¥–∞–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
   */
  checkAdmin(handler) {
    return async (ctx) => {
      if (ctx.from.id.toString() !== this.adminId) {
        await ctx.reply('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        return;
      }
      
      this.trackLeadsUsage(ctx.message.text);
      return handler(ctx);
    };
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /hot_leads
   */
  async handleHotLeadsCommand(ctx) {
    console.log(`üî• –ö–æ–º–∞–Ω–¥–∞ /hot_leads –æ—Ç –∞–¥–º–∏–Ω–∞ ${ctx.from.id}`);
    
    try {
      if (!this.adminNotifications.leadDataStorage) {
        console.warn('‚ö†Ô∏è leadDataStorage –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
        this.adminNotifications.leadDataStorage = {};
      }

      const leads = Object.values(this.adminNotifications.leadDataStorage || {})
        .filter(lead => lead.analysisResult?.segment === 'HOT_LEAD')
        .sort((a, b) => new Date(b.timestamp || 0) - new Date(a.timestamp || 0))
        .slice(0, 10);

      if (!leads.length) {
        await ctx.reply('‚úÖ –ù–µ—Ç –≥–æ—Ä—è—á–∏—Ö –ª–∏–¥–æ–≤', {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_hot_leads' }],
              [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
            ]
          }
        });
        return;
      }

      let message = `üî• *–ì–û–†–Ø–ß–ò–ï –õ–ò–î–´ (${leads.length})*\n\n`;
      
      leads.forEach((lead, index) => {
        const user = lead.userInfo;
        const score = lead.analysisResult?.scores?.total || 0;
        const timeAgo = this.getTimeAgo(lead.timestamp);
        
        message += `${index + 1}. **${user?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}**\n`;
        message += `   üÜî ID: \`${user?.telegram_id}\`\n`;
        message += `   üìä –ë–∞–ª–ª: ${score}/100\n`;
        message += `   ‚è∞ ${timeAgo}\n`;
        message += `   üéØ ${this.translateIssue(lead.analysisResult?.primaryIssue)}\n\n`;
      });

      // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ
      leads.forEach(lead => {
        if (lead.userInfo?.telegram_id) {
          this.leadsHandlerStats.leadsProcessed.add(lead.userInfo.telegram_id);
        }
      });

      const keyboard = {
        inline_keyboard: [
          [{ text: 'üìû –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ—Ö', callback_data: 'admin_process_all_hot' }],
          [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_hot_leads' }],
          [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
        ]
      };

      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handleHotLeadsCommand:', error);
      this.leadsHandlerStats.errors = (this.leadsHandlerStats.errors || 0) + 1;
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä—è—á–∏—Ö –ª–∏–¥–æ–≤');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /today_leads
   */
  async handleTodayLeadsCommand(ctx) {
    console.log(`üìã –ö–æ–º–∞–Ω–¥–∞ /today_leads –æ—Ç –∞–¥–º–∏–Ω–∞ ${ctx.from.id}`);
    
    try {
      const today = new Date().toDateString();
      const leads = Object.values(this.adminNotifications.leadDataStorage || {})
        .filter(lead => {
          const leadDate = lead.timestamp ? new Date(lead.timestamp).toDateString() : null;
          return leadDate === today;
        })
        .sort((a, b) => new Date(b.timestamp || 0) - new Date(a.timestamp || 0));

      if (!leads.length) {
        await ctx.reply('üìã *–õ–ò–î–´ –°–ï–ì–û–î–ù–Ø*\n\n‚úÖ –°–µ–≥–æ–¥–Ω—è –ª–∏–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç', {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_today_leads' }],
              [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
            ]
          }
        });
        return;
      }

      let message = `üìã *–õ–ò–î–´ –°–ï–ì–û–î–ù–Ø (${leads.length})*\n\n`;
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
      const bySegment = leads.reduce((acc, lead) => {
        const segment = lead.analysisResult?.segment || 'UNKNOWN';
        if (!acc[segment]) acc[segment] = [];
        acc[segment].push(lead);
        return acc;
      }, {});

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
      message += `üìä *–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï:*\n`;
      Object.entries(bySegment).forEach(([segment, segmentLeads]) => {
        const emoji = this.getSegmentEmoji(segment);
        const percentage = ((segmentLeads.length / leads.length) * 100).toFixed(1);
        message += `${emoji} ${segment}: ${segmentLeads.length} (${percentage}%)\n`;
      });
      message += `\n`;

      // –î–µ—Ç–∞–ª–∏ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
      Object.entries(bySegment).forEach(([segment, segmentLeads]) => {
        const emoji = this.getSegmentEmoji(segment);
        message += `${emoji} **${segment}** (${segmentLeads.length}):\n`;
        
        segmentLeads.slice(0, 3).forEach(lead => {
          const user = lead.userInfo;
          const time = new Date(lead.timestamp).toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit'
          });
          message += `   ‚Ä¢ ${user?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (${time})\n`;
        });
        
        if (segmentLeads.length > 3) {
          message += `   ‚Ä¢ ... –∏ –µ—â–µ ${segmentLeads.length - 3}\n`;
        }
        message += `\n`;
      });

      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üî• –¢–æ–ª—å–∫–æ –≥–æ—Ä—è—á–∏–µ', callback_data: 'admin_hot_leads' },
            { text: 'üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–Ω—è', callback_data: 'admin_day_analytics' }
          ],
          [
            { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_today_leads' },
            { text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }
          ]
        ]
      };

      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handleTodayLeadsCommand:', error);
      this.leadsHandlerStats.errors = (this.leadsHandlerStats.errors || 0) + 1;
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏–¥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /search_lead
   */
  async handleSearchLeadCommand(ctx) {
    console.log(`üîç –ö–æ–º–∞–Ω–¥–∞ /search_lead –æ—Ç –∞–¥–º–∏–Ω–∞ ${ctx.from.id}`);
    this.leadsHandlerStats.searchQueries++;
    
    const searchTerm = ctx.message.text.split(' ').slice(1).join(' ');
    
    if (!searchTerm) {
      await ctx.reply(
        `üîç *–ü–û–ò–°–ö –õ–ò–î–û–í*\n\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: \`/search_lead <–∑–∞–ø—Ä–æ—Å>\`\n\n` +
        `–ú–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å –ø–æ:\n` +
        `‚Ä¢ Telegram ID\n` +
        `‚Ä¢ –ò–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n` +
        `‚Ä¢ Username (–±–µ–∑ @)\n` +
        `‚Ä¢ –ü—Ä–æ–±–ª–µ–º–µ\n` +
        `‚Ä¢ –°–µ–≥–º–µ–Ω—Ç—É\n\n` +
        `–ü—Ä–∏–º–µ—Ä—ã:\n` +
        `\`/search_lead 123456789\`\n` +
        `\`/search_lead –ê–Ω–Ω–∞\`\n` +
        `\`/search_lead —Å—Ç—Ä–µ—Å—Å\`\n` +
        `\`/search_lead HOT_LEAD\``,
        { parse_mode: 'Markdown' }
      );
      return;
    }

    try {
      const results = this.performLeadSearch(searchTerm);
      
      if (!results.length) {
        await ctx.reply(
          `‚ùå *–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ*\n\n–ü–æ –∑–∞–ø—Ä–æ—Å—É "${searchTerm}" –ª–∏–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n` +
          `üí° *–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:*\n` +
          `‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n` +
          `‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã\n` +
          `‚Ä¢ –ü–æ–∏—Å–∫–∞—Ç—å –ø–æ ID –∏–ª–∏ username`,
          {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
              ]
            }
          }
        );
        return;
      }

      let message = `üîç *–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê*\n`;
      message += `–ó–∞–ø—Ä–æ—Å: "${searchTerm}"\n`;
      message += `–ù–∞–π–¥–µ–Ω–æ: ${results.length}\n\n`;

      results.slice(0, 5).forEach((lead, index) => {
        const user = lead.userInfo;
        const segment = lead.analysisResult?.segment || 'UNKNOWN';
        const timeAgo = this.getTimeAgo(lead.timestamp);
        const score = lead.analysisResult?.scores?.total || 0;
        
        message += `${index + 1}. **${user?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}**\n`;
        message += `   üÜî ID: \`${user?.telegram_id}\`\n`;
        message += `   üìä –°–µ–≥–º–µ–Ω—Ç: ${this.getSegmentEmoji(segment)} ${segment}\n`;
        message += `   üéØ –ë–∞–ª–ª: ${score}/100\n`;
        message += `   ‚è∞ ${timeAgo}\n\n`;
      });

      if (results.length > 5) {
        message += `... –∏ –µ—â–µ ${results.length - 5} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n\n`;
        message += `üìã –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å`;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∏—Å–∫–∞
      message += `\nüîç *–ü–æ–∏—Å–∫ #${this.leadsHandlerStats.searchQueries}*`;

      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data: 'admin_search' }],
            [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
          ]
        }
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handleSearchLeadCommand:', error);
      this.leadsHandlerStats.errors = (this.leadsHandlerStats.errors || 0) + 1;
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ª–∏–¥–æ–≤');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞
   */
  async handleCommand(ctx, commandName) {
    console.log(`üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç—ã —Å –ª–∏–¥–∞–º–∏: ${commandName}`);
    
    try {
      switch (commandName) {
        case 'hot_leads':
          await this.handleHotLeadsCommand(ctx);
          break;
        case 'today_leads':
          await this.handleTodayLeadsCommand(ctx);
          break;
        case 'search_lead':
          await this.handleSearchLeadCommand(ctx);
          break;
        default:
          console.warn('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ª–∏–¥–æ–≤:', commandName);
          await ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –ª–∏–¥–æ–≤:', error);
      this.leadsHandlerStats.errors = (this.leadsHandlerStats.errors || 0) + 1;
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã');
    }
  }

  // ===== –ü–û–ò–°–ö –ò –ê–ù–ê–õ–ò–¢–ò–ö–ê =====

  performLeadSearch(searchTerm) {
    const leads = Object.values(this.adminNotifications.leadDataStorage || {});
    const term = searchTerm.toLowerCase();

    return leads.filter(lead => {
      const user = lead.userInfo || {};
      const answers = lead.surveyAnswers || {};
      const analysis = lead.analysisResult || {};

      // –ü–æ–∏—Å–∫ –ø–æ ID
      if (user.telegram_id && user.telegram_id.toString().includes(term)) {
        return true;
      }

      // –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
      if (user.first_name && user.first_name.toLowerCase().includes(term)) {
        return true;
      }

      // –ü–æ–∏—Å–∫ –ø–æ username
      if (user.username && user.username.toLowerCase().includes(term)) {
        return true;
      }

      // –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–±–ª–µ–º–µ
      if (analysis.primaryIssue && analysis.primaryIssue.toLowerCase().includes(term)) {
        return true;
      }

      // –ü–æ–∏—Å–∫ –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É
      if (analysis.segment && analysis.segment.toLowerCase().includes(term)) {
        return true;
      }

      // –ü–æ–∏—Å–∫ –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É –ø—Ä–æ–±–ª–µ–º—ã
      const translatedIssue = this.translateIssue(analysis.primaryIssue);
      if (translatedIssue && translatedIssue.toLowerCase().includes(term)) {
        return true;
      }

      return false;
    }).sort((a, b) => {
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (—Å–Ω–∞—á–∞–ª–∞ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è ID)
      const aUser = a.userInfo || {};
      const bUser = b.userInfo || {};
      
      if (aUser.telegram_id && aUser.telegram_id.toString() === term) return -1;
      if (bUser.telegram_id && bUser.telegram_id.toString() === term) return 1;
      
      // –ó–∞—Ç–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
      return new Date(b.timestamp || 0) - new Date(a.timestamp || 0);
    });
  }

// ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====

  trackLeadsUsage(command) {
    this.leadsHandlerStats.totalCommands++;
    this.leadsHandlerStats.lastCommand = {
      command: command,
      timestamp: new Date().toISOString()
    };
    
    if (!this.leadsHandlerStats.commandsUsed[command]) {
      this.leadsHandlerStats.commandsUsed[command] = 0;
    }
    this.leadsHandlerStats.commandsUsed[command]++;
  }

  getTimeAgo(timestamp) {
    if (!timestamp) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    
    const now = new Date();
    const time = new Date(timestamp);
    const diffMs = now - time;
    const diffMins = Math.floor(diffMs / 60000);
    
    if (diffMins < 1) return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
    if (diffMins < 60) return `${diffMins} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    
    const diffHours = Math.floor(diffMins / 60);
    if (diffHours < 24) return `${diffHours} —á –Ω–∞–∑–∞–¥`;
    
    const diffDays = Math.floor(diffHours / 24);
    return `${diffDays} –¥–Ω –Ω–∞–∑–∞–¥`;
  }

  getSegmentEmoji(segment) {
    const emojis = {
      'HOT_LEAD': 'üî•',
      'WARM_LEAD': '‚≠ê',
      'COLD_LEAD': '‚ùÑÔ∏è',
      'NURTURE_LEAD': 'üå±'
    };
    return emojis[segment] || '‚ùì';
  }

  translateIssue(issue) {
    const translations = {
      'chronic_stress': '–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç—Ä–µ—Å—Å',
      'anxiety': '–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å',
      'insomnia': '–ë–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞',
      'breathing_issues': '–ü—Ä–æ–±–ª–µ–º—ã —Å –¥—ã—Ö–∞–Ω–∏–µ–º',
      'high_pressure': '–í—ã—Å–æ–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ',
      'fatigue': '–£—Å—Ç–∞–ª–æ—Å—Ç—å',
      'hyperactivity': '–ì–∏–ø–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
      'sleep_problems': '–ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–Ω–æ–º',
      'tantrums': '–ß–∞—Å—Ç—ã–µ –∏—Å—Ç–µ—Ä–∏–∫–∏',
      'nightmares': '–ö–æ—à–º–∞—Ä—ã',
      'separation_anxiety': '–°—Ç—Ä–∞—Ö —Ä–∞–∑–ª—É–∫–∏',
      'social_difficulties': '–°–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ –æ–±—â–µ–Ω–∏–∏',
      'aggression': '–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ'
    };
    return translations[issue] || issue || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
  }

  formatUptime(seconds) {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    
    if (hours > 24) {
      const days = Math.floor(hours / 24);
      const remainingHours = hours % 24;
      return `${days}–¥ ${remainingHours}—á ${minutes}–º`;
    }
    
    return `${hours}—á ${minutes}–º`;
  }

  getMemoryUsage() {
    return Math.round(process.memoryUsage().heapUsed / 1024 / 1024);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ª–∏–¥–∞–º
   */
  getLeadsAnalytics() {
    const leads = Object.values(this.adminNotifications.leadDataStorage || {});
    
    const analytics = {
      total_leads: leads.length,
      by_segment: {},
      by_hour: {},
      by_day: {},
      search_queries: this.leadsHandlerStats.searchQueries,
      processed_leads: this.leadsHandlerStats.leadsProcessed.size
    };

    // –ê–Ω–∞–ª–∏–∑ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
    leads.forEach(lead => {
      const segment = lead.analysisResult?.segment || 'UNKNOWN';
      analytics.by_segment[segment] = (analytics.by_segment[segment] || 0) + 1;

      // –ê–Ω–∞–ª–∏–∑ –ø–æ —á–∞—Å–∞–º
      if (lead.timestamp) {
        const hour = new Date(lead.timestamp).getHours();
        analytics.by_hour[hour] = (analytics.by_hour[hour] || 0) + 1;

        // –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–Ω—è–º
        const day = new Date(lead.timestamp).toDateString();
        analytics.by_day[day] = (analytics.by_day[day] || 0) + 1;
      }
    });

    return analytics;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø –ø—Ä–æ–±–ª–µ–º –ª–∏–¥–æ–≤
   */
  getTopIssues(limit = 5) {
    const leads = Object.values(this.adminNotifications.leadDataStorage || {});
    const issueCounts = {};

    leads.forEach(lead => {
      const issue = lead.analysisResult?.primaryIssue;
      if (issue) {
        issueCounts[issue] = (issueCounts[issue] || 0) + 1;
      }
    });

    return Object.entries(issueCounts)
      .map(([issue, count]) => ({
        issue: issue,
        translated: this.translateIssue(issue),
        count: count,
        percentage: leads.length > 0 ? ((count / leads.length) * 100).toFixed(1) : 0
      }))
      .sort((a, b) => b.count - a.count)
      .slice(0, limit);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
   */
  getConversionStats() {
    const leads = Object.values(this.adminNotifications.leadDataStorage || {});
    const totalLeads = leads.length;
    
    if (totalLeads === 0) {
      return {
        total_leads: 0,
        hot_conversion: 0,
        warm_conversion: 0,
        average_score: 0
      };
    }

    const hotLeads = leads.filter(lead => lead.analysisResult?.segment === 'HOT_LEAD').length;
    const warmLeads = leads.filter(lead => lead.analysisResult?.segment === 'WARM_LEAD').length;
    
    const scores = leads
      .map(lead => lead.analysisResult?.scores?.total)
      .filter(score => typeof score === 'number');
    
    const averageScore = scores.length > 0 ? 
      scores.reduce((sum, score) => sum + score, 0) / scores.length : 0;

    return {
      total_leads: totalLeads,
      hot_conversion: ((hotLeads / totalLeads) * 100).toFixed(1),
      warm_conversion: ((warmLeads / totalLeads) * 100).toFixed(1),
      quality_conversion: (((hotLeads + warmLeads) / totalLeads) * 100).toFixed(1),
      average_score: averageScore.toFixed(1)
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
   */
  getStats() {
    const analytics = this.getLeadsAnalytics();
    const conversionStats = this.getConversionStats();
    const topIssues = this.getTopIssues(3);

    return {
      name: 'LeadsHandler',
      total_commands: this.leadsHandlerStats.totalCommands,
      commands_used: this.leadsHandlerStats.commandsUsed,
      last_command: this.leadsHandlerStats.lastCommand,
      search_queries: this.leadsHandlerStats.searchQueries,
      leads_processed: this.leadsHandlerStats.leadsProcessed.size,
      errors: this.leadsHandlerStats.errors || 0,
      analytics: analytics,
      conversion_stats: conversionStats,
      top_issues: topIssues,
      uptime: this.formatUptime(process.uptime()),
      memory_usage: this.getMemoryUsage(),
      last_updated: new Date().toISOString()
    };
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   */
  exportLeadsData() {
    const leads = Object.values(this.adminNotifications.leadDataStorage || {});
    
    return leads.map(lead => ({
      telegram_id: lead.userInfo?.telegram_id,
      first_name: lead.userInfo?.first_name,
      username: lead.userInfo?.username,
      timestamp: lead.timestamp,
      segment: lead.analysisResult?.segment,
      score: lead.analysisResult?.scores?.total,
      urgency: lead.analysisResult?.scores?.urgency,
      readiness: lead.analysisResult?.scores?.readiness,
      fit: lead.analysisResult?.scores?.fit,
      primary_issue: lead.analysisResult?.primaryIssue,
      survey_type: lead.surveyType,
      age_group: lead.surveyAnswers?.age_group || lead.surveyAnswers?.child_age_detail,
      stress_level: lead.surveyAnswers?.stress_level,
      problems: Array.isArray(lead.surveyAnswers?.current_problems) ? 
        lead.surveyAnswers.current_problems.join(', ') : 
        lead.surveyAnswers?.current_problems,
      processed: this.leadsHandlerStats.leadsProcessed.has(lead.userInfo?.telegram_id)
    }));
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Ä–∞–±–æ—Ç–µ —Å –ª–∏–¥–∞–º–∏
   */
  generateLeadsReport() {
    const stats = this.getStats();
    const exportData = this.exportLeadsData();
    
    return {
      generated_at: new Date().toISOString(),
      handler_stats: stats,
      leads_data: exportData,
      summary: {
        total_leads_in_system: exportData.length,
        commands_executed: stats.total_commands,
        search_queries_made: stats.search_queries,
        leads_processed: stats.leads_processed,
        conversion_rate: stats.conversion_stats.hot_conversion + '%',
        top_issue: stats.top_issues[0]?.translated || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
      }
    };
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  cleanup() {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ LeadsHandler...');
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥ –ª–∏–¥–æ–≤:', JSON.stringify(this.getStats(), null, 2));
    
    // –û—á–∏—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤
    this.leadsHandlerStats.leadsProcessed.clear();
    
    console.log('‚úÖ LeadsHandler –æ—á–∏—â–µ–Ω');
  }
}

module.exports = LeadsHandler;