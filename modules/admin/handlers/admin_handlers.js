// –§–∞–π–ª: modules/admin/admin_handlers.js - –†–ï–§–ê–ö–¢–û–†–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥—É–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É)

const MainHandler = require('./handlers/main_handler');
const StatsHandler = require('./handlers/stats_handler');
const LeadsHandler = require('./handlers/leads_handler');
const SystemHandler = require('./handlers/system_handler');
const config = require('../../config');

class AdminHandlers {
  constructor(bot, adminNotifications, verseAnalysis, leadTransfer, pdfManager) {
    this.bot = bot;
    this.telegramBot = bot.bot;
    this.adminNotifications = adminNotifications;
    this.verseAnalysis = verseAnalysis;
    this.leadTransfer = leadTransfer;
    this.pdfManager = pdfManager;
    this.adminId = config.ADMIN_ID;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    this.mainHandler = new MainHandler(bot, adminNotifications);
    this.statsHandler = new StatsHandler(bot, adminNotifications);
    this.leadsHandler = new LeadsHandler(bot, adminNotifications);
    this.systemHandler = new SystemHandler(bot, adminNotifications);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—â–∏—Ö –∫–æ–º–∞–Ω–¥
    this.commandStats = {
      totalCommands: 0,
      commandsUsed: {},
      lastCommand: null,
      errors: 0,
      moduleStats: {
        main: 0,
        stats: 0,
        leads: 0,
        system: 0,
        other: 0
      }
    };

    console.log('‚úÖ AdminHandlers –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π');
  }

  // ===== –ù–ê–°–¢–†–û–ô–ö–ê –ö–û–ú–ê–ù–î =====

  setupCommands() {
    if (!this.adminId) {
      console.log('‚ö†Ô∏è ADMIN_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã');
      return;
    }

    console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥—É–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥...');

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –≤–æ –≤—Å–µ—Ö –º–æ–¥—É–ª—è—Ö
    this.mainHandler.setupCommands();
    this.statsHandler.setupCommands();
    this.leadsHandler.setupCommands();
    this.systemHandler.setupCommands();
    
    console.log('‚úÖ –ú–æ–¥—É–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }

  // ===== –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î =====

  async handleCommand(ctx, commandName) {
    if (ctx.from.id.toString() !== this.adminId) {
      await ctx.reply('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }

    try {
      this.trackCommandUsage(commandName);
      
      console.log(`üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã: ${commandName}`);
      
      // –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –ø–æ –º–æ–¥—É–ª—è–º
      const handled = await this.routeCommandToModules(ctx, commandName);
      
      if (!handled) {
        console.warn('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞:', commandName);
        await ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞', {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }],
              [{ text: 'üÜò –ü–æ–º–æ—â—å', callback_data: 'admin_help' }]
            ]
          }
        });
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handleCommand:', error);
      this.commandStats.errors++;
      
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
          ]
        }
      });
    }
  }

  // ===== –ú–ê–†–®–†–£–¢–ò–ó–ê–¶–ò–Ø –ü–û –ú–û–î–£–õ–Ø–ú =====

  async routeCommandToModules(ctx, commandName) {
    try {
      // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (admin)
      if (commandName === 'admin') {
        await this.mainHandler.handleCommand(ctx, commandName);
        this.commandStats.moduleStats.main++;
        return true;
      }

      // –ö–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (stats, analytics)
      if (['stats', 'analytics'].includes(commandName)) {
        await this.statsHandler.handleCommand(ctx, commandName);
        this.commandStats.moduleStats.stats++;
        return true;
      }

      // –ö–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç—ã —Å –ª–∏–¥–∞–º–∏ (hot_leads, today_leads, search_lead)
      if (['hot_leads', 'today_leads', 'search_lead'].includes(commandName)) {
        await this.leadsHandler.handleCommand(ctx, commandName);
        this.commandStats.moduleStats.leads++;
        return true;
      }

      // –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (health, export_leads, settings, diagnostics)
      if (['health', 'export_leads', 'settings', 'diagnostics'].includes(commandName)) {
        await this.systemHandler.handleCommand(ctx, commandName);
        this.commandStats.moduleStats.system++;
        return true;
      }

      // –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –Ω–∏ –æ–¥–Ω–∏–º –º–æ–¥—É–ª–µ–º
      this.commandStats.moduleStats.other++;
      return false;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã:', error);
      this.commandStats.errors++;
      throw error;
    }
  }

  // ===== –ú–ï–¢–û–î–´ –î–õ–Ø –û–ë–†–ê–¢–ù–û–ô –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò =====

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   */
  async handleMainCommand(ctx) {
    return await this.mainHandler.handleMainCommand(ctx);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   */
  checkAdmin(handler) {
    return async (ctx) => {
      if (ctx.from.id.toString() !== this.adminId) {
        await ctx.reply('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
        return;
      }
      
      this.trackCommandUsage(ctx.message?.text || 'unknown');
      return handler(ctx);
    };
  }

  // ===== –ê–ì–†–ï–ì–ò–†–û–í–ê–ù–ù–´–ï –ú–ï–¢–û–î–´ =====

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
   */
  getAggregatedStats() {
    return {
      main_handler: this.mainHandler.getStats(),
      stats_handler: this.statsHandler.getStats(),
      leads_handler: this.leadsHandler.getStats(),
      system_handler: this.systemHandler.getStats()
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
   */
  getAggregatedAnalytics() {
    const leadsStats = this.leadsHandler.getStats();
    const systemStats = this.systemHandler.getStats();
    const statsHandlerStats = this.statsHandler.getStats();
    
    return {
      leads: {
        total_processed: leadsStats.leads_processed,
        search_queries: leadsStats.search_queries,
        conversion_stats: leadsStats.conversion_stats,
        top_issues: leadsStats.top_issues
      },
      system: {
        health_checks: systemStats.health_checks,
        exports: systemStats.exports,
        diagnostics: systemStats.diagnostics_runs,
        uptime: systemStats.uptime
      },
      statistics: {
        requests: statsHandlerStats.total_requests,
        analytics_runs: statsHandlerStats.analytics_runs
      },
      overall: {
        total_commands: this.commandStats.totalCommands,
        errors: this.commandStats.errors,
        module_distribution: this.commandStats.moduleStats
      }
    };
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
   */
  async performModulesDiagnostics() {
    const diagnostics = {
      timestamp: new Date().toISOString(),
      overall_status: 'HEALTHY',
      modules: {}
    };

    try {
      // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è
      const modules = [
        { name: 'main', handler: this.mainHandler },
        { name: 'stats', handler: this.statsHandler },
        { name: 'leads', handler: this.leadsHandler },
        { name: 'system', handler: this.systemHandler }
      ];

      for (const module of modules) {
        try {
          const moduleStats = module.handler.getStats();
          diagnostics.modules[module.name] = {
            status: moduleStats.errors > 5 ? 'DEGRADED' : 'HEALTHY',
            stats: moduleStats,
            last_activity: moduleStats.last_command || moduleStats.last_request,
            error_count: moduleStats.errors || 0
          };
        } catch (error) {
          diagnostics.modules[module.name] = {
            status: 'ERROR',
            error: error.message
          };
        }
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
      const moduleStatuses = Object.values(diagnostics.modules).map(m => m.status);
      if (moduleStatuses.includes('ERROR')) {
        diagnostics.overall_status = 'ERROR';
      } else if (moduleStatuses.includes('DEGRADED')) {
        diagnostics.overall_status = 'DEGRADED';
      }

    } catch (error) {
      diagnostics.overall_status = 'ERROR';
      diagnostics.error = error.message;
    }

    return diagnostics;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
   */
  async generateComprehensiveReport() {
    const report = {
      generated_at: new Date().toISOString(),
      report_type: 'comprehensive_admin_report',
      version: '2.0.0',
      architecture: 'modular',
      
      // –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      overview: {
        admin_id: this.adminId,
        total_commands: this.commandStats.totalCommands,
        uptime: this.formatUptime(process.uptime()),
        memory_usage: this.getMemoryUsage() + 'MB'
      },
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥—É–ª–µ–π
      module_stats: this.getAggregatedStats(),
      
      // –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
      analytics: this.getAggregatedAnalytics(),
      
      // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–æ–¥—É–ª–µ–π
      modules_diagnostics: await this.performModulesDiagnostics(),
      
      // –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
      system_metrics: this.systemHandler.getSystemMetrics(),
      
      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      recommendations: this.generateOverallRecommendations()
    };

    return report;
  }

  generateOverallRecommendations() {
    const recommendations = [];
    const totalErrors = this.commandStats.errors;
    const moduleStats = this.commandStats.moduleStats;
    
    if (totalErrors > 10) {
      recommendations.push({
        type: 'stability',
        priority: 'high',
        message: '–í—ã—Å–æ–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞'
      });
    }
    
    if (moduleStats.other > moduleStats.main + moduleStats.stats + moduleStats.leads + moduleStats.system) {
      recommendations.push({
        type: 'architecture',
        priority: 'medium',
        message: '–ú–Ω–æ–≥–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ - —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π'
      });
    }
    
    const memUsage = this.getMemoryUsage();
    if (memUsage > 1000) {
      recommendations.push({
        type: 'performance',
        priority: 'high',
        message: '–í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è'
      });
    }
    
    if (this.commandStats.totalCommands === 0) {
      recommendations.push({
        type: 'usage',
        priority: 'low',
        message: '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å'
      });
    }
    
    return recommendations;
  }

  // ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====

  trackCommandUsage(command) {
    this.commandStats.totalCommands++;
    this.commandStats.lastCommand = {
      command: command,
      timestamp: new Date().toISOString()
    };
    
    if (!this.commandStats.commandsUsed[command]) {
      this.commandStats.commandsUsed[command] = 0;
    }
    this.commandStats.commandsUsed[command]++;
  }

  formatUptime(seconds) {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    
    if (hours > 24) {
      const days = Math.floor(hours / 24);
      const remainingHours = hours % 24;
      return `${days}–¥ ${remainingHours}—á ${minutes}–º`;
    }
    
    return `${hours}—á ${minutes}–º`;
  }

  getMemoryUsage() {
    return Math.round(process.memoryUsage().heapUsed / 1024 / 1024);
  }

  // ===== –≠–ö–°–ü–û–†–¢ –°–¢–ê–¢–ò–°–¢–ò–ö–ò =====

  getCommandStats() {
    const moduleStats = this.getAggregatedStats();
    
    return {
      ...this.commandStats,
      admin_id: this.adminId,
      module_statistics: moduleStats,
      uptime: this.formatUptime(process.uptime()),
      memory_usage: this.getMemoryUsage()
    };
  }

  exportStats() {
    return {
      name: 'AdminHandlers',
      version: '2.0.0', // –£–≤–µ–ª–∏—á–∏–ª–∏ –≤–µ—Ä—Å–∏—é –ø–æ—Å–ª–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
      architecture: 'modular',
      admin_id: this.adminId,
      modules: [
        'main_handler',
        'stats_handler',
        'leads_handler',
        'system_handler'
      ],
      features: [
        'modular_architecture',
        'command_routing',
        'aggregated_analytics',
        'comprehensive_reporting',
        'module_diagnostics',
        'error_handling',
        'backward_compatibility'
      ],
      command_stats: this.getCommandStats(),
      aggregated_stats: this.getAggregatedStats(),
      last_updated: new Date().toISOString()
    };
  }

  cleanup() {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –º–æ–¥—É–ª—å–Ω—ã—Ö AdminHandlers...');
    
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏
    this.mainHandler.cleanup();
    this.statsHandler.cleanup();
    this.leadsHandler.cleanup();
    this.systemHandler.cleanup();
    
    console.log('üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥:', JSON.stringify(this.getCommandStats(), null, 2));
    console.log('‚úÖ –ú–æ–¥—É–ª—å–Ω—ã–µ AdminHandlers –æ—á–∏—â–µ–Ω—ã');
  }
}

module.exports = AdminHandlers;