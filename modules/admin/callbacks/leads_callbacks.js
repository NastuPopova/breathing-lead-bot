// –§–∞–π–ª: modules/admin/callbacks/leads_callbacks.js
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–∏–¥–∞–º–∏

class LeadsCallbacks {
  constructor(adminHandlers, adminNotifications) {
    this.adminHandlers = adminHandlers;
    this.adminNotifications = adminNotifications;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ª–∏–¥–∞–º–∏
    this.leadsCallbacksUsage = {
      totalRequests: 0,
      actionsUsed: {},
      lastRequest: null,
      processedLeads: new Set()
    };
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–∏–¥–∞–º–∏
   */
  async handleCallback(ctx, callbackData) {
    this.trackLeadsUsage(callbackData);
    
    try {
      switch (callbackData) {
        case 'admin_hot_leads':
          await this.showHotLeads(ctx);
          break;
          
        case 'admin_today_leads':
          await this.showTodayLeads(ctx);
          break;
          
        case 'admin_search':
          await this.showSearchPanel(ctx);
          break;
          
        case 'admin_process_all_hot':
          await this.processAllHotLeads(ctx);
          break;
          
        default:
          return false; // –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —ç—Ç–∏–º –º–æ–¥—É–ª–µ–º
      }
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ LeadsCallbacks:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–∫–∞–∑ –≥–æ—Ä—è—á–∏—Ö –ª–∏–¥–æ–≤
   */
  async showHotLeads(ctx) {
    console.log('üî• –ü–æ–∫–∞–∑ –≥–æ—Ä—è—á–∏—Ö –ª–∏–¥–æ–≤');
    
    try {
      if (!this.adminNotifications.leadDataStorage) {
        console.warn('‚ö†Ô∏è leadDataStorage –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
        this.adminNotifications.leadDataStorage = {};
      }

      const leads = Object.values(this.adminNotifications.leadDataStorage || {})
        .filter(lead => lead.analysisResult?.segment === 'HOT_LEAD')
        .sort((a, b) => new Date(b.timestamp || 0) - new Date(a.timestamp || 0))
        .slice(0, 10);

      if (!leads.length) {
        await ctx.editMessageText('‚úÖ –ù–µ—Ç –≥–æ—Ä—è—á–∏—Ö –ª–∏–¥–æ–≤', {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_hot_leads' }],
              [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
            ]
          }
        });
        return;
      }

      let message = `üî• *–ì–û–†–Ø–ß–ò–ï –õ–ò–î–´ (${leads.length})*\n\n`;
      
      leads.forEach((lead, index) => {
        const user = lead.userInfo;
        const score = lead.analysisResult?.scores?.total || 0;
        const timeAgo = this.getTimeAgo(lead.timestamp);
        
        message += `${index + 1}. **${user?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}**\n`;
        message += `   üÜî ID: \`${user?.telegram_id}\`\n`;
        message += `   üìä –ë–∞–ª–ª: ${score}/100\n`;
        message += `   ‚è∞ ${timeAgo}\n`;
        message += `   üéØ ${this.translateIssue(lead.analysisResult?.primaryIssue)}\n\n`;
      });

      const keyboard = [
        [{ text: 'üìû –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ—Ö', callback_data: 'admin_process_all_hot' }],
        [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_hot_leads' }],
        [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
      ];

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≥–æ—Ä—è—á–∏—Ö –ª–∏–¥–æ–≤:', error);
      await this.showErrorMessage(ctx, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä—è—á–∏—Ö –ª–∏–¥–æ–≤');
    }
  }

  /**
   * –ü–æ–∫–∞–∑ –ª–∏–¥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
   */
  async showTodayLeads(ctx) {
    console.log('üìã –ü–æ–∫–∞–∑ –ª–∏–¥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è');
    
    try {
      const today = new Date().toDateString();
      const leads = Object.values(this.adminNotifications.leadDataStorage || {})
        .filter(lead => {
          const leadDate = lead.timestamp ? new Date(lead.timestamp).toDateString() : null;
          return leadDate === today;
        })
        .sort((a, b) => new Date(b.timestamp || 0) - new Date(a.timestamp || 0));

      if (!leads.length) {
        await ctx.editMessageText('üìã *–õ–ò–î–´ –°–ï–ì–û–î–ù–Ø*\n\n‚úÖ –°–µ–≥–æ–¥–Ω—è –ª–∏–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç', {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_today_leads' }],
              [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
            ]
          }
        });
        return;
      }

      let message = `üìã *–õ–ò–î–´ –°–ï–ì–û–î–ù–Ø (${leads.length})*\n\n`;
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
      const bySegment = leads.reduce((acc, lead) => {
        const segment = lead.analysisResult?.segment || 'UNKNOWN';
        if (!acc[segment]) acc[segment] = [];
        acc[segment].push(lead);
        return acc;
      }, {});

      Object.entries(bySegment).forEach(([segment, segmentLeads]) => {
        const emoji = this.getSegmentEmoji(segment);
        message += `${emoji} **${segment}** (${segmentLeads.length}):\n`;
        
        segmentLeads.slice(0, 3).forEach(lead => {
          const user = lead.userInfo;
          const time = new Date(lead.timestamp).toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit'
          });
          message += `   ‚Ä¢ ${user?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (${time})\n`;
        });
        
        if (segmentLeads.length > 3) {
          message += `   ‚Ä¢ ... –∏ –µ—â–µ ${segmentLeads.length - 3}\n`;
        }
        message += `\n`;
      });

      const keyboard = [
        [
          { text: 'üî• –¢–æ–ª—å–∫–æ –≥–æ—Ä—è—á–∏–µ', callback_data: 'admin_hot_leads' },
          { text: 'üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–Ω—è', callback_data: 'admin_day_analytics' }
        ],
        [
          { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_today_leads' },
          { text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }
        ]
      ];

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ª–∏–¥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:', error);
      await this.showErrorMessage(ctx, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è');
    }
  }

  /**
   * –ü–æ–∫–∞–∑ –ø–∞–Ω–µ–ª–∏ –ø–æ–∏—Å–∫–∞ –ª–∏–¥–æ–≤
   */
  async showSearchPanel(ctx) {
    console.log('üîç –ü–æ–∫–∞–∑ –ø–∞–Ω–µ–ª–∏ –ø–æ–∏—Å–∫–∞ –ª–∏–¥–æ–≤');
    
    let message = `üîç *–ü–û–ò–°–ö –õ–ò–î–û–í*\n\n`;
    message += `–î–ª—è –ø–æ–∏—Å–∫–∞ –ª–∏–¥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n`;
    message += `\`/search_lead <–∑–∞–ø—Ä–æ—Å>\`\n\n`;
    message += `**–ú–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å –ø–æ:**\n`;
    message += `‚Ä¢ Telegram ID\n`;
    message += `‚Ä¢ –ò–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`;
    message += `‚Ä¢ Username (–±–µ–∑ @)\n`;
    message += `‚Ä¢ –ü—Ä–æ–±–ª–µ–º–µ\n`;
    message += `‚Ä¢ –°–µ–≥–º–µ–Ω—Ç—É\n\n`;
    message += `**–ü—Ä–∏–º–µ—Ä—ã:**\n`;
    message += `\`/search_lead 123456789\`\n`;
    message += `\`/search_lead –ê–Ω–Ω–∞\`\n`;
    message += `\`/search_lead —Å—Ç—Ä–µ—Å—Å\`\n`;
    message += `\`/search_lead HOT_LEAD\`\n\n`;
    
    const totalLeads = Object.keys(this.adminNotifications.leadDataStorage || {}).length;
    message += `üìä **–í—Å–µ–≥–æ –ª–∏–¥–æ–≤ –≤ –±–∞–∑–µ:** ${totalLeads}`;

    try {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìã –í—Å–µ –ª–∏–¥—ã —Å–µ–≥–æ–¥–Ω—è', callback_data: 'admin_today_leads' }],
            [{ text: 'üî• –ì–æ—Ä—è—á–∏–µ –ª–∏–¥—ã', callback_data: 'admin_hot_leads' }],
            [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
          ]
        }
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–∞–Ω–µ–ª–∏ –ø–æ–∏—Å–∫–∞:', error);
      await this.showErrorMessage(ctx, '–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏ –ø–æ–∏—Å–∫–∞');
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –≥–æ—Ä—è—á–∏—Ö –ª–∏–¥–æ–≤
   */
  async processAllHotLeads(ctx) {
    console.log('üìû –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –≥–æ—Ä—è—á–∏—Ö –ª–∏–¥–æ–≤');
    
    const hotLeads = Object.values(this.adminNotifications.leadDataStorage || {})
      .filter(lead => lead.analysisResult?.segment === 'HOT_LEAD');

    if (!hotLeads.length) {
      await ctx.editMessageText('‚úÖ –ù–µ—Ç –≥–æ—Ä—è—á–∏—Ö –ª–∏–¥–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏', {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
          ]
        }
      });
      return;
    }

    // –û—Ç–º–µ—á–∞–µ–º –ª–∏–¥–æ–≤ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
    hotLeads.forEach(lead => {
      if (lead.userInfo?.telegram_id) {
        this.leadsCallbacksUsage.processedLeads.add(lead.userInfo.telegram_id);
      }
    });

    let message = `üìû *–û–ë–†–ê–ë–û–¢–ö–ê –ì–û–†–Ø–ß–ò–• –õ–ò–î–û–í*\n\n`;
    message += `üî• –ù–∞–π–¥–µ–Ω–æ –≥–æ—Ä—è—á–∏—Ö –ª–∏–¥–æ–≤: ${hotLeads.length}\n\n`;
    message += `**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**\n`;
    message += `‚Ä¢ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–∞–∂–¥—ã–º –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤\n`;
    message += `‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n`;
    message += `‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n\n`;
    message += `**–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:**\n`;
    
    hotLeads.slice(0, 5).forEach((lead, index) => {
      const user = lead.userInfo;
      message += `${index + 1}. ${user?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} - `;
      if (user?.username) {
        message += `@${user.username}\n`;
      } else {
        message += `ID: ${user?.telegram_id}\n`;
      }
    });

    if (hotLeads.length > 5) {
      message += `... –∏ –µ—â–µ ${hotLeads.length - 5} –ª–∏–¥–æ–≤\n`;
    }

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üî• –ì–æ—Ä—è—á–∏–µ –ª–∏–¥—ã', callback_data: 'admin_hot_leads' }],
          [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
        ]
      }
    });
  }

  // ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ "X –Ω–∞–∑–∞–¥"
   */
  getTimeAgo(timestamp) {
    if (!timestamp) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    
    const now = new Date();
    const time = new Date(timestamp);
    const diffMs = now - time;
    const diffMins = Math.floor(diffMs / 60000);
    
    if (diffMins < 1) return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
    if (diffMins < 60) return `${diffMins} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    
    const diffHours = Math.floor(diffMins / 60);
    if (diffHours < 24) return `${diffHours} —á –Ω–∞–∑–∞–¥`;
    
    const diffDays = Math.floor(diffHours / 24);
    return `${diffDays} –¥–Ω –Ω–∞–∑–∞–¥`;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞
   */
  getSegmentEmoji(segment) {
    const emojis = {
      'HOT_LEAD': 'üî•',
      'WARM_LEAD': '‚≠ê',
      'COLD_LEAD': '‚ùÑÔ∏è',
      'NURTURE_LEAD': 'üå±'
    };
    return emojis[segment] || '‚ùì';
  }

  /**
   * –ü–µ—Ä–µ–≤–æ–¥ –ø—Ä–æ–±–ª–µ–º—ã
   */
  translateIssue(issue) {
    const translations = {
      'chronic_stress': '–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç—Ä–µ—Å—Å',
      'anxiety': '–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å',
      'insomnia': '–ë–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞',
      'breathing_issues': '–ü—Ä–æ–±–ª–µ–º—ã —Å –¥—ã—Ö–∞–Ω–∏–µ–º',
      'high_pressure': '–í—ã—Å–æ–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ',
      'fatigue': '–£—Å—Ç–∞–ª–æ—Å—Ç—å',
      'hyperactivity': '–ì–∏–ø–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
      'sleep_problems': '–ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–Ω–æ–º'
    };
    return translations[issue] || issue || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
  }

  /**
   * –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
   */
  async showErrorMessage(ctx, errorText) {
    try {
      await ctx.editMessageText(`‚ùå ${errorText}`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'admin_hot_leads' }],
            [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
          ]
        }
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', error);
      await ctx.reply(`‚ùå ${errorText}`);
    }
  }

  /**
   * –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç—ã —Å –ª–∏–¥–∞–º–∏
   */
  trackLeadsUsage(action) {
    this.leadsCallbacksUsage.totalRequests++;
    this.leadsCallbacksUsage.lastRequest = {
      action: action,
      timestamp: new Date().toISOString()
    };
    
    if (!this.leadsCallbacksUsage.actionsUsed[action]) {
      this.leadsCallbacksUsage.actionsUsed[action] = 0;
    }
    this.leadsCallbacksUsage.actionsUsed[action]++;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥—É–ª—è
   */
  getStats() {
    return {
      name: 'LeadsCallbacks',
      total_requests: this.leadsCallbacksUsage.totalRequests,
      actions_used: this.leadsCallbacksUsage.actionsUsed,
      last_request: this.leadsCallbacksUsage.lastRequest,
      processed_leads_count: this.leadsCallbacksUsage.processedLeads.size,
      most_used_action: this.getMostUsedAction(),
      last_updated: new Date().toISOString()
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∏–±–æ–ª–µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
   */
  getMostUsedAction() {
    const actions = this.leadsCallbacksUsage.actionsUsed;
    let maxAction = null;
    let maxCount = 0;
    
    Object.entries(actions).forEach(([action, count]) => {
      if (count > maxCount) {
        maxCount = count;
        maxAction = action;
      }
    });
    
    return maxAction ? { action: maxAction, count: maxCount } : null;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  cleanup() {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ LeadsCallbacks...');
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ª–∏–¥–∞–º–∏:', JSON.stringify(this.getStats(), null, 2));
    
    // –û—á–∏—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤
    this.leadsCallbacksUsage.processedLeads.clear();
    
    console.log('‚úÖ LeadsCallbacks –æ—á–∏—â–µ–Ω');
  }
}

module.exports = LeadsCallbacks;
		
		
		