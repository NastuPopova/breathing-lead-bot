// –§–∞–π–ª: modules/admin/callbacks/system_callbacks.js
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö callback'–æ–≤ (–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, —ç–∫—Å–ø–æ—Ä—Ç)

const config = require('../../../config');

class SystemCallbacks {
  constructor(adminHandlers, adminNotifications) {
    this.adminHandlers = adminHandlers;
    this.adminNotifications = adminNotifications;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    this.systemCallbacksUsage = {
      totalRequests: 0,
      operationsUsed: {},
      lastRequest: null,
      diagnosticsRuns: 0
    };
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö callback'–æ–≤
   */
  async handleCallback(ctx, callbackData) {
    this.trackSystemUsage(callbackData);
    
    try {
      switch (callbackData) {
        case 'admin_system':
          await this.showSystem(ctx);
          break;
          
        case 'admin_detailed_diagnostics':
          await this.showDetailedDiagnostics(ctx);
          break;
          
        case 'admin_export':
          await this.showExport(ctx);
          break;
          
        case 'admin_settings':
          await this.showSettings(ctx);
          break;
          
        default:
          return false; // –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —ç—Ç–∏–º –º–æ–¥—É–ª–µ–º
      }
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ SystemCallbacks:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–∫–∞–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
   */
  async showSystem(ctx) {
    console.log('üîß –ü–æ–∫–∞–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
    
    try {
      const health = await this.getSystemHealthData();
      
      let message = `üîß *–°–û–°–¢–û–Ø–ù–ò–ï –°–ò–°–¢–ï–ú–´*\n\n`;
      
      // –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
      const statusEmoji = health.overall === 'HEALTHY' ? '‚úÖ' : health.overall === 'DEGRADED' ? '‚ö†Ô∏è' : '‚ùå';
      message += `${statusEmoji} **–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:** ${health.overall}\n\n`;
      
      // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
      message += `ü§ñ *–ö–û–ú–ü–û–ù–ï–ù–¢–´:*\n`;
      Object.entries(health.components).forEach(([component, data]) => {
        const emoji = data.status === 'HEALTHY' ? '‚úÖ' : data.status === 'DEGRADED' ? '‚ö†Ô∏è' : '‚ùå';
        message += `${emoji} ${component}: ${data.status}\n`;
      });
      message += `\n`;
      
      // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
      message += `üìä *–ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:*\n`;
      message += `‚Ä¢ –ü–∞–º—è—Ç—å: ${health.performance.memory}MB\n`;
      message += `‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${this.formatUptime(health.performance.uptime)}\n\n`;
      
      // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
      message += `üîó *–ò–ù–¢–ï–ì–†–ê–¶–ò–ò:*\n`;
      message += `‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç: ${health.integrations.mainBot ? '‚úÖ' : '‚ùå'}\n`;
      message += `‚Ä¢ CRM: ${health.integrations.crm ? '‚úÖ' : '‚ùå'}\n`;

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', callback_data: 'admin_detailed_diagnostics' }],
            [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
          ]
        }
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error);
      await this.showErrorMessage(ctx, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
    }
  }

  /**
   * –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
   */
  async showDetailedDiagnostics(ctx) {
    console.log('üîç –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
    this.systemCallbacksUsage.diagnosticsRuns++;
    
    try {
      const diagnostics = await this.runDiagnostics();
      
      let message = `üîç *–î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê*\n\n`;
      
      const statusEmoji = {
        'OK': '‚úÖ',
        'WARNING': '‚ö†Ô∏è',
        'ERROR': '‚ùå',
        'UNKNOWN': '‚ùì'
      };

      message += `${statusEmoji[diagnostics.overall_status]} **–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:** ${diagnostics.overall_status}\n`;
      message += `üïê –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n\n`;

      Object.entries(diagnostics.checks).forEach(([checkName, result]) => {
        const emoji = statusEmoji[result.status] || '‚ùì';
        const name = checkName.replace(/_/g, ' ').toUpperCase();
        message += `${emoji} **${name}:**\n`;
        message += `‚îî‚îÄ ${result.message}\n\n`;
      });

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîß –°–∏—Å—Ç–µ–º–∞', callback_data: 'admin_system' }],
            [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
          ]
        }
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
      await this.showErrorMessage(ctx, '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
    }
  }

  /**
   * –ü–æ–∫–∞–∑ –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞
   */
  async showExport(ctx) {
    console.log('üì§ –ü–æ–∫–∞–∑ –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞');
    
    let message = `üì§ *–≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–•*\n\n`;
    message += `–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:\n\n`;
    message += `üìã **–õ–∏–¥—ã:**\n`;
    message += `‚Ä¢ –í—Å–µ –ª–∏–¥—ã\n`;
    message += `‚Ä¢ –¢–æ–ª—å–∫–æ –≥–æ—Ä—è—á–∏–µ –ª–∏–¥—ã\n`;
    message += `‚Ä¢ –õ–∏–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n\n`;
    message += `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n`;
    message += `‚Ä¢ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n`;
    message += `‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º\n\n`;
    message += `‚ö†Ô∏è *–§—É–Ω–∫—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*`;

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üìã –õ–∏–¥—ã (—Å–∫–æ—Ä–æ)', callback_data: 'admin_export_leads' },
            { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Å–∫–æ—Ä–æ)', callback_data: 'admin_export_stats' }
          ],
          [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
        ]
      }
    });
  }

  /**
   * –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
   */
  async showSettings(ctx) {
    console.log('‚öôÔ∏è –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    
    let message = `‚öôÔ∏è *–ù–ê–°–¢–†–û–ô–ö–ò –°–ò–°–¢–ï–ú–´*\n\n`;
    message += `üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**\n`;
    message += `‚Ä¢ –ì–æ—Ä—è—á–∏–µ –ª–∏–¥—ã: ‚úÖ\n`;
    message += `‚Ä¢ –¢–µ–ø–ª—ã–µ –ª–∏–¥—ã: ‚úÖ\n`;
    message += `‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ—à–∏–±–∫–∏: ‚úÖ\n\n`;
    message += `üìä **–°–∏—Å—Ç–µ–º–∞:**\n`;
    message += `‚Ä¢ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤: 7 –¥–Ω–µ–π\n`;
    message += `‚Ä¢ –õ–∏–º–∏—Ç rate limiting: —É–ª—É—á—à–µ–Ω–Ω—ã–π\n`;
    message += `‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π: –≤–∫–ª—é—á–µ–Ω–æ\n\n`;
    message += `‚ö†Ô∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*`;

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Å–∫–æ—Ä–æ)', callback_data: 'admin_notifications' }],
          [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
        ]
      }
    });
  }

  // ===== –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–û–î–´ =====

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
   */
  async runDiagnostics() {
    const results = {
      timestamp: new Date().toISOString(),
      overall_status: 'OK',
      checks: {}
    };

    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
      results.checks.admin_integration = {
        status: 'OK',
        message: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è v3.0 –∞–∫—Ç–∏–≤–Ω–∞'
      };

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π
      results.checks.admin_modules = {
        status: (this.adminHandlers && this.adminNotifications) ? 'OK' : 'ERROR',
        message: `Handlers: ${!!this.adminHandlers}, Notifications: ${!!this.adminNotifications}`
      };

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      results.checks.notification_system = {
        status: (this.adminNotifications && this.adminNotifications.templates) ? 'OK' : 'ERROR',
        message: `–ú–æ–¥—É–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${!!this.adminNotifications}, Components: ${!!this.adminNotifications?.templates}`
      };

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
      const leadsCount = Object.keys(this.adminNotifications.leadDataStorage || {}).length;
      results.checks.data_integrity = {
        status: 'OK',
        message: `–î–æ—Å—Ç—É–ø –∫ ${leadsCount} –ª–∏–¥–∞–º`
      };

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      results.checks.configuration = {
        status: config.ADMIN_ID ? 'OK' : 'WARNING',
        message: config.ADMIN_ID ? 'ADMIN_ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω' : 'ADMIN_ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
      };

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
      const memUsage = process.memoryUsage();
      const memoryMB = Math.round(memUsage.heapUsed / 1024 / 1024);
      results.checks.memory = {
        status: memoryMB < 500 ? 'OK' : memoryMB < 1000 ? 'WARNING' : 'ERROR',
        message: `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ${memoryMB}MB –ø–∞–º—è—Ç–∏`
      };

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      const analytics = this.adminNotifications.analytics?.getStats();
      results.checks.analytics = {
        status: analytics ? 'OK' : 'WARNING',
        message: analytics ? `–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${analytics.performance?.success_rate}` : '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
      };

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
      const statuses = Object.values(results.checks).map(check => check.status);
      if (statuses.includes('ERROR')) {
        results.overall_status = 'ERROR';
      } else if (statuses.includes('WARNING')) {
        results.overall_status = 'WARNING';
      } else {
        results.overall_status = 'OK';
      }

    } catch (error) {
      results.overall_status = 'ERROR';
      results.error = error.message;
    }

    return results;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
   */
  async getSystemHealthData() {
    return {
      overall: 'HEALTHY',
      components: {
        'telegram_bot': { status: 'HEALTHY' },
        'admin_callbacks': { status: 'HEALTHY' },
        'lead_storage': { status: 'HEALTHY' },
        'pdf_generator': { status: 'HEALTHY' }
      },
      performance: {
        memory: Math.round(process.memoryUsage().heapUsed / 1024 / 1024),
        uptime: process.uptime()
      },
      integrations: {
        mainBot: !!config.MAIN_BOT_API_URL,
        crm: !!config.CRM_WEBHOOK_URL,
        database: !!config.DATABASE_URL
      }
    };
  }

  // ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
   */
  formatUptime(seconds) {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    
    if (hours > 24) {
      const days = Math.floor(hours / 24);
      const remainingHours = hours % 24;
      return `${days}–¥ ${remainingHours}—á ${minutes}–º`;
    }
    
    return `${hours}—á ${minutes}–º`;
  }

  /**
   * –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
   */
  async showErrorMessage(ctx, errorText) {
    try {
      await ctx.editMessageText(`‚ùå ${errorText}`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'admin_system' }],
            [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
          ]
        }
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', error);
      await ctx.reply(`‚ùå ${errorText}`);
    }
  }

  /**
   * –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
   */
  trackSystemUsage(operation) {
    this.systemCallbacksUsage.totalRequests++;
    this.systemCallbacksUsage.lastRequest = {
      operation: operation,
      timestamp: new Date().toISOString()
    };
    
    if (!this.systemCallbacksUsage.operationsUsed[operation]) {
      this.systemCallbacksUsage.operationsUsed[operation] = 0;
    }
    this.systemCallbacksUsage.operationsUsed[operation]++;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥—É–ª—è
   */
  getStats() {
    return {
      name: 'SystemCallbacks',
      total_requests: this.systemCallbacksUsage.totalRequests,
      operations_used: this.systemCallbacksUsage.operationsUsed,
      last_request: this.systemCallbacksUsage.lastRequest,
      diagnostics_runs: this.systemCallbacksUsage.diagnosticsRuns,
      most_used_operation: this.getMostUsedOperation(),
      last_updated: new Date().toISOString()
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∏–±–æ–ª–µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  getMostUsedOperation() {
    const operations = this.systemCallbacksUsage.operationsUsed;
    let maxOperation = null;
    let maxCount = 0;
    
    Object.entries(operations).forEach(([operation, count]) => {
      if (count > maxCount) {
        maxCount = count;
        maxOperation = operation;
      }
    });
    
    return maxOperation ? { operation: maxOperation, count: maxCount } : null;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  cleanup() {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ SystemCallbacks...');
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:', JSON.stringify(this.getStats(), null, 2));
    console.log('‚úÖ SystemCallbacks –æ—á–∏—â–µ–Ω');
  }
}

module.exports = SystemCallbacks;