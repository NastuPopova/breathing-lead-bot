// –§–∞–π–ª: modules/admin/callbacks/navigation_callbacks.js
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏

class NavigationCallbacks {
  constructor(adminHandlers, adminNotifications) {
    this.adminHandlers = adminHandlers;
    this.adminNotifications = adminNotifications;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    this.navigationStats = {
      totalNavigations: 0,
      routesUsed: {},
      lastNavigation: null
    };
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
   */
  async handleCallback(ctx, callbackData) {
    this.trackNavigation(callbackData);
    
    try {
      switch (callbackData) {
        case 'admin_main':
        case 'admin_refresh':
          await this.showMainPanel(ctx);
          break;
          
        case 'admin_help':
          await this.showHelp(ctx);
          break;
          
        default:
          return false; // –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —ç—Ç–∏–º –º–æ–¥—É–ª–µ–º
      }
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ NavigationCallbacks:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏
   */
  async showMainPanel(ctx) {
    console.log('üéõÔ∏è –ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏');
    
    try {
      await this.adminHandlers.handleMainCommand(ctx);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏:', error);
      await this.showErrorMessage(ctx, '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏');
    }
  }

  /**
   * –ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏
   */
  async showHelp(ctx) {
    console.log('üÜò –ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏');
    
    let message = `üÜò *–°–ü–†–ê–í–ö–ê –ü–û –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò*\n\n`;
    
    message += `üìã **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n`;
    message += `‚Ä¢ \`/admin\` - –≥–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å\n`;
    message += `‚Ä¢ \`/stats\` - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n`;
    message += `‚Ä¢ \`/hot_leads\` - –≥–æ—Ä—è—á–∏–µ –ª–∏–¥—ã\n`;
    message += `‚Ä¢ \`/search_lead <–∑–∞–ø—Ä–æ—Å>\` - –ø–æ–∏—Å–∫ –ª–∏–¥–æ–≤\n`;
    message += `‚Ä¢ \`/health\` - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã\n\n`;
    
    message += `üîç **–ü–æ–∏—Å–∫ –ª–∏–¥–æ–≤:**\n`;
    message += `–ú–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å –ø–æ:\n`;
    message += `‚Ä¢ Telegram ID: \`/search_lead 123456\`\n`;
    message += `‚Ä¢ –ò–º–µ–Ω–∏: \`/search_lead –ê–Ω–Ω–∞\`\n`;
    message += `‚Ä¢ –ü—Ä–æ–±–ª–µ–º–µ: \`/search_lead —Å—Ç—Ä–µ—Å—Å\`\n\n`;
    
    message += `üìä **–°–µ–≥–º–µ–Ω—Ç—ã –ª–∏–¥–æ–≤:**\n`;
    message += `‚Ä¢ üî• HOT_LEAD - —Ç—Ä–µ–±—É–µ—Ç —Å—Ä–æ—á–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è\n`;
    message += `‚Ä¢ ‚≠ê WARM_LEAD - –∞–∫—Ç–∏–≤–Ω–æ –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n`;
    message += `‚Ä¢ ‚ùÑÔ∏è COLD_LEAD - —É–º–µ—Ä–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å\n`;
    message += `‚Ä¢ üå± NURTURE_LEAD - –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ\n\n`;
    
    message += `‚ö° **–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**\n`;
    message += `‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n`;
    message += `‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –≥–æ—Ä—è—á–∏–º–∏ –ª–∏–¥–∞–º–∏\n`;
    message += `‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏\n`;

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
        ]
      }
    });
  }

  /**
   * –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
   */
  async showErrorMessage(ctx, errorText) {
    try {
      await ctx.editMessageText(`‚ùå ${errorText}`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'admin_main' }],
            [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
          ]
        }
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', error);
      await ctx.reply(`‚ùå ${errorText}`);
    }
  }

  /**
   * –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
   */
  trackNavigation(route) {
    this.navigationStats.totalNavigations++;
    this.navigationStats.lastNavigation = {
      route: route,
      timestamp: new Date().toISOString()
    };
    
    if (!this.navigationStats.routesUsed[route]) {
      this.navigationStats.routesUsed[route] = 0;
    }
    this.navigationStats.routesUsed[route]++;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  getStats() {
    return {
      name: 'NavigationCallbacks',
      total_navigations: this.navigationStats.totalNavigations,
      routes_used: this.navigationStats.routesUsed,
      last_navigation: this.navigationStats.lastNavigation,
      most_used_route: this.getMostUsedRoute(),
      last_updated: new Date().toISOString()
    };
  }

  getMostUsedRoute() {
    const routes = this.navigationStats.routesUsed;
    let maxRoute = null;
    let maxCount = 0;
    
    Object.entries(routes).forEach(([route, count]) => {
      if (count > maxCount) {
        maxCount = count;
        maxRoute = route;
      }
    });
    
    return maxRoute ? { route: maxRoute, count: maxCount } : null;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  cleanup() {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ NavigationCallbacks...');
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', JSON.stringify(this.getStats(), null, 2));
    console.log('‚úÖ NavigationCallbacks –æ—á–∏—â–µ–Ω');
  }
}

module.exports = NavigationCallbacks;
