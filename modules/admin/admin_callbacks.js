// –§–∞–π–ª: modules/admin/admin_callbacks.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-callback'–æ–≤ (–æ—Ç–¥–µ–ª–µ–Ω—ã –æ—Ç handlers.js)

const config = require('../../config');

class AdminCallbacks {
  constructor(adminHandlers, adminNotifications, verseAnalysis, leadTransfer) {
    this.adminHandlers = adminHandlers;
    this.adminNotifications = adminNotifications;
    this.verseAnalysis = verseAnalysis;
    this.leadTransfer = leadTransfer;
    this.adminId = config.ADMIN_ID;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ callback'–æ–≤
    this.callbackStats = {
      totalCallbacks: 0,
      callbacksUsed: {},
      lastCallback: null,
      errors: 0
    };
  }

  // ===== –ù–ê–°–¢–†–û–ô–ö–ê CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í =====

  setupCallbacks(bot) {
    if (!this.adminId) {
      console.log('‚ö†Ô∏è ADMIN_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∞–¥–º–∏–Ω-callbacks –æ—Ç–∫–ª—é—á–µ–Ω—ã');
      return;
    }

    console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–º–∏–Ω-callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...');

    // –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω-callback'–æ–≤
    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ handlers.js
    this.bot = bot;
    
    console.log('‚úÖ –ê–¥–º–∏–Ω-callbacks –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }

  // ===== –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö CALLBACK'–û–í =====

  async handleCallback(ctx, callbackData) {
    if (ctx.from.id.toString() !== this.adminId) {
      await ctx.answerCbQuery('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }

    await ctx.answerCbQuery().catch(() => {});
    
    try {
      this.trackCallbackUsage(callbackData);
      
      console.log(`üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω callback: ${callbackData}`);
      
      // –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è callback'–æ–≤
      await this.routeCallback(ctx, callbackData);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handleCallback:', error);
      this.callbackStats.errors++;
      
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
          ]
        }
      });
    }
  }

  // ===== –ú–ê–†–®–†–£–¢–ò–ó–ê–¶–ò–Ø CALLBACK'–û–í =====

  async routeCallback(ctx, callbackData) {
    // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–Ω–µ–ª–∏
    if (callbackData === 'admin_main' || callbackData === 'admin_refresh') {
      await this.showMainPanel(ctx);
    } 
    else if (callbackData === 'admin_stats') {
      await this.showStats(ctx);
    } 
    else if (callbackData === 'admin_analytics') {
      await this.showAnalytics(ctx);
    } 
    else if (callbackData === 'admin_hot_leads') {
      await this.showHotLeads(ctx);
    } 
    else if (callbackData === 'admin_today_leads') {
      await this.showTodayLeads(ctx);
    } 
    else if (callbackData === 'admin_system') {
      await this.showSystem(ctx);
    } 
    else if (callbackData === 'admin_export') {
      await this.showExport(ctx);
    } 
    else if (callbackData === 'admin_settings') {
      await this.showSettings(ctx);
    } 
    else if (callbackData === 'admin_help') {
      await this.showHelp(ctx);
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ admin_search
    else if (callbackData === 'admin_search') {
      await this.showSearchPanel(ctx);
    }
    
    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ —Å–∏—Å—Ç–µ–º–∞
    else if (callbackData === 'admin_detailed_diagnostics') {
      await this.showDetailedDiagnostics(ctx);
    } 
    else if (callbackData === 'admin_day_analytics') {
      await this.showDayAnalytics(ctx);
    }
    
    // –î–µ–π—Å—Ç–≤–∏—è —Å –ª–∏–¥–∞–º–∏
    else if (callbackData === 'admin_process_all_hot') {
      await this.processAllHotLeads(ctx);
    }
    
    // Callback'—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, admin_action_userId)
    else if (callbackData.startsWith('admin_') && callbackData.includes('_')) {
      await this.handleParameterizedCallback(ctx, callbackData);
    }
    
    // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback
    else {
      console.warn('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥–º–∏–Ω callback:', callbackData);
      await ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
          ]
        }
      });
    }
  }

  // ===== –û–°–ù–û–í–ù–´–ï –ü–ê–ù–ï–õ–ò =====

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å try-catch
  async showMainPanel(ctx) {
    console.log('üéõÔ∏è –ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏');
    
    try {
      // –î–µ–ª–µ–≥–∏—Ä—É–µ–º –≤ AdminHandlers
      await this.adminHandlers.handleMainCommand(ctx);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
      // (–º–µ—Ç–æ–¥ handleMainCommand —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç reply, –ø–æ—ç—Ç–æ–º—É –Ω–∏—á–µ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º)
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏:', error);
      await this.showErrorMessage(ctx, '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏');
    }
  }

  async showStats(ctx) {
    console.log('üìä –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    
    try {
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å fallback
      const stats = this.adminNotifications?.getStats?.() || this.getDefaultStats();
      
      let message = `üìä *–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê*\n\n`;
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–∏–¥–æ–≤
      message += `üë• *–õ–ò–î–´:*\n`;
      message += `‚Ä¢ –í—Å–µ–≥–æ —Å–µ–≥–æ–¥–Ω—è: ${stats.daily_stats?.totalLeads || 0}\n`;
      message += `‚Ä¢ üî• –ì–æ—Ä—è—á–∏–µ: ${stats.daily_stats?.hotLeads || 0}\n`;
      message += `‚Ä¢ ‚≠ê –¢–µ–ø–ª—ã–µ: ${stats.daily_stats?.warmLeads || 0}\n`;
      message += `‚Ä¢ ‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω—ã–µ: ${stats.daily_stats?.coldLeads || 0}\n`;
      message += `‚Ä¢ üå± –î–ª—è –≤–∑—Ä–∞—â–∏–≤–∞–Ω–∏—è: ${stats.daily_stats?.nurtureLeads || 0}\n\n`;
      
      // –ö–æ–Ω–≤–µ—Ä—Å–∏—è
      const totalLeads = stats.daily_stats?.totalLeads || 0;
      const hotLeads = stats.daily_stats?.hotLeads || 0;
      const conversionRate = totalLeads > 0 ? ((hotLeads / totalLeads) * 100).toFixed(1) : 0;
      
      message += `üìà *–ö–û–ù–í–ï–†–°–ò–Ø:*\n`;
      message += `‚Ä¢ –í –≥–æ—Ä—è—á–∏–µ –ª–∏–¥—ã: ${conversionRate}%\n`;
      message += `‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª VERSE: ${this.getAverageScore()}/100\n\n`;
      
      // –°–∏—Å—Ç–µ–º–∞
      message += `ü§ñ *–°–ò–°–¢–ï–ú–ê:*\n`;
      message += `‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${this.formatUptime(process.uptime())}\n`;
      message += `‚Ä¢ –ü–∞–º—è—Ç—å: ${this.getMemoryUsage()}MB\n`;
      message += `‚Ä¢ –°—Ç–∞—Ç—É—Å: –†–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ\n`;

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞', callback_data: 'admin_analytics' }],
            [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
          ]
        }
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      await this.showErrorMessage(ctx, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
  }

  async showAnalytics(ctx) {
    console.log('üìà –ü–æ–∫–∞–∑ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏');
    
    try {
      const leadsData = this.adminNotifications.leadDataStorage || {};
      const analysis = this.analyzeLeadsData(leadsData);

      let message = `üìà *–ê–ù–ê–õ–ò–¢–ò–ö–ê –õ–ò–î–û–í*\n\n`;
      
      // –¢–æ–ø –ø—Ä–æ–±–ª–µ–º—ã
      message += `üéØ *–¢–û–ü-5 –ü–†–û–ë–õ–ï–ú:*\n`;
      if (analysis.topIssues.length > 0) {
        analysis.topIssues.forEach((issue, index) => {
          message += `${index + 1}. ${this.translateIssue(issue.key)}: ${issue.count}\n`;
        });
      } else {
        message += `–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö\n`;
      }
      message += `\n`;
      
      // –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã
      message += `üë• *–í–û–ó–†–ê–°–¢–ù–´–ï –ì–†–£–ü–ü–´:*\n`;
      if (Object.keys(analysis.ageGroups).length > 0) {
        Object.entries(analysis.ageGroups).forEach(([age, count]) => {
          const percentage = ((count / analysis.totalLeads) * 100).toFixed(1);
          message += `‚Ä¢ ${this.translateAge(age)}: ${count} (${percentage}%)\n`;
        });
      } else {
        message += `–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö\n`;
      }
      message += `\n`;
      
      // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
      message += `üìä *–û–°–ù–û–í–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:*\n`;
      message += `‚Ä¢ –í—Å–µ–≥–æ –ª–∏–¥–æ–≤: ${analysis.totalLeads}\n`;
      message += `‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: ${analysis.averageScore.toFixed(1)}\n`;
      if (analysis.topIssues.length > 0) {
        message += `‚Ä¢ –ì–ª–∞–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞: ${this.translateIssue(analysis.topIssues[0]?.key)}\n`;
      }

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' }],
            [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
          ]
        }
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
      await this.showErrorMessage(ctx, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏');
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä—è—á–∏—Ö –ª–∏–¥–æ–≤ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
  async showHotLeads(ctx) {
    console.log('üî• –ü–æ–∫–∞–∑ –≥–æ—Ä—è—á–∏—Ö –ª–∏–¥–æ–≤');
    
    try {
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ leadDataStorage
      if (!this.adminNotifications.leadDataStorage) {
        console.warn('‚ö†Ô∏è leadDataStorage –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
        this.adminNotifications.leadDataStorage = {};
      }

      const leads = Object.values(this.adminNotifications.leadDataStorage || {})
        .filter(lead => lead.analysisResult?.segment === 'HOT_LEAD')
        .sort((a, b) => new Date(b.timestamp || 0) - new Date(a.timestamp || 0))
        .slice(0, 10);

      if (!leads.length) {
        await ctx.editMessageText('‚úÖ –ù–µ—Ç –≥–æ—Ä—è—á–∏—Ö –ª–∏–¥–æ–≤', {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_hot_leads' }],
              [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
            ]
          }
        });
        return;
      }

      let message = `üî• *–ì–û–†–Ø–ß–ò–ï –õ–ò–î–´ (${leads.length})*\n\n`;
      
      leads.forEach((lead, index) => {
        const user = lead.userInfo;
        const score = lead.analysisResult?.scores?.total || 0;
        const timeAgo = this.getTimeAgo(lead.timestamp);
        
        message += `${index + 1}. **${user?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}**\n`;
        message += `   üÜî ID: \`${user?.telegram_id}\`\n`;
        message += `   üìä –ë–∞–ª–ª: ${score}/100\n`;
        message += `   ‚è∞ ${timeAgo}\n`;
        message += `   üéØ ${this.translateIssue(lead.analysisResult?.primaryIssue)}\n\n`;
      });

      const keyboard = [
        [{ text: 'üìû –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ—Ö', callback_data: 'admin_process_all_hot' }],
        [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_hot_leads' }],
        [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
      ];

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≥–æ—Ä—è—á–∏—Ö –ª–∏–¥–æ–≤:', error);
      await this.showErrorMessage(ctx, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä—è—á–∏—Ö –ª–∏–¥–æ–≤');
    }
  }

  async showTodayLeads(ctx) {
    console.log('üìã –ü–æ–∫–∞–∑ –ª–∏–¥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è');
    
    try {
      const today = new Date().toDateString();
      const leads = Object.values(this.adminNotifications.leadDataStorage || {})
        .filter(lead => {
          const leadDate = lead.timestamp ? new Date(lead.timestamp).toDateString() : null;
          return leadDate === today;
        })
        .sort((a, b) => new Date(b.timestamp || 0) - new Date(a.timestamp || 0));

      if (!leads.length) {
        await ctx.editMessageText('üìã *–õ–ò–î–´ –°–ï–ì–û–î–ù–Ø*\n\n‚úÖ –°–µ–≥–æ–¥–Ω—è –ª–∏–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç', {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_today_leads' }],
              [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
            ]
          }
        });
        return;
      }

      let message = `üìã *–õ–ò–î–´ –°–ï–ì–û–î–ù–Ø (${leads.length})*\n\n`;
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
      const bySegment = leads.reduce((acc, lead) => {
        const segment = lead.analysisResult?.segment || 'UNKNOWN';
        if (!acc[segment]) acc[segment] = [];
        acc[segment].push(lead);
        return acc;
      }, {});

      Object.entries(bySegment).forEach(([segment, segmentLeads]) => {
        const emoji = this.getSegmentEmoji(segment);
        message += `${emoji} **${segment}** (${segmentLeads.length}):\n`;
        
        segmentLeads.slice(0, 3).forEach(lead => {
          const user = lead.userInfo;
          const time = new Date(lead.timestamp).toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit'
          });
          message += `   ‚Ä¢ ${user?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (${time})\n`;
        });
        
        if (segmentLeads.length > 3) {
          message += `   ‚Ä¢ ... –∏ –µ—â–µ ${segmentLeads.length - 3}\n`;
        }
        message += `\n`;
      });

      const keyboard = [
        [
          { text: 'üî• –¢–æ–ª—å–∫–æ –≥–æ—Ä—è—á–∏–µ', callback_data: 'admin_hot_leads' },
          { text: 'üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–Ω—è', callback_data: 'admin_day_analytics' }
        ],
        [
          { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin_today_leads' },
          { text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }
        ]
      ];

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ª–∏–¥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:', error);
      await this.showErrorMessage(ctx, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è');
    }
  }
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ª–∏–¥–æ–≤
  async showSearchPanel(ctx) {
    console.log('üîç –ü–æ–∫–∞–∑ –ø–∞–Ω–µ–ª–∏ –ø–æ–∏—Å–∫–∞ –ª–∏–¥–æ–≤');
    
    let message = `üîç *–ü–û–ò–°–ö –õ–ò–î–û–í*\n\n`;
    message += `–î–ª—è –ø–æ–∏—Å–∫–∞ –ª–∏–¥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n`;
    message += `\`/search_lead <–∑–∞–ø—Ä–æ—Å>\`\n\n`;
    message += `**–ú–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å –ø–æ:**\n`;
    message += `‚Ä¢ Telegram ID\n`;
    message += `‚Ä¢ –ò–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`;
    message += `‚Ä¢ Username (–±–µ–∑ @)\n`;
    message += `‚Ä¢ –ü—Ä–æ–±–ª–µ–º–µ\n`;
    message += `‚Ä¢ –°–µ–≥–º–µ–Ω—Ç—É\n\n`;
    message += `**–ü—Ä–∏–º–µ—Ä—ã:**\n`;
    message += `\`/search_lead 123456789\`\n`;
    message += `\`/search_lead –ê–Ω–Ω–∞\`\n`;
    message += `\`/search_lead —Å—Ç—Ä–µ—Å—Å\`\n`;
    message += `\`/search_lead HOT_LEAD\`\n\n`;
    
    const totalLeads = Object.keys(this.adminNotifications.leadDataStorage || {}).length;
    message += `üìä **–í—Å–µ–≥–æ –ª–∏–¥–æ–≤ –≤ –±–∞–∑–µ:** ${totalLeads}`;

    try {
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìã –í—Å–µ –ª–∏–¥—ã —Å–µ–≥–æ–¥–Ω—è', callback_data: 'admin_today_leads' }],
            [{ text: 'üî• –ì–æ—Ä—è—á–∏–µ –ª–∏–¥—ã', callback_data: 'admin_hot_leads' }],
            [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
          ]
        }
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–∞–Ω–µ–ª–∏ –ø–æ–∏—Å–∫–∞:', error);
      await this.showErrorMessage(ctx, '–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞–Ω–µ–ª–∏ –ø–æ–∏—Å–∫–∞');
    }
  }

  async showSystem(ctx) {
    console.log('üîß –ü–æ–∫–∞–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
    
    try {
      const health = await this.getSystemHealthData();
      
      let message = `üîß *–°–û–°–¢–û–Ø–ù–ò–ï –°–ò–°–¢–ï–ú–´*\n\n`;
      
      // –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
      const statusEmoji = health.overall === 'HEALTHY' ? '‚úÖ' : health.overall === 'DEGRADED' ? '‚ö†Ô∏è' : '‚ùå';
      message += `${statusEmoji} **–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:** ${health.overall}\n\n`;
      
      // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
      message += `ü§ñ *–ö–û–ú–ü–û–ù–ï–ù–¢–´:*\n`;
      Object.entries(health.components).forEach(([component, data]) => {
        const emoji = data.status === 'HEALTHY' ? '‚úÖ' : data.status === 'DEGRADED' ? '‚ö†Ô∏è' : '‚ùå';
        message += `${emoji} ${component}: ${data.status}\n`;
      });
      message += `\n`;
      
      // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
      message += `üìä *–ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:*\n`;
      message += `‚Ä¢ –ü–∞–º—è—Ç—å: ${health.performance.memory}MB\n`;
      message += `‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${this.formatUptime(health.performance.uptime)}\n\n`;
      
      // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
      message += `üîó *–ò–ù–¢–ï–ì–†–ê–¶–ò–ò:*\n`;
      message += `‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç: ${health.integrations.mainBot ? '‚úÖ' : '‚ùå'}\n`;
      message += `‚Ä¢ CRM: ${health.integrations.crm ? '‚úÖ' : '‚ùå'}\n`;

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', callback_data: 'admin_detailed_diagnostics' }],
            [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
          ]
        }
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error);
      await this.showErrorMessage(ctx, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
    }
  }

  async showExport(ctx) {
    console.log('üì§ –ü–æ–∫–∞–∑ –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞');
    
    let message = `üì§ *–≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–•*\n\n`;
    message += `–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:\n\n`;
    message += `üìã **–õ–∏–¥—ã:**\n`;
    message += `‚Ä¢ –í—Å–µ –ª–∏–¥—ã\n`;
    message += `‚Ä¢ –¢–æ–ª—å–∫–æ –≥–æ—Ä—è—á–∏–µ –ª–∏–¥—ã\n`;
    message += `‚Ä¢ –õ–∏–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n\n`;
    message += `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n`;
    message += `‚Ä¢ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n`;
    message += `‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º\n\n`;
    message += `‚ö†Ô∏è *–§—É–Ω–∫—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*`;

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üìã –õ–∏–¥—ã (—Å–∫–æ—Ä–æ)', callback_data: 'admin_export_leads' },
            { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Å–∫–æ—Ä–æ)', callback_data: 'admin_export_stats' }
          ],
          [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
        ]
      }
    });
  }

  async showSettings(ctx) {
    console.log('‚öôÔ∏è –ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    
    let message = `‚öôÔ∏è *–ù–ê–°–¢–†–û–ô–ö–ò –°–ò–°–¢–ï–ú–´*\n\n`;
    message += `üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**\n`;
    message += `‚Ä¢ –ì–æ—Ä—è—á–∏–µ –ª–∏–¥—ã: ‚úÖ\n`;
    message += `‚Ä¢ –¢–µ–ø–ª—ã–µ –ª–∏–¥—ã: ‚úÖ\n`;
    message += `‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ—à–∏–±–∫–∏: ‚úÖ\n\n`;
    message += `üìä **–°–∏—Å—Ç–µ–º–∞:**\n`;
    message += `‚Ä¢ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤: 7 –¥–Ω–µ–π\n`;
    message += `‚Ä¢ –õ–∏–º–∏—Ç rate limiting: —É–ª—É—á—à–µ–Ω–Ω—ã–π\n`;
    message += `‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π: –≤–∫–ª—é—á–µ–Ω–æ\n\n`;
    message += `‚ö†Ô∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*`;

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Å–∫–æ—Ä–æ)', callback_data: 'admin_notifications' }],
          [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
        ]
      }
    });
  }

  async showHelp(ctx) {
    console.log('üÜò –ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏');
    
    let message = `üÜò *–°–ü–†–ê–í–ö–ê –ü–û –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò*\n\n`;
    
    message += `üìã **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n`;
    message += `‚Ä¢ \`/admin\` - –≥–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å\n`;
    message += `‚Ä¢ \`/stats\` - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n`;
    message += `‚Ä¢ \`/hot_leads\` - –≥–æ—Ä—è—á–∏–µ –ª–∏–¥—ã\n`;
    message += `‚Ä¢ \`/search_lead <–∑–∞–ø—Ä–æ—Å>\` - –ø–æ–∏—Å–∫ –ª–∏–¥–æ–≤\n`;
    message += `‚Ä¢ \`/health\` - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã\n\n`;
    
    message += `üîç **–ü–æ–∏—Å–∫ –ª–∏–¥–æ–≤:**\n`;
    message += `–ú–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å –ø–æ:\n`;
    message += `‚Ä¢ Telegram ID: \`/search_lead 123456\`\n`;
    message += `‚Ä¢ –ò–º–µ–Ω–∏: \`/search_lead –ê–Ω–Ω–∞\`\n`;
    message += `‚Ä¢ –ü—Ä–æ–±–ª–µ–º–µ: \`/search_lead —Å—Ç—Ä–µ—Å—Å\`\n\n`;
    
    message += `üìä **–°–µ–≥–º–µ–Ω—Ç—ã –ª–∏–¥–æ–≤:**\n`;
    message += `‚Ä¢ üî• HOT_LEAD - —Ç—Ä–µ–±—É–µ—Ç —Å—Ä–æ—á–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è\n`;
    message += `‚Ä¢ ‚≠ê WARM_LEAD - –∞–∫—Ç–∏–≤–Ω–æ –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n`;
    message += `‚Ä¢ ‚ùÑÔ∏è COLD_LEAD - —É–º–µ—Ä–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å\n`;
    message += `‚Ä¢ üå± NURTURE_LEAD - –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ\n\n`;
    
    message += `‚ö° **–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**\n`;
    message += `‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n`;
    message += `‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –≥–æ—Ä—è—á–∏–º–∏ –ª–∏–¥–∞–º–∏\n`;
    message += `‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏\n`;

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
        ]
      }
    });
  }

  // ===== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–ê–ù–ï–õ–ò =====

  async showDetailedDiagnostics(ctx) {
    console.log('üîç –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
    
    try {
      const diagnostics = await this.runDiagnostics();
      
      let message = `üîç *–î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê*\n\n`;
      
      const statusEmoji = {
        'OK': '‚úÖ',
        'WARNING': '‚ö†Ô∏è',
        'ERROR': '‚ùå',
        'UNKNOWN': '‚ùì'
      };

      message += `${statusEmoji[diagnostics.overall_status]} **–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:** ${diagnostics.overall_status}\n`;
      message += `üïê –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n\n`;

      Object.entries(diagnostics.checks).forEach(([checkName, result]) => {
        const emoji = statusEmoji[result.status] || '‚ùì';
        const name = checkName.replace(/_/g, ' ').toUpperCase();
        message += `${emoji} **${name}:**\n`;
        message += `‚îî‚îÄ ${result.message}\n\n`;
      });

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîß –°–∏—Å—Ç–µ–º–∞', callback_data: 'admin_system' }],
            [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
          ]
        }
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
      await this.showErrorMessage(ctx, '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
    }
  }

 async showDayAnalytics(ctx) {
    console.log('üìä –ü–æ–∫–∞–∑ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞ –¥–µ–Ω—å');
    
    try {
      const today = new Date().toDateString();
      const todayLeads = Object.values(this.adminNotifications.leadDataStorage || {})
        .filter(lead => {
          const leadDate = lead.timestamp ? new Date(lead.timestamp).toDateString() : null;
          return leadDate === today;
        });

      let message = `üìä *–ê–ù–ê–õ–ò–¢–ò–ö–ê –ó–ê –°–ï–ì–û–î–ù–Ø*\n\n`;
      message += `üìÖ ${new Date().toLocaleDateString('ru-RU')}\n\n`;
      
      if (!todayLeads.length) {
        message += `üìã –°–µ–≥–æ–¥–Ω—è –ª–∏–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç`;
      } else {
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
        const segmentStats = todayLeads.reduce((acc, lead) => {
          const segment = lead.analysisResult?.segment || 'UNKNOWN';
          acc[segment] = (acc[segment] || 0) + 1;
          return acc;
        }, {});

        message += `üë• **–õ–∏–¥—ã –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º:**\n`;
        Object.entries(segmentStats).forEach(([segment, count]) => {
          const emoji = this.getSegmentEmoji(segment);
          const percentage = ((count / todayLeads.length) * 100).toFixed(1);
          message += `${emoji} ${segment}: ${count} (${percentage}%)\n`;
        });

        // –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª
        const scores = todayLeads
          .map(lead => lead.analysisResult?.scores?.total)
          .filter(score => typeof score === 'number');
        
        const avgScore = scores.length > 0 ? 
          (scores.reduce((sum, score) => sum + score, 0) / scores.length).toFixed(1) : 0;

        message += `\nüìà **–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**\n`;
        message += `‚Ä¢ –í—Å–µ–≥–æ –ª–∏–¥–æ–≤: ${todayLeads.length}\n`;
        message += `‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: ${avgScore}/100\n`;
        message += `‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –≥–æ—Ä—è—á–∏–µ: ${segmentStats.HOT_LEAD ? 
          ((segmentStats.HOT_LEAD / todayLeads.length) * 100).toFixed(1) : 0}%\n`;
      }

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìã –í—Å–µ –ª–∏–¥—ã —Å–µ–≥–æ–¥–Ω—è', callback_data: 'admin_today_leads' }],
            [{ text: 'üìà –û–±—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞', callback_data: 'admin_analytics' }],
            [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
          ]
        }
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞ –¥–µ–Ω—å:', error);
      await this.showErrorMessage(ctx, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞ –¥–µ–Ω—å');
    }
  }

  // ===== –î–ï–ô–°–¢–í–ò–Ø –° –õ–ò–î–ê–ú–ò =====

  async processAllHotLeads(ctx) {
    console.log('üìû –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –≥–æ—Ä—è—á–∏—Ö –ª–∏–¥–æ–≤');
    
    const hotLeads = Object.values(this.adminNotifications.leadDataStorage || {})
      .filter(lead => lead.analysisResult?.segment === 'HOT_LEAD');

    if (!hotLeads.length) {
      await ctx.editMessageText('‚úÖ –ù–µ—Ç –≥–æ—Ä—è—á–∏—Ö –ª–∏–¥–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏', {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
          ]
        }
      });
      return;
    }

    let message = `üìû *–û–ë–†–ê–ë–û–¢–ö–ê –ì–û–†–Ø–ß–ò–• –õ–ò–î–û–í*\n\n`;
    message += `üî• –ù–∞–π–¥–µ–Ω–æ –≥–æ—Ä—è—á–∏—Ö –ª–∏–¥–æ–≤: ${hotLeads.length}\n\n`;
    message += `**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**\n`;
    message += `‚Ä¢ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–∞–∂–¥—ã–º –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤\n`;
    message += `‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n`;
    message += `‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n\n`;
    message += `**–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:**\n`;
    
    hotLeads.slice(0, 5).forEach((lead, index) => {
      const user = lead.userInfo;
      message += `${index + 1}. ${user?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} - `;
      if (user?.username) {
        message += `@${user.username}\n`;
      } else {
        message += `ID: ${user?.telegram_id}\n`;
      }
    });

    if (hotLeads.length > 5) {
      message += `... –∏ –µ—â–µ ${hotLeads.length - 5} –ª–∏–¥–æ–≤\n`;
    }

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üî• –ì–æ—Ä—è—á–∏–µ –ª–∏–¥—ã', callback_data: 'admin_hot_leads' }],
          [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
        ]
      }
    });
  }

  // ===== –û–ë–†–ê–ë–û–¢–ö–ê –ü–ê–†–ê–ú–ï–¢–†–ò–ó–û–í–ê–ù–ù–´–• CALLBACK'–û–í =====

  async handleParameterizedCallback(ctx, callbackData) {
    console.log(`üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ callback: ${callbackData}`);
    
    // –ü–∞—Ä—Å–∏–º callback —Ç–∏–ø–∞ admin_action_userId
    const parts = callbackData.split('_');
    if (parts.length < 3) {
      console.warn('‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback:', callbackData);
      await ctx.reply('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã');
      return;
    }

    const action = parts.slice(1, -1).join('_');
    const targetUserId = parts[parts.length - 1];
    
    console.log(`üîç Parsed callback: action=${action}, userId=${targetUserId}`);
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å –ª–∏–¥–∞–º–∏
    switch (action) {
      case 'view_lead':
        await this.viewLeadDetails(ctx, targetUserId);
        break;
      case 'contact_lead':
        await this.contactLead(ctx, targetUserId);
        break;
      case 'mark_processed':
        await this.markLeadProcessed(ctx, targetUserId);
        break;
      default:
        console.warn('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', action);
        await ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ');
    }
  }

  async viewLeadDetails(ctx, userId) {
    const leadData = this.adminNotifications.leadDataStorage[userId];
    if (!leadData) {
      await ctx.reply('–õ–∏–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    let message = `üë§ *–î–ï–¢–ê–õ–ò –õ–ò–î–ê*\n\n`;
    message += `üÜî ID: ${userId}\n`;
    message += `üë§ –ò–º—è: ${leadData.userInfo?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
    message += `üìä –°–µ–≥–º–µ–Ω—Ç: ${this.getSegmentEmoji(leadData.analysisResult?.segment)} ${leadData.analysisResult?.segment}\n`;
    message += `üéØ –ü—Ä–æ–±–ª–µ–º–∞: ${this.translateIssue(leadData.analysisResult?.primaryIssue)}\n`;
    message += `‚è∞ –í—Ä–µ–º—è: ${this.getTimeAgo(leadData.timestamp)}`;

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_main' }]
        ]
      }
    });
  }

  async contactLead(ctx, userId) {
    const leadData = this.adminNotifications.leadDataStorage[userId];
    if (!leadData) {
      await ctx.reply('–õ–∏–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    let message = `üìû *–ö–û–ù–¢–ê–ö–¢ –° –õ–ò–î–û–ú*\n\n`;
    message += `üë§ ${leadData.userInfo?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
    if (leadData.userInfo?.username) {
      message += `üí¨ @${leadData.userInfo.username}\n`;
    }
    message += `üÜî ID: ${userId}\n\n`;
    message += `‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ "–°–≤—è–∑–∞–ª–∏—Å—å"`;

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –ö –ª–∏–¥–∞–º', callback_data: 'admin_hot_leads' }]
        ]
      }
    });
  }

  async markLeadProcessed(ctx, userId) {
    let message = `‚úÖ *–õ–ò–î –û–ë–†–ê–ë–û–¢–ê–ù*\n\n`;
    message += `üë§ ID: ${userId}\n`;
    message += `üïê –û–±—Ä–∞–±–æ—Ç–∞–Ω: ${new Date().toLocaleString('ru-RU')}\n\n`;
    message += `üìä –°—Ç–∞—Ç—É—Å: –ó–∞–∫—Ä—ã—Ç`;

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –ö –ª–∏–¥–∞–º', callback_data: 'admin_hot_leads' }]
        ]
      }
    });
  }

  // ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====

  trackCallbackUsage(callbackData) {
    this.callbackStats.totalCallbacks++;
    this.callbackStats.lastCallback = {
      callback: callbackData,
      timestamp: new Date().toISOString()
    };
    
    if (!this.callbackStats.callbacksUsed[callbackData]) {
      this.callbackStats.callbacksUsed[callbackData] = 0;
    }
    this.callbackStats.callbacksUsed[callbackData]++;
  }

  async showErrorMessage(ctx, errorText) {
    try {
      await ctx.editMessageText(`‚ùå ${errorText}`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'admin_main' }],
            [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
          ]
        }
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', error);
      await ctx.reply(`‚ùå ${errorText}`);
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ getDefaultStats –¥–ª—è fallback
  getDefaultStats() {
    return {
      daily_stats: { 
        totalLeads: 0, 
        hotLeads: 0, 
        warmLeads: 0, 
        coldLeads: 0, 
        nurtureLeads: 0 
      },
      requests: { total: 0, unique_users: 0 },
      sessions: { created: 0 },
      errors: { handled: 0 },
      uptime: { hours: Math.round(process.uptime() / 3600) }
    };
  }

  getAverageScore() {
    const leads = Object.values(this.adminNotifications.leadDataStorage || {});
    if (!leads.length) return 0;
    
    const scores = leads
      .map(lead => lead.analysisResult?.scores?.total)
      .filter(score => typeof score === 'number');
    
    if (!scores.length) return 0;
    return Math.round(scores.reduce((sum, score) => sum + score, 0) / scores.length);
  }

  analyzeLeadsData(leadsData) {
    const leads = Object.values(leadsData);
    const analysis = {
      totalLeads: leads.length,
      topIssues: [],
      ageGroups: {},
      averageScore: 0
    };

    if (!leads.length) return analysis;

    let totalScore = 0;
    const issueCount = {};

    leads.forEach(lead => {
      // –ü—Ä–æ–±–ª–µ–º—ã
      const issue = lead.analysisResult?.primaryIssue;
      if (issue) {
        issueCount[issue] = (issueCount[issue] || 0) + 1;
      }

      // –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã
      const age = lead.surveyAnswers?.age_group || lead.surveyAnswers?.child_age_detail;
      if (age) {
        analysis.ageGroups[age] = (analysis.ageGroups[age] || 0) + 1;
      }

      // –ë–∞–ª–ª
      const score = lead.analysisResult?.scores?.total;
      if (typeof score === 'number') {
        totalScore += score;
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ø –ø—Ä–æ–±–ª–µ–º
    analysis.topIssues = Object.entries(issueCount)
      .map(([key, count]) => ({ key, count }))
      .sort((a, b) => b.count - a.count)
      .slice(0, 5);

    analysis.averageScore = leads.length > 0 ? totalScore / leads.length : 0;

    return analysis;
  }

  async getSystemHealthData() {
    return {
      overall: 'HEALTHY',
      components: {
        'telegram_bot': { status: 'HEALTHY' },
        'admin_callbacks': { status: 'HEALTHY' },
        'lead_storage': { status: 'HEALTHY' },
        'pdf_generator': { status: 'HEALTHY' }
      },
      performance: {
        memory: Math.round(process.memoryUsage().heapUsed / 1024 / 1024),
        uptime: process.uptime()
      },
      integrations: {
        mainBot: !!config.MAIN_BOT_API_URL,
        crm: !!config.CRM_WEBHOOK_URL,
        database: !!config.DATABASE_URL
      }
    };
  }

  async runDiagnostics() {
    const results = {
      timestamp: new Date().toISOString(),
      overall_status: 'OK',
      checks: {
        admin_callbacks: {
          status: 'OK',
          message: '–ê–¥–º–∏–Ω-callbacks —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
        },
        data_access: {
          status: 'OK',
          message: `–î–æ—Å—Ç—É–ø –∫ ${Object.keys(this.adminNotifications.leadDataStorage || {}).length} –ª–∏–¥–∞–º`
        },
        system_resources: {
          status: this.getMemoryUsage() < 500 ? 'OK' : 'WARNING',
          message: `–ü–∞–º—è—Ç—å: ${this.getMemoryUsage()}MB`
        }
      }
    };

    return results;
  }

  // –£—Ç–∏–ª–∏—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–¥—É–±–ª–∏—Ä—É–µ–º –∏–∑ AdminHandlers –¥–ª—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)
  formatUptime(seconds) {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    
    if (hours > 24) {
      const days = Math.floor(hours / 24);
      const remainingHours = hours % 24;
      return `${days}–¥ ${remainingHours}—á ${minutes}–º`;
    }
    
    return `${hours}—á ${minutes}–º`;
  }

  getTimeAgo(timestamp) {
    if (!timestamp) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    
    const now = new Date();
    const time = new Date(timestamp);
    const diffMs = now - time;
    const diffMins = Math.floor(diffMs / 60000);
    
    if (diffMins < 1) return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
    if (diffMins < 60) return `${diffMins} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    
    const diffHours = Math.floor(diffMins / 60);
    if (diffHours < 24) return `${diffHours} —á –Ω–∞–∑–∞–¥`;
    
    const diffDays = Math.floor(diffHours / 24);
    return `${diffDays} –¥–Ω –Ω–∞–∑–∞–¥`;
  }

  getMemoryUsage() {
    return Math.round(process.memoryUsage().heapUsed / 1024 / 1024);
  }

  getSegmentEmoji(segment) {
    const emojis = {
      'HOT_LEAD': 'üî•',
      'WARM_LEAD': '‚≠ê',
      'COLD_LEAD': '‚ùÑÔ∏è',
      'NURTURE_LEAD': 'üå±'
    };
    return emojis[segment] || '‚ùì';
  }

  translateIssue(issue) {
    const translations = {
      'chronic_stress': '–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç—Ä–µ—Å—Å',
      'anxiety': '–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å',
      'insomnia': '–ë–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞',
      'breathing_issues': '–ü—Ä–æ–±–ª–µ–º—ã —Å –¥—ã—Ö–∞–Ω–∏–µ–º',
      'high_pressure': '–í—ã—Å–æ–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ',
      'fatigue': '–£—Å—Ç–∞–ª–æ—Å—Ç—å',
      'hyperactivity': '–ì–∏–ø–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
      'sleep_problems': '–ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–Ω–æ–º'
    };
    return translations[issue] || issue || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
  }

  translateAge(age) {
    const translations = {
      '18-30': '18-30 –ª–µ—Ç',
      '31-45': '31-45 –ª–µ—Ç',
      '46-60': '46-60 –ª–µ—Ç',
      '60+': '60+ –ª–µ—Ç',
      '3-4': '3-4 –≥–æ–¥–∞',
      '5-6': '5-6 –ª–µ—Ç',
      '7-8': '7-8 –ª–µ—Ç',
      '9-10': '9-10 –ª–µ—Ç'
    };
    return translations[age] || age || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
  }

  // ===== –≠–ö–°–ü–û–†–¢ –°–¢–ê–¢–ò–°–¢–ò–ö–ò =====

  getCallbackStats() {
    return {
      ...this.callbackStats,
      admin_id: this.adminId,
      uptime: this.formatUptime(process.uptime()),
      memory_usage: this.getMemoryUsage()
    };
  }

  exportCallbackInfo() {
    return {
      name: 'AdminCallbacks',
      version: '1.0.0',
      admin_id: this.adminId,
      features: [
        'main_panel_navigation',
        'statistics_display',
        'analytics_visualization',
        'lead_management',
        'system_monitoring',
        'search_interface',
        'error_handling'
      ],
      callback_stats: this.getCallbackStats(),
      last_updated: new Date().toISOString()
    };
  }

  cleanup() {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ AdminCallbacks...');
    console.log('üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ callbacks:', JSON.stringify(this.getCallbackStats(), null, 2));
    console.log('‚úÖ AdminCallbacks –æ—á–∏—â–µ–Ω');
  }
}

module.exports = AdminCallbacks;