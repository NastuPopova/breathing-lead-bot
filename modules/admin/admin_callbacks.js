// –§–∞–π–ª: modules/admin/admin_callbacks.js - –†–ï–§–ê–ö–¢–û–†–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
// –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä callback'–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥—É–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É)

const NavigationCallbacks = require('./callbacks/navigation_callbacks');
const StatsCallbacks = require('./callbacks/stats_callbacks');
const LeadsCallbacks = require('./callbacks/leads_callbacks');
const SystemCallbacks = require('./callbacks/system_callbacks');
const config = require('../../config');

class AdminCallbacks {
  constructor(adminHandlers, adminNotifications, verseAnalysis, leadTransfer) {
    this.adminHandlers = adminHandlers;
    this.adminNotifications = adminNotifications;
    this.verseAnalysis = verseAnalysis;
    this.leadTransfer = leadTransfer;
    this.adminId = config.ADMIN_ID;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    this.navigationCallbacks = new NavigationCallbacks(adminHandlers, adminNotifications);
    this.statsCallbacks = new StatsCallbacks(adminHandlers, adminNotifications);
    this.leadsCallbacks = new LeadsCallbacks(adminHandlers, adminNotifications);
    this.systemCallbacks = new SystemCallbacks(adminHandlers, adminNotifications);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—â–∏—Ö callback'–æ–≤
    this.callbackStats = {
      totalCallbacks: 0,
      callbacksUsed: {},
      lastCallback: null,
      errors: 0,
      moduleStats: {
        navigation: 0,
        stats: 0,
        leads: 0,
        system: 0,
        other: 0
      }
    };

    console.log('‚úÖ AdminCallbacks –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π');
  }

  // ===== –ù–ê–°–¢–†–û–ô–ö–ê CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í =====

  setupCallbacks(bot) {
    if (!this.adminId) {
      console.log('‚ö†Ô∏è ADMIN_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∞–¥–º–∏–Ω-callbacks –æ—Ç–∫–ª—é—á–µ–Ω—ã');
      return;
    }

    console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥—É–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω-callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...');
    this.bot = bot;
    console.log('‚úÖ –ê–¥–º–∏–Ω-callbacks –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }

  // ===== –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö CALLBACK'–û–í =====

  async handleCallback(ctx, callbackData) {
    if (ctx.from.id.toString() !== this.adminId) {
      await ctx.answerCbQuery('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      return;
    }

    await ctx.answerCbQuery().catch(() => {});
    
    try {
      this.trackCallbackUsage(callbackData);
      
      console.log(`üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω callback: ${callbackData}`);
      
      // –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ –º–æ–¥—É–ª—è–º
      const handled = await this.routeCallbackToModules(ctx, callbackData);
      
      if (!handled) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ callback'—ã
        if (callbackData.includes('_') && callbackData.startsWith('admin_')) {
          await this.handleParameterizedCallback(ctx, callbackData);
        } else {
          console.warn('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥–º–∏–Ω callback:', callbackData);
          await ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞', {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
              ]
            }
          });
        }
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handleCallback:', error);
      this.callbackStats.errors++;
      
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üéõÔ∏è –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]
          ]
        }
      });
    }
  }

  // ===== –ú–ê–†–®–†–£–¢–ò–ó–ê–¶–ò–Ø –ü–û –ú–û–î–£–õ–Ø–ú =====

  async routeCallbackToModules(ctx, callbackData) {
    try {
      // –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ callback'—ã
      if (await this.navigationCallbacks.handleCallback(ctx, callbackData)) {
        this.callbackStats.moduleStats.navigation++;
        return true;
      }

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
      if (await this.statsCallbacks.handleCallback(ctx, callbackData)) {
        this.callbackStats.moduleStats.stats++;
        return true;
      }

      // –†–∞–±–æ—Ç–∞ —Å –ª–∏–¥–∞–º–∏
      if (await this.leadsCallbacks.handleCallback(ctx, callbackData)) {
        this.callbackStats.moduleStats.leads++;
        return true;
      }

      // –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
      if (await this.systemCallbacks.handleCallback(ctx, callbackData)) {
        this.callbackStats.moduleStats.system++;
        return true;
      }

      // –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–∏ –æ–¥–Ω–∏–º –º–æ–¥—É–ª–µ–º
      this.callbackStats.moduleStats.other++;
      return false;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ callback:', error);
      this.callbackStats.errors++;
      throw error;
    }
  }

  // ===== –û–ë–†–ê–ë–û–¢–ö–ê –ü–ê–†–ê–ú–ï–¢–†–ò–ó–û–í–ê–ù–ù–´–• CALLBACK'–û–í =====

  async handleParameterizedCallback(ctx, callbackData) {
    console.log(`üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ callback: ${callbackData}`);
    
    // –ü–∞—Ä—Å–∏–º callback —Ç–∏–ø–∞ admin_action_userId
    const parts = callbackData.split('_');
    if (parts.length < 3) {
      console.warn('‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback:', callbackData);
      await ctx.reply('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã');
      return;
    }

    const action = parts.slice(1, -1).join('_');
    const targetUserId = parts[parts.length - 1];
    
    console.log(`üîç Parsed callback: action=${action}, userId=${targetUserId}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ notification handlers
    if (this.adminNotifications?.handlers) {
      try {
        await this.adminNotifications.handlers.handleCallback(ctx, action, targetUserId);
        return;
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ notification handlers:', error);
      }
    }

    // Fallback - –±–∞–∑–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    switch (action) {
      case 'view_lead':
        await this.viewLeadDetails(ctx, targetUserId);
        break;
      case 'contact_lead':
        await this.contactLead(ctx, targetUserId);
        break;
      case 'mark_processed':
        await this.markLeadProcessed(ctx, targetUserId);
        break;
      default:
        console.warn('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', action);
        await ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ');
    }
  }

  // ===== –ë–ê–ó–û–í–´–ï –î–ï–ô–°–¢–í–ò–Ø –° –õ–ò–î–ê–ú–ò =====

  async viewLeadDetails(ctx, userId) {
    const leadData = this.adminNotifications.leadDataStorage?.[userId];
    if (!leadData) {
      await ctx.reply('–õ–∏–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    let message = `üë§ *–î–ï–¢–ê–õ–ò –õ–ò–î–ê*\n\n`;
    message += `üÜî ID: ${userId}\n`;
    message += `üë§ –ò–º—è: ${leadData.userInfo?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
    message += `üìä –°–µ–≥–º–µ–Ω—Ç: ${this.getSegmentEmoji(leadData.analysisResult?.segment)} ${leadData.analysisResult?.segment}\n`;
    message += `üéØ –ü—Ä–æ–±–ª–µ–º–∞: ${this.translateIssue(leadData.analysisResult?.primaryIssue)}\n`;
    message += `‚è∞ –í—Ä–µ–º—è: ${this.getTimeAgo(leadData.timestamp)}`;

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'admin_main' }]
        ]
      }
    });
  }

  async contactLead(ctx, userId) {
    const leadData = this.adminNotifications.leadDataStorage?.[userId];
    if (!leadData) {
      await ctx.reply('–õ–∏–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    let message = `üìû *–ö–û–ù–¢–ê–ö–¢ –° –õ–ò–î–û–ú*\n\n`;
    message += `üë§ ${leadData.userInfo?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
    if (leadData.userInfo?.username) {
      message += `üí¨ @${leadData.userInfo.username}\n`;
    }
    message += `üÜî ID: ${userId}\n\n`;
    message += `‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ "–°–≤—è–∑–∞–ª–∏—Å—å"`;

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –ö –ª–∏–¥–∞–º', callback_data: 'admin_hot_leads' }]
        ]
      }
    });
  }

  async markLeadProcessed(ctx, userId) {
    let message = `‚úÖ *–õ–ò–î –û–ë–†–ê–ë–û–¢–ê–ù*\n\n`;
    message += `üë§ ID: ${userId}\n`;
    message += `üïê –û–±—Ä–∞–±–æ—Ç–∞–Ω: ${new Date().toLocaleString('ru-RU')}\n\n`;
    message += `üìä –°—Ç–∞—Ç—É—Å: –ó–∞–∫—Ä—ã—Ç`;

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîô –ö –ª–∏–¥–∞–º', callback_data: 'admin_hot_leads' }]
        ]
      }
    });
  }

  // ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====

  trackCallbackUsage(callbackData) {
    this.callbackStats.totalCallbacks++;
    this.callbackStats.lastCallback = {
      callback: callbackData,
      timestamp: new Date().toISOString()
    };
    
    if (!this.callbackStats.callbacksUsed[callbackData]) {
      this.callbackStats.callbacksUsed[callbackData] = 0;
    }
    this.callbackStats.callbacksUsed[callbackData]++;
  }

  getSegmentEmoji(segment) {
    const emojis = {
      'HOT_LEAD': 'üî•',
      'WARM_LEAD': '‚≠ê',
      'COLD_LEAD': '‚ùÑÔ∏è',
      'NURTURE_LEAD': 'üå±'
    };
    return emojis[segment] || '‚ùì';
  }

  translateIssue(issue) {
    const translations = {
      'chronic_stress': '–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç—Ä–µ—Å—Å',
      'anxiety': '–¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å',
      'insomnia': '–ë–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞',
      'breathing_issues': '–ü—Ä–æ–±–ª–µ–º—ã —Å –¥—ã—Ö–∞–Ω–∏–µ–º',
      'high_pressure': '–í—ã—Å–æ–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ',
      'fatigue': '–£—Å—Ç–∞–ª–æ—Å—Ç—å',
      'hyperactivity': '–ì–∏–ø–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
      'sleep_problems': '–ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–Ω–æ–º'
    };
    return translations[issue] || issue || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
  }

  getTimeAgo(timestamp) {
    if (!timestamp) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    
    const now = new Date();
    const time = new Date(timestamp);
    const diffMs = now - time;
    const diffMins = Math.floor(diffMs / 60000);
    
    if (diffMins < 1) return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
    if (diffMins < 60) return `${diffMins} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    
    const diffHours = Math.floor(diffMins / 60);
    if (diffHours < 24) return `${diffHours} —á –Ω–∞–∑–∞–¥`;
    
    const diffDays = Math.floor(diffHours / 24);
    return `${diffDays} –¥–Ω –Ω–∞–∑–∞–¥`;
  }

  // ===== –≠–ö–°–ü–û–†–¢ –°–¢–ê–¢–ò–°–¢–ò–ö–ò =====

  getCallbackStats() {
    const moduleStats = {
      navigation: this.navigationCallbacks.getStats(),
      stats: this.statsCallbacks.getStats(),
      leads: this.leadsCallbacks.getStats(),
      system: this.systemCallbacks.getStats()
    };

    return {
      ...this.callbackStats,
      admin_id: this.adminId,
      module_statistics: moduleStats,
      uptime: this.formatUptime(process.uptime()),
      memory_usage: this.getMemoryUsage()
    };
  }

  formatUptime(seconds) {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    
    if (hours > 24) {
      const days = Math.floor(hours / 24);
      const remainingHours = hours % 24;
      return `${days}–¥ ${remainingHours}—á ${minutes}–º`;
    }
    
    return `${hours}—á ${minutes}–º`;
  }

  getMemoryUsage() {
    return Math.round(process.memoryUsage().heapUsed / 1024 / 1024);
  }

  exportCallbackInfo() {
    return {
      name: 'AdminCallbacks',
      version: '2.0.0', // –£–≤–µ–ª–∏—á–∏–ª–∏ –≤–µ—Ä—Å–∏—é –ø–æ—Å–ª–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞
      architecture: 'modular',
      admin_id: this.adminId,
      modules: [
        'navigation_callbacks',
        'stats_callbacks', 
        'leads_callbacks',
        'system_callbacks'
      ],
      features: [
        'modular_architecture',
        'callback_routing',
        'parameterized_callbacks',
        'module_statistics',
        'error_handling',
        'fallback_processing'
      ],
      callback_stats: this.getCallbackStats(),
      last_updated: new Date().toISOString()
    };
  }

  cleanup() {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –º–æ–¥—É–ª—å–Ω—ã—Ö AdminCallbacks...');
    
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏
    this.navigationCallbacks.cleanup();
    this.statsCallbacks.cleanup();
    this.leadsCallbacks.cleanup();
    this.systemCallbacks.cleanup();
    
    console.log('üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ callbacks:', JSON.stringify(this.getCallbackStats(), null, 2));
    console.log('‚úÖ –ú–æ–¥—É–ª—å–Ω—ã–µ AdminCallbacks –æ—á–∏—â–µ–Ω—ã');
  }
}

module.exports = AdminCallbacks;