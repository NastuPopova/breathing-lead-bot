// –§–∞–π–ª: modules/admin/notifications/notification_analytics.js
// –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

class NotificationAnalytics {
  constructor() {
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    this.notificationStats = {
      totalSent: 0,
      successful: 0,
      failed: 0,
      byType: {
        lead_notification: 0,
        survey_results: 0,
        urgent_notification: 0,
        daily_summary: 0
      },
      bySegment: {
        HOT_LEAD: 0,
        WARM_LEAD: 0,
        COLD_LEAD: 0,
        NURTURE_LEAD: 0
      },
      hourlyDistribution: {},
      lastReset: new Date().toDateString()
    };

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
    this.errorStats = {
      totalErrors: 0,
      byType: {},
      recentErrors: [],
      maxRecentErrors: 10
    };

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    this.performanceStats = {
      averageResponseTime: 0,
      totalResponseTime: 0,
      responseCount: 0,
      slowNotifications: 0,
      fastNotifications: 0
    };

    // –õ–æ–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    this.activityLog = [];
    this.maxLogEntries = 100;
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  updateStats(segment, notificationType = 'lead_notification') {
    this.notificationStats.totalSent++;
    this.notificationStats.successful++;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
    if (this.notificationStats.byType[notificationType] !== undefined) {
      this.notificationStats.byType[notificationType]++;
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
    if (segment && this.notificationStats.bySegment[segment] !== undefined) {
      this.notificationStats.bySegment[segment]++;
    }
    
    // –ü–æ—á–∞—Å–æ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    const hour = new Date().getHours();
    if (!this.notificationStats.hourlyDistribution[hour]) {
      this.notificationStats.hourlyDistribution[hour] = 0;
    }
    this.notificationStats.hourlyDistribution[hour]++;
    
    this.logActivity('notification_sent', { segment, type: notificationType });
    
    // –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –µ—Å–ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å
    this.resetStatsIfNeeded();
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É
   */
  logError(errorType, error, context = {}) {
    this.errorStats.totalErrors++;
    this.notificationStats.failed++;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –æ—à–∏–±–æ–∫
    if (!this.errorStats.byType[errorType]) {
      this.errorStats.byType[errorType] = 0;
    }
    this.errorStats.byType[errorType]++;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–∞–≤–Ω–∏—Ö –æ—à–∏–±–æ–∫
    const errorEntry = {
      type: errorType,
      message: error.message || error,
      context: context,
      timestamp: new Date().toISOString(),
      stack: error.stack || null
    };
    
    this.errorStats.recentErrors.unshift(errorEntry);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º—ã—Ö –æ—à–∏–±–æ–∫
    if (this.errorStats.recentErrors.length > this.errorStats.maxRecentErrors) {
      this.errorStats.recentErrors = this.errorStats.recentErrors.slice(0, this.errorStats.maxRecentErrors);
    }
    
    this.logActivity('error_occurred', { type: errorType, message: error.message || error });
    
    console.error(`üìä Analytics: ${errorType} error logged`, errorEntry);
  }

  /**
   * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  trackResponseTime(responseTime) {
    this.performanceStats.responseCount++;
    this.performanceStats.totalResponseTime += responseTime;
    this.performanceStats.averageResponseTime = 
      this.performanceStats.totalResponseTime / this.performanceStats.responseCount;
    
    // –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏ (–º–µ–¥–ª–µ–Ω–Ω—ã–µ > 2 —Å–µ–∫—É–Ω–¥)
    if (responseTime > 2000) {
      this.performanceStats.slowNotifications++;
    } else {
      this.performanceStats.fastNotifications++;
    }
    
    this.logActivity('response_time_tracked', { responseTime });
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
   */
  getDetailedAnalytics() {
    const now = new Date();
    const uptime = Date.now() - (this.activityLog[0]?.timestamp || Date.now());
    
    return {
      // –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      overview: {
        total_notifications: this.notificationStats.totalSent,
        successful: this.notificationStats.successful,
        failed: this.notificationStats.failed,
        success_rate: this.calculateSuccessRate(),
        error_rate: this.calculateErrorRate()
      },
      
      // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º
      by_type: this.notificationStats.byType,
      
      // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
      by_segment: this.notificationStats.bySegment,
      
      // –ü–æ—á–∞—Å–æ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
      hourly_distribution: this.getHourlyAnalytics(),
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
      errors: {
        total: this.errorStats.totalErrors,
        by_type: this.errorStats.byType,
        recent: this.errorStats.recentErrors.slice(0, 5), // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—à–∏–±–æ–∫
        most_frequent_error: this.getMostFrequentError()
      },
      
      // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
      performance: {
        average_response_time: Math.round(this.performanceStats.averageResponseTime),
        fast_notifications: this.performanceStats.fastNotifications,
        slow_notifications: this.performanceStats.slowNotifications,
        performance_ratio: this.calculatePerformanceRatio()
      },
      
      // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
      time_metrics: {
        uptime: uptime,
        last_reset: this.notificationStats.lastReset,
        analysis_date: now.toISOString(),
        timezone: 'Europe/Moscow'
      }
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
   */
  getSegmentAnalytics() {
    const total = this.notificationStats.totalSent;
    const segments = this.notificationStats.bySegment;
    
    const analytics = {};
    
    Object.entries(segments).forEach(([segment, count]) => {
      analytics[segment] = {
        count: count,
        percentage: total > 0 ? ((count / total) * 100).toFixed(1) : 0,
        trend: this.getSegmentTrend(segment)
      };
    });
    
    return {
      segments: analytics,
      most_active_segment: this.getMostActiveSegment(),
      total_leads: total,
      distribution_analysis: this.analyzeSegmentDistribution()
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  getPerformanceAnalytics() {
    return {
      response_times: {
        average: Math.round(this.performanceStats.averageResponseTime),
        total_measured: this.performanceStats.responseCount,
        fast_count: this.performanceStats.fastNotifications,
        slow_count: this.performanceStats.slowNotifications
      },
      efficiency: {
        fast_ratio: this.calculatePerformanceRatio(),
        success_rate: this.calculateSuccessRate(),
        reliability_score: this.calculateReliabilityScore()
      },
      recommendations: this.getPerformanceRecommendations()
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –æ—à–∏–±–æ–∫
   */
  getErrorAnalytics() {
    return {
      error_summary: {
        total_errors: this.errorStats.totalErrors,
        error_rate: this.calculateErrorRate(),
        most_frequent: this.getMostFrequentError(),
        recent_count: this.errorStats.recentErrors.length
      },
      error_types: this.errorStats.byType,
      recent_errors: this.errorStats.recentErrors.slice(0, 3),
      error_trends: this.analyzeErrorTrends(),
      recommendations: this.getErrorRecommendations()
    };
  }

  // ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –†–ê–°–ß–ï–¢–û–í =====

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  calculateSuccessRate() {
    if (this.notificationStats.totalSent === 0) return 100;
    return ((this.notificationStats.successful / this.notificationStats.totalSent) * 100).toFixed(1);
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–æ–ª—é –æ—à–∏–±–æ–∫
   */
  calculateErrorRate() {
    if (this.notificationStats.totalSent === 0) return 0;
    return ((this.notificationStats.failed / this.notificationStats.totalSent) * 100).toFixed(1);
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –±—ã—Å—Ç—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  calculatePerformanceRatio() {
    const total = this.performanceStats.fastNotifications + this.performanceStats.slowNotifications;
    if (total === 0) return 100;
    return ((this.performanceStats.fastNotifications / total) * 100).toFixed(1);
  }

  /**
   * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â—É—é –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
   */
  calculateReliabilityScore() {
    const successRate = parseFloat(this.calculateSuccessRate());
    const performanceRatio = parseFloat(this.calculatePerformanceRatio());
    const errorPenalty = Math.min(this.errorStats.totalErrors * 2, 20); // –ú–∞–∫—Å–∏–º—É–º -20 –∑–∞ –æ—à–∏–±–∫–∏
    
    const score = Math.max(0, (successRate + performanceRatio) / 2 - errorPenalty);
    return Math.round(score);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—É—é –æ—à–∏–±–∫—É
   */
  getMostFrequentError() {
    const errors = this.errorStats.byType;
    let maxType = null;
    let maxCount = 0;
    
    Object.entries(errors).forEach(([type, count]) => {
      if (count > maxCount) {
        maxCount = count;
        maxType = type;
      }
    });
    
    return maxType ? { type: maxType, count: maxCount } : null;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç
   */
  getMostActiveSegment() {
    const segments = this.notificationStats.bySegment;
    let maxSegment = null;
    let maxCount = 0;
    
    Object.entries(segments).forEach(([segment, count]) => {
      if (count > maxCount) {
        maxCount = count;
        maxSegment = segment;
      }
    });
    
    return maxSegment ? { segment: maxSegment, count: maxCount } : null;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
   */
  analyzeSegmentDistribution() {
    const segments = this.notificationStats.bySegment;
    const total = this.notificationStats.totalSent;
    
    if (total === 0) return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
    
    const hotRatio = (segments.HOT_LEAD / total) * 100;
    
    if (hotRatio > 30) return '–í—ã—Å–æ–∫–∞—è –¥–æ–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ª–∏–¥–æ–≤';
    if (hotRatio > 15) return '–ù–æ—Ä–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≥–æ—Ä—è—á–∏—Ö –ª–∏–¥–æ–≤';
    if (hotRatio > 5) return '–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å';
    return '–ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≥–æ—Ä—è—á–∏—Ö –ª–∏–¥–æ–≤';
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–µ–Ω–¥ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
   */
  getSegmentTrend(segment) {
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∞–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    const recentActivity = this.activityLog
      .filter(entry => entry.context?.segment === segment)
      .slice(0, 10);
    
    if (recentActivity.length >= 5) return '–ê–∫—Ç–∏–≤–Ω—ã–π';
    if (recentActivity.length >= 2) return '–£–º–µ—Ä–µ–Ω–Ω—ã–π';
    return '–ù–∏–∑–∫–∏–π';
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—á–∞—Å–æ–≤—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
   */
  getHourlyAnalytics() {
    const distribution = this.notificationStats.hourlyDistribution;
    const hours = Object.keys(distribution).map(Number).sort((a, b) => a - b);
    
    if (hours.length === 0) return { peak_hour: null, quiet_hour: null };
    
    let peakHour = hours[0];
    let quietHour = hours[0];
    
    hours.forEach(hour => {
      if (distribution[hour] > distribution[peakHour]) {
        peakHour = hour;
      }
      if (distribution[hour] < distribution[quietHour]) {
        quietHour = hour;
      }
    });
    
    return {
      peak_hour: { hour: peakHour, count: distribution[peakHour] },
      quiet_hour: { hour: quietHour, count: distribution[quietHour] },
      distribution: distribution
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥—ã –æ—à–∏–±–æ–∫
   */
  analyzeErrorTrends() {
    const recentErrors = this.errorStats.recentErrors.slice(0, 5);
    if (recentErrors.length === 0) return '–ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö –æ—à–∏–±–æ–∫';
    
    const errorTypes = {};
    recentErrors.forEach(error => {
      errorTypes[error.type] = (errorTypes[error.type] || 0) + 1;
    });
    
    const dominantError = Object.entries(errorTypes)
      .sort(([,a], [,b]) => b - a)[0];
    
    if (dominantError && dominantError[1] >= 3) {
      return `–ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –æ—à–∏–±–∫–∏: ${dominantError[0]}`;
    }
    
    return '–†–∞–∑—Ä–æ–∑–Ω–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏';
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  getPerformanceRecommendations() {
    const recommendations = [];
    
    if (this.performanceStats.averageResponseTime > 3000) {
      recommendations.push('–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    }
    
    if (this.calculateErrorRate() > 5) {
      recommendations.push('–£–ª—É—á—à–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫');
    }
    
    if (this.performanceStats.slowNotifications > this.performanceStats.fastNotifications) {
      recommendations.push('–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏—á–∏–Ω—ã –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    }
    
    if (recommendations.length === 0) {
      recommendations.push('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ');
    }
    
    return recommendations;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ—à–∏–±–∫–∞–º
   */
  getErrorRecommendations() {
    const recommendations = [];
    const mostFrequent = this.getMostFrequentError();
    
    if (mostFrequent && mostFrequent.count > 3) {
      recommendations.push(`–£—Å—Ç—Ä–∞–Ω–∏—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â—É—é—Å—è –æ—à–∏–±–∫—É: ${mostFrequent.type}`);
    }
    
    if (this.errorStats.totalErrors > 10) {
      recommendations.push('–ü—Ä–æ–≤–µ—Å—Ç–∏ –∞—É–¥–∏—Ç —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
    }
    
    if (this.calculateErrorRate() > 10) {
      recommendations.push('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ');
    }
    
    if (recommendations.length === 0 && this.errorStats.totalErrors === 0) {
      recommendations.push('–û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
    }
    
    return recommendations;
  }

  // ===== –£–¢–ò–õ–ò–¢–´ =====

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
   */
  logActivity(type, context = {}) {
    const entry = {
      type: type,
      context: context,
      timestamp: new Date().toISOString()
    };
    
    this.activityLog.unshift(entry);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞
    if (this.activityLog.length > this.maxLogEntries) {
      this.activityLog = this.activityLog.slice(0, this.maxLogEntries);
    }
  }

  /**
   * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å
   */
  resetStatsIfNeeded() {
    const today = new Date().toDateString();
    
    if (this.notificationStats.lastReset !== today) {
      console.log('üîÑ –°–±—Ä–æ—Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å
      this.archiveDailyStats();
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      this.notificationStats = {
        ...this.notificationStats,
        totalSent: 0,
        successful: 0,
        failed: 0,
        byType: {
          lead_notification: 0,
          survey_results: 0,
          urgent_notification: 0,
          daily_summary: 0
        },
        bySegment: {
          HOT_LEAD: 0,
          WARM_LEAD: 0,
          COLD_LEAD: 0,
          NURTURE_LEAD: 0
        },
        hourlyDistribution: {},
        lastReset: today
      };
    }
  }

  /**
   * –ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è
   */
  archiveDailyStats() {
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–æ –±—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î –∏–ª–∏ —Ñ–∞–π–ª
    console.log('üìä –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞', this.notificationStats.lastReset);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  getStats() {
    return {
      notifications: this.notificationStats,
      errors: {
        total: this.errorStats.totalErrors,
        recent_count: this.errorStats.recentErrors.length
      },
      performance: {
        average_response_time: Math.round(this.performanceStats.averageResponseTime),
        success_rate: this.calculateSuccessRate() + '%'
      },
      last_updated: new Date().toISOString()
    };
  }

  /**
   * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
   */
  getInfo() {
    return {
      name: 'NotificationAnalytics',
      version: '1.0.0',
      features: [
        'notification_tracking',
        'error_analytics',
        'performance_monitoring',
        'segment_analysis',
        'hourly_distribution',
        'trend_analysis'
      ],
      metrics_tracked: [
        'success_rate',
        'error_rate',
        'response_time',
        'segment_distribution',
        'hourly_activity'
      ],
      last_updated: new Date().toISOString()
    };
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
   */
  exportAllData() {
    return {
      detailed_analytics: this.getDetailedAnalytics(),
      segment_analytics: this.getSegmentAnalytics(),
      performance_analytics: this.getPerformanceAnalytics(),
      error_analytics: this.getErrorAnalytics(),
      activity_log: this.activityLog.slice(0, 20), // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–±—ã—Ç–∏–π
      export_timestamp: new Date().toISOString()
    };
  }
}

module.exports = NotificationAnalytics;