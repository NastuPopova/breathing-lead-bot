// –§–∞–π–ª: modules/admin/notifications/notification_system.js
// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–µ–∂–∏–º–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

const NotificationTemplates = require('./notification_templates');
const NotificationHandlers = require('./notification_handlers');
const NotificationFormatters = require('./notification_formatters');
const NotificationAnalytics = require('./notification_analytics');
const config = require('../../../config');

class AdminNotificationSystem {
  constructor(bot) {
    this.bot = bot;
    this.adminId = config.ADMIN_ID;
    this.enableNotifications = true;
    
    // –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    this.testMode = false;                // –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (–≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
    this.filterAdminResponses = true;     // –§–∏–ª—å—Ç—Ä —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    this.silentMode = false;              // –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º (–±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    this.templates = new NotificationTemplates();
    this.handlers = new NotificationHandlers(this);
    this.formatters = new NotificationFormatters();
    this.analytics = new NotificationAnalytics();
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    this.dailyStats = {
      totalLeads: 0,
      hotLeads: 0,
      warmLeads: 0,
      coldLeads: 0,
      nurtureLeads: 0,
      lastReset: new Date().toDateString()
    };

    // –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
    this.segmentStorage = {};
    this.leadDataStorage = {};
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    this.initializeDefaultSettings();
    
    console.log('‚úÖ AdminNotificationSystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ä–µ–∂–∏–º–∞–º–∏');
  }

  // ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –ù–ê–°–¢–†–û–ô–ö–ò =====

  initializeDefaultSettings() {
    // –ß–∏—Ç–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (process.env.ADMIN_FILTER_ENABLED === 'false') {
      this.filterAdminResponses = false;
    }
    
    if (process.env.ADMIN_TEST_MODE === 'true') {
      this.testMode = true;
      this.filterAdminResponses = false;
    }
    
    if (process.env.ADMIN_NOTIFICATIONS_ENABLED === 'false') {
      this.enableNotifications = false;
    }
    
    console.log(`üîß –ù–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: —Ñ–∏–ª—å—Ç—Ä=${this.filterAdminResponses}, —Ç–µ—Å—Ç=${this.testMode}, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è=${this.enableNotifications}`);
  }

  // ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ï–ñ–ò–ú–ê–ú–ò =====

  /**
   * –í–∫–ª—é—á–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (–ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤)
   */
  enableTestMode() {
    this.testMode = true;
    this.filterAdminResponses = false;
    this.silentMode = false;
    console.log('üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú –í–ö–õ–Æ–ß–ï–ù - –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è');
    return this.getNotificationMode();
  }

  /**
   * –û—Ç–∫–ª—é—á–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
   */
  disableTestMode() {
    this.testMode = false;
    this.filterAdminResponses = true;
    console.log('üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω, –≤–∫–ª—é—á–µ–Ω —Ñ–∏–ª—å—Ç—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    return this.getNotificationMode();
  }

  /**
   * –í–∫–ª—é—á–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
   */
  enableAdminFilter() {
    this.filterAdminResponses = true;
    this.testMode = false;
    this.silentMode = false;
    console.log('üîí –§–∏–ª—å—Ç—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –í–ö–õ–Æ–ß–ï–ù - —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–µ –±—É–¥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
    return this.getNotificationMode();
  }

  /**
   * –û—Ç–∫–ª—é—á–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
   */
  disableAdminFilter() {
    this.filterAdminResponses = false;
    this.testMode = false;
    this.silentMode = false;
    console.log('üîì –§–∏–ª—å—Ç—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –û–¢–ö–õ–Æ–ß–ï–ù - –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
    return this.getNotificationMode();
  }

  /**
   * –í–∫–ª—é—á–∞–µ—Ç —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º (–Ω–∏–∫–∞–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
   */
  enableSilentMode() {
    this.silentMode = true;
    this.testMode = false;
    this.filterAdminResponses = false;
    console.log('üîá –¢–ò–•–ò–ô –†–ï–ñ–ò–ú –í–ö–õ–Æ–ß–ï–ù - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã');
    return this.getNotificationMode();
  }

  /**
   * –û—Ç–∫–ª—é—á–∞–µ—Ç —Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º
   */
  disableSilentMode() {
    this.silentMode = false;
    this.filterAdminResponses = true;
    console.log('üîä –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω, –≤–∫–ª—é—á–µ–Ω —Ñ–∏–ª—å—Ç—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
    return this.getNotificationMode();
  }

  /**
   * –¶–∏–∫–ª–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤
   */
  toggleNotificationMode() {
    if (this.silentMode) {
      // –¢–∏—Ö–∏–π -> –§–∏–ª—å—Ç—Ä
      return this.enableAdminFilter();
    } else if (this.filterAdminResponses && !this.testMode) {
      // –§–∏–ª—å—Ç—Ä -> –¢–µ—Å—Ç
      return this.enableTestMode();
    } else if (this.testMode) {
      // –¢–µ—Å—Ç -> –í—Å–µ
      return this.disableAdminFilter();
    } else {
      // –í—Å–µ -> –¢–∏—Ö–∏–π
      return this.enableSilentMode();
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  getNotificationMode() {
    if (this.silentMode) {
      return {
        mode: 'silent',
        description: '–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º - –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã',
        emoji: 'üîá',
        buttonText: 'üîä –í–∫–ª—é—á–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä'
      };
    } else if (this.testMode) {
      return {
        mode: 'test_mode',
        description: '–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è',
        emoji: 'üß™',
        buttonText: 'üîì –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
      };
    } else if (this.filterAdminResponses) {
      return {
        mode: 'filtered',
        description: '–§–∏–ª—å—Ç—Ä –≤–∫–ª—é—á–µ–Ω - —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è',
        emoji: 'üîí',
        buttonText: 'üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º'
      };
    } else {
      return {
        mode: 'all_notifications',
        description: '–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –≤–∫–ª—é—á–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
        emoji: 'üîì',
        buttonText: 'üîá –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º'
      };
    }
  }

  // ===== –ü–†–û–í–ï–†–ö–ò –ò –§–ò–õ–¨–¢–†–´ =====

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
   */
  isAdmin(userId) {
    return userId && userId.toString() === this.adminId;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  shouldSendNotification(userData) {
    const userId = userData.userInfo?.telegram_id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if (!this.adminId || !this.enableNotifications) {
      console.log('‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏–ª–∏ ADMIN_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      return { send: false, reason: 'notifications_disabled' };
    }

    // –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º
    if (this.silentMode) {
      console.log('üîá –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ');
      return { send: false, reason: 'silent_mode' };
    }

    // –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ
    if (this.testMode) {
      console.log('üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞');
      return { send: true, reason: 'test_mode', forceTest: true };
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (this.filterAdminResponses && this.isAdmin(userId)) {
      console.log(`üîí –§–∏–ª—å—Ç—Ä: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (${userId}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ`);
      return { send: false, reason: 'admin_filtered' };
    }

    // –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
    return { send: true, reason: 'normal' };
  }

  // ===== –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô =====

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–º –ª–∏–¥–µ
   */
  async notifyNewLead(userData) {
    const shouldSend = this.shouldSendNotification(userData);
    
    if (!shouldSend.send) {
      console.log(`üìµ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${shouldSend.reason}`);
      return;
    }

    const userId = userData.userInfo?.telegram_id;
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É ${this.adminId} –æ –ª–∏–¥–µ ${userId} (—Ä–µ–∂–∏–º: ${shouldSend.reason})`);

    try {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å
      this.resetDailyStatsIfNeeded();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      this.updateDailyStats(userData.analysisResult?.segment);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞
      this.storeLeadData(userData.userInfo?.telegram_id, userData);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      let message = this.templates.generateLeadNotification(userData, this.dailyStats);
      const keyboard = this.templates.generateAdminKeyboard(userData);

      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É —Ä–µ–∂–∏–º–∞
      if (shouldSend.forceTest) {
        message = `üß™ **–¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú** üß™\n\n${message}`;
      } else if (this.isAdmin(userId)) {
        message = `üîì **–£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û–¢ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê** üîì\n\n${message}`;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      await this.bot.telegram.sendMessage(this.adminId, message, {
        parse_mode: 'Markdown',
        ...keyboard
      });

      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      this.analytics.updateStats(userData.analysisResult?.segment, 'lead_notification');
      
      // –ï—Å–ª–∏ —ç—Ç–æ –≥–æ—Ä—è—á–∏–π –ª–∏–¥, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      if (userData.analysisResult?.segment === 'HOT_LEAD') {
        await this.sendUrgentNotification(userData, shouldSend.forceTest);
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:', error);
      this.analytics.logError('notification_send_error', error, userData);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –≥–æ—Ä—è—á–∏—Ö –ª–∏–¥–æ–≤
   */
  async sendUrgentNotification(userData, isTest = false) {
    try {
      let urgentMessage = this.templates.generateUrgentNotification(userData, this.dailyStats);
      const urgentKeyboard = this.templates.generateUrgentKeyboard(userData);

      if (isTest) {
        urgentMessage = `üß™ **–¢–ï–°–¢** üß™\n\n${urgentMessage}`;
      }

      console.log('üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ä—è—á–µ–º –ª–∏–¥–µ...');

      await this.bot.telegram.sendMessage(this.adminId, urgentMessage, {
        parse_mode: 'Markdown',
        ...urgentKeyboard
      });

      console.log('‚úÖ –°—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      this.analytics.updateStats(userData.analysisResult?.segment, 'urgent_notification');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ä–æ—á–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      this.analytics.logError('urgent_notification_error', error, userData);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
   */
  async notifySurveyResults(userData) {
    const shouldSend = this.shouldSendNotification(userData);
    
    if (!shouldSend.send) {
      console.log(`üìµ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${shouldSend.reason}`);
      return;
    }

    try {
      let message = this.templates.generateSurveyResultsMessage(userData);
      const keyboard = this.templates.generateSurveyResultsKeyboard(userData);

      if (shouldSend.forceTest) {
        message = `üß™ **–¢–ï–°–¢–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´** üß™\n\n${message}`;
      }

      await this.bot.telegram.sendMessage(this.adminId, message, {
        parse_mode: 'Markdown',
        ...keyboard
      });

      console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: ${userData.userInfo?.telegram_id}`);
      this.analytics.updateStats(userData.analysisResult?.segment, 'survey_results');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      this.analytics.logError('survey_results_error', error, userData);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
   */
  async sendDailySummary() {
    if (!this.adminId || this.silentMode) return;

    try {
      const message = this.templates.generateDailySummary(this.dailyStats);
      const keyboard = this.templates.generateDailySummaryKeyboard();

      await this.bot.telegram.sendMessage(this.adminId, message, {
        parse_mode: 'Markdown',
        ...keyboard
      });

      console.log('‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      this.analytics.updateStats(null, 'daily_summary');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏:', error);
      this.analytics.logError('daily_summary_error', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  async sendTestNotification() {
    if (!this.adminId) {
      throw new Error('ADMIN_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    const testData = this.createTestLeadData();
    
    try {
      const currentMode = this.getNotificationMode();
      
      const message = `üß™ **–¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï** üß™\n\n` +
        `üìä –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: ${currentMode.emoji} ${currentMode.mode}\n` +
        `üìù ${currentMode.description}\n\n` +
        this.templates.generateLeadNotification(testData, this.dailyStats);

      const keyboard = this.templates.generateAdminKeyboard(testData);

      await this.bot.telegram.sendMessage(this.adminId, message, {
        parse_mode: 'Markdown',
        ...keyboard
      });

      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      return true;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  // ===== –û–ë–†–ê–ë–û–¢–ö–ê CALLBACK'–û–í =====

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
   */
  async handleAdminCallback(ctx, action, targetUserId) {
    try {
      console.log('üîç Admin callback:', { action, targetUserId });
      return await this.handlers.handleCallback(ctx, action, targetUserId);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ admin callback:', error);
      this.analytics.logError('admin_callback_error', error, { action, targetUserId });
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è');
    }
  }

  // ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–ú–ò =====

  storeLeadData(userId, leadData) {
    if (!this.leadDataStorage) this.leadDataStorage = {};
    this.leadDataStorage[userId] = {
      ...leadData,
      timestamp: new Date().toISOString()
    };
    
    if (leadData.analysisResult?.segment) {
      this.updateStoredSegment(userId, leadData.analysisResult.segment);
    }
    
    console.log(`üíæ –î–∞–Ω–Ω—ã–µ –ª–∏–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${userId}`);
  }

  getStoredLeadData(userId) {
    if (!this.leadDataStorage) this.leadDataStorage = {};
    return this.leadDataStorage[userId];
  }

  getStoredSegment(userId) {
    if (!this.segmentStorage) this.segmentStorage = {};
    return this.segmentStorage[userId];
  }

  updateStoredSegment(userId, segment) {
    if (!this.segmentStorage) this.segmentStorage = {};
    this.segmentStorage[userId] = segment;
    console.log(`üîÑ –°–µ–≥–º–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: ${userId} -> ${segment}`);
  }

  // ===== –°–¢–ê–¢–ò–°–¢–ò–ö–ê =====

  updateDailyStats(segment) {
    this.dailyStats.totalLeads++;
    
    switch (segment) {
      case 'HOT_LEAD':
        this.dailyStats.hotLeads++;
        break;
      case 'WARM_LEAD':
        this.dailyStats.warmLeads++;
        break;
      case 'COLD_LEAD':
        this.dailyStats.coldLeads++;
        break;
      case 'NURTURE_LEAD':
        this.dailyStats.nurtureLeads++;
        break;
    }
  }

  resetDailyStatsIfNeeded() {
    const today = new Date().toDateString();
    
    if (this.dailyStats.lastReset !== today) {
      this.dailyStats = {
        totalLeads: 0,
        hotLeads: 0,
        warmLeads: 0,
        coldLeads: 0,
        nurtureLeads: 0,
        lastReset: today
      };
      console.log('üîÑ –°–±—Ä–æ—à–µ–Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');
    }
  }

  getStats() {
    const currentMode = this.getNotificationMode();
    
    return {
      daily_stats: this.dailyStats,
      admin_id: this.adminId,
      notifications_enabled: this.enableNotifications,
      current_mode: currentMode,
      settings: {
        test_mode: this.testMode,
        filter_admin_responses: this.filterAdminResponses,
        silent_mode: this.silentMode
      },
      stored_segments_count: Object.keys(this.segmentStorage || {}).length,
      stored_leads_count: Object.keys(this.leadDataStorage || {}).length,
      analytics: this.analytics.getStats(),
      last_updated: new Date().toISOString()
    };
  }

  // ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====

  createTestLeadData() {
    return {
      userInfo: {
        telegram_id: this.adminId,
        first_name: '–¢–µ—Å—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
        username: 'admin_test'
      },
      surveyType: 'adult',
      surveyAnswers: {
        age_group: '31-45',
        occupation: 'management',
        stress_level: 8,
        current_problems: ['chronic_stress', 'insomnia'],
        breathing_experience: 'never',
        time_commitment: '10-15_minutes',
        main_goals: ['stress_resistance', 'improve_sleep']
      },
      analysisResult: {
        segment: 'HOT_LEAD',
        scores: {
          total: 85,
          urgency: 90,
          readiness: 80,
          fit: 85
        },
        primaryIssue: 'chronic_stress'
      },
      timestamp: new Date().toISOString()
    };
  }

  cleanupOldData(daysToKeep = 7) {
    if (!this.leadDataStorage) return { cleaned_count: 0 };

    const cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);
    
    let cleanedCount = 0;
    
    Object.entries(this.leadDataStorage).forEach(([userId, data]) => {
      const dataDate = new Date(data.timestamp);
      if (dataDate < cutoffDate) {
        delete this.leadDataStorage[userId];
        delete this.segmentStorage[userId];
        cleanedCount++;
      }
    });
    
    if (cleanedCount > 0) {
      console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${cleanedCount} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –ª–∏–¥–æ–≤`);
    }
    
    return { cleaned_count: cleanedCount };
  }

  exportConfig() {
    const currentMode = this.getNotificationMode();
    
    return {
      name: 'AdminNotificationSystem',
      version: '4.0.0',
      admin_id: this.adminId,
      notifications_enabled: this.enableNotifications,
      current_mode: currentMode,
      settings: {
        test_mode: this.testMode,
        filter_admin_responses: this.filterAdminResponses,
        silent_mode: this.silentMode
      },
      components: {
        templates: this.templates.getInfo(),
        handlers: this.handlers.getInfo(),
        formatters: this.formatters.getInfo(),
        analytics: this.analytics.getInfo()
      },
      stats: this.getStats(),
      last_updated: new Date().toISOString()
    };
  }
}

module.exports = AdminNotificationSystem;
