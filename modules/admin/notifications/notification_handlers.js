// –§–∞–π–ª: modules/admin/notifications/notification_handlers.js
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

const { Markup } = require('telegraf');
const NotificationFormatters = require('./notification_formatters');

class NotificationHandlers {
  constructor(notificationSystem) {
    this.notificationSystem = notificationSystem;
    this.formatters = new NotificationFormatters();
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback'–æ–≤
    this.callbackStats = {
      totalHandled: 0,
      byAction: {},
      lastCallback: null,
      errors: 0
    };
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö admin callback'–æ–≤ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async handleCallback(ctx, action, targetUserId) {
    try {
      this.trackCallback(action);
      
      console.log(`üîç Notification callback: ${action} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUserId}`);
      
      // –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º –¥–µ–π—Å—Ç–≤–∏–π
      switch (action) {
        case 'urgent_call':
          return await this.handleUrgentCall(ctx, targetUserId);
        case 'book_consultation':
          return await this.handleBookConsultation(ctx, targetUserId);
        case 'call':
          return await this.handleCall(ctx, targetUserId);
        case 'send_materials':
          return await this.handleSendMaterials(ctx, targetUserId);
        case 'add_newsletter':
          return await this.handleAddNewsletter(ctx, targetUserId);
        case 'mark_processed':
          return await this.handleMarkProcessed(ctx, targetUserId);
        case 'full_survey':
          return await this.handleFullSurvey(ctx, targetUserId);
        case 'urgent_process':
          return await this.handleUrgentProcess(ctx, targetUserId);
        case 'change_segment':
          return await this.handleChangeSegment(ctx, targetUserId);
        default:
          if (action.startsWith('set_segment_')) {
            return await this.handleSetSegment(ctx, action, targetUserId);
          } else if (action.startsWith('back_to_lead_')) {
            return await this.handleBackToLead(ctx, targetUserId);
          } else {
            console.warn('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ notification callback:', action);
            await ctx.answerCbQuery('–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ');
          }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ notification callback:', error);
      this.callbackStats.errors++;
      throw error;
    }
  }

  // ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–ï–ô–°–¢–í–ò–ô –° –õ–ò–î–ê–ú–ò =====

  /**
   * –°—Ä–æ—á–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –≥–æ—Ä—è—á–µ–º—É –ª–∏–¥—É
   */
  async handleUrgentCall(ctx, targetUserId) {
    try {
      const leadData = this.notificationSystem.getStoredLeadData(targetUserId);
      const userName = leadData?.userInfo?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      
      const message = `üî• *–°–†–û–ß–ù–´–ô –ó–í–û–ù–û–ö –ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù*\n\n` +
        `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userName}\n` +
        `üÜî ID: \`${targetUserId}\`\n` +
        `‚è∞ –í—Ä–µ–º—è: ${this.formatters.formatDateTime(new Date())}\n\n` +
        `‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞"\n\n` +
        `üìû *–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:*\n` +
        `‚Ä¢ –°–≤—è–∑–∞—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤\n` +
        `‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n` +
        `‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ`;

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìû –°–≤—è–∑–∞–ª—Å—è', callback_data: `admin_mark_contacted_${targetUserId}` }],
            [{ text: 'üìä –ü–æ–ª–Ω–∞—è –∞–Ω–∫–µ—Ç–∞', callback_data: `admin_full_survey_${targetUserId}` }],
            [{ text: '‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ', callback_data: `admin_mark_processed_${targetUserId}` }]
          ]
        }
      });

      console.log(`üî• –°—Ä–æ—á–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ª–∏–¥–∞ ${targetUserId}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handleUrgentCall:', error);
      await ctx.editMessageText(
        `‚ùå *–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏*\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${targetUserId}\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.`,
        { parse_mode: 'Markdown' }
      );
    }
  }

  /**
   * –ó–∞–ø–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
   */
  async handleBookConsultation(ctx, targetUserId) {
    try {
      const leadData = this.notificationSystem.getStoredLeadData(targetUserId);
      const userName = leadData?.userInfo?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      const userUsername = leadData?.userInfo?.username;
      
      const message = `üìÖ *–ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Ø –ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù–ê*\n\n` +
        `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userName}\n` +
        `üÜî ID: \`${targetUserId}\`\n` +
        `üí¨ Username: ${userUsername ? `@${userUsername}` : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `üìã –î–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π\n\n` +
        `‚úÖ *–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:* –°–≤—è–∑–∞—Ç—å—Å—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏\n\n` +
        `üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:*\n` +
        `‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥—ã—Ö–∞–Ω–∏—è\n` +
        `‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ 30 –¥–Ω–µ–π\n` +
        `‚Ä¢ –û–±—É—á–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º —Ç–µ—Ö–Ω–∏–∫–∞–º`;

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìû –°–≤—è–∑–∞–ª—Å—è', callback_data: `admin_mark_contacted_${targetUserId}` }],
            [{ text: 'üìä –ü–æ–ª–Ω–∞—è –∞–Ω–∫–µ—Ç–∞', callback_data: `admin_full_survey_${targetUserId}` }],
            [{ text: '‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ', callback_data: `admin_mark_processed_${targetUserId}` }]
          ]
        }
      });

      console.log(`üìÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ª–∏–¥–∞ ${targetUserId}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handleBookConsultation:', error);
      await this.showErrorMessage(ctx, '–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏', targetUserId);
    }
  }

  /**
   * –û–±—ã—á–Ω—ã–π –∑–≤–æ–Ω–æ–∫
   */
  async handleCall(ctx, targetUserId) {
    try {
      const leadData = this.notificationSystem.getStoredLeadData(targetUserId);
      const userName = leadData?.userInfo?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      
      const message = `üìû *–ó–í–û–ù–û–ö –ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù*\n\n` +
        `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userName}\n` +
        `üÜî ID: \`${targetUserId}\`\n` +
        `‚è∞ –ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤\n\n` +
        `‚úÖ –°—Ç–∞—Ç—É—Å: –í —Ä–∞–±–æ—Ç–µ\n\n` +
        `üí° *–ü–ª–∞–Ω –∑–≤–æ–Ω–∫–∞:*\n` +
        `‚Ä¢ –û–±—Å—É–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏\n` +
        `‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É\n` +
        `‚Ä¢ –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã`;

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìû –°–≤—è–∑–∞–ª—Å—è', callback_data: `admin_mark_contacted_${targetUserId}` }],
            [{ text: 'üìä –ü–æ–ª–Ω–∞—è –∞–Ω–∫–µ—Ç–∞', callback_data: `admin_full_survey_${targetUserId}` }],
            [{ text: '‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ', callback_data: `admin_mark_processed_${targetUserId}` }]
          ]
        }
      });

      console.log(`üìû –ó–≤–æ–Ω–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ª–∏–¥–∞ ${targetUserId}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handleCall:', error);
      await this.showErrorMessage(ctx, '–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–≤–æ–Ω–∫–∞', targetUserId);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
   */
  async handleSendMaterials(ctx, targetUserId) {
    try {
      const leadData = this.notificationSystem.getStoredLeadData(targetUserId);
      const userName = leadData?.userInfo?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      const isChildFlow = leadData?.surveyType === 'child';
      
      const message = `üìß *–ú–ê–¢–ï–†–ò–ê–õ–´ –û–¢–ü–†–ê–í–õ–ï–ù–´*\n\n` +
        `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userName}\n` +
        `üÜî ID: \`${targetUserId}\`\n` +
        `üì¶ –¢–∏–ø: ${isChildFlow ? '–î–µ—Ç—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã' : '–í–∑—Ä–æ—Å–ª—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã'}\n\n` +
        `‚úÖ *–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:*\n` +
        `‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–π –≥–∏–¥\n` +
        `‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ PDF –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n` +
        `‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã\n\n` +
        `üìà –î–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–µ–ø–ª—É—é –±–∞–∑—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã`;

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìß –û—Ç–ø—Ä–∞–≤–∏–ª –µ—â–µ', callback_data: `admin_send_more_${targetUserId}` }],
            [{ text: 'üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å', callback_data: `admin_call_${targetUserId}` }],
            [{ text: '‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ', callback_data: `admin_mark_processed_${targetUserId}` }]
          ]
        }
      });

      console.log(`üìß –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ª–∏–¥—É ${targetUserId}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handleSendMaterials:', error);
      await this.showErrorMessage(ctx, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤', targetUserId);
    }
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Ä–∞—Å—Å—ã–ª–∫—É
   */
  async handleAddNewsletter(ctx, targetUserId) {
    try {
      const leadData = this.notificationSystem.getStoredLeadData(targetUserId);
      const userName = leadData?.userInfo?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      
      const message = `üìß *–î–û–ë–ê–í–õ–ï–ù –í –†–ê–°–°–´–õ–ö–£*\n\n` +
        `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userName}\n` +
        `üÜî ID: \`${targetUserId}\`\n` +
        `üìÆ –ë—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n\n` +
        `‚úÖ –°–µ–≥–º–µ–Ω—Ç: –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ –≤–∑—Ä–∞—â–∏–≤–∞–Ω–∏–µ\n\n` +
        `üì¨ *–ü–ª–∞–Ω —Ä–∞—Å—Å—ã–ª–∫–∏:*\n` +
        `‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏\n` +
        `‚Ä¢ –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∏ —Å–æ–≤–µ—Ç—ã\n` +
        `‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–µ–±–∏–Ω–∞—Ä—ã`;

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã', callback_data: `admin_send_materials_${targetUserId}` }],
            [{ text: '‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ', callback_data: `admin_mark_processed_${targetUserId}` }]
          ]
        }
      });

      console.log(`üìß –õ–∏–¥ ${targetUserId} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞—Å—Å—ã–ª–∫—É`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handleAddNewsletter:', error);
      await this.showErrorMessage(ctx, '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ä–∞—Å—Å—ã–ª–∫—É', targetUserId);
    }
  }

  /**
   * –û—Ç–º–µ—Ç–∫–∞ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
   */
  async handleMarkProcessed(ctx, targetUserId) {
    try {
      const leadData = this.notificationSystem.getStoredLeadData(targetUserId);
      const userName = leadData?.userInfo?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      const segment = leadData?.analysisResult?.segment || 'UNKNOWN';
      
      const message = `‚úÖ *–õ–ò–î –û–ë–†–ê–ë–û–¢–ê–ù*\n\n` +
        `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userName}\n` +
        `üÜî ID: \`${targetUserId}\`\n` +
        `üìä –°–µ–≥–º–µ–Ω—Ç: ${this.formatters.getSegmentEmoji(segment)} ${segment}\n` +
        `üïê –û–±—Ä–∞–±–æ—Ç–∞–Ω: ${this.formatters.formatDateTime(new Date())}\n\n` +
        `üìä –°—Ç–∞—Ç—É—Å: –ó–∞–∫—Ä—ã—Ç\n\n` +
        `üìà *–ò—Ç–æ–≥–∏ —Ä–∞–±–æ—Ç—ã —Å –ª–∏–¥–æ–º:*\n` +
        `‚Ä¢ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞\n` +
        `‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n` +
        `‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–∞–Ω—ã`;

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÑ –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É', callback_data: `admin_reopen_${targetUserId}` }],
            [{ text: 'üìä –ê—Ä—Ö–∏–≤', callback_data: `admin_archive_${targetUserId}` }]
          ]
        }
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞
      if (leadData) {
        leadData.processed = true;
        leadData.processedAt = new Date().toISOString();
        this.notificationSystem.storeLeadData(targetUserId, leadData);
      }

      console.log(`‚úÖ –õ–∏–¥ ${targetUserId} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handleMarkProcessed:', error);
      await this.showErrorMessage(ctx, '–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏', targetUserId);
    }
  }

  // ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –õ–ò–î–ê–• =====

  /**
   * –ü–æ–∫–∞–∑ –ø–æ–ª–Ω–æ–π –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async handleFullSurvey(ctx, targetUserId) {
    try {
      const leadData = this.notificationSystem.getStoredLeadData(targetUserId);
      
      if (!leadData) {
        await ctx.reply(
          `üìã *–ü–û–õ–ù–ê–Ø –ê–ù–ö–ï–¢–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø*\n\n` +
          `üë§ *ID:* ${targetUserId}\n\n` +
          `‚ö†Ô∏è *–î–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.*\n` +
          `–í–æ–∑–º–æ–∂–Ω–æ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª –∞–Ω–∫–µ—Ç—É.`,
          { 
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –ª–∏–¥—É', callback_data: `admin_back_to_lead_${targetUserId}` }]
              ]
            }
          }
        );
        return;
      }

      const { surveyAnswers, analysisResult, userInfo, surveyType } = leadData;
      const isChildFlow = surveyType === 'child';

      let message = `üìã *–ü–û–õ–ù–ê–Ø –ê–ù–ö–ï–¢–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø*\n\n`;
      message += `üë§ *–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n`;
      message += `‚Ä¢ –ò–º—è: ${userInfo?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
      message += `‚Ä¢ Username: ${userInfo?.username ? '@' + userInfo.username : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
      message += `‚Ä¢ Telegram ID: \`${targetUserId}\`\n`;
      message += `‚Ä¢ –¢–∏–ø –∞–Ω–∫–µ—Ç—ã: ${isChildFlow ? 'üë∂ –î–µ—Ç—Å–∫–∞—è' : 'üë®‚Äçüíº –í–∑—Ä–æ—Å–ª–∞—è'}\n\n`;

      message += `üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:*\n`;
      message += `‚Ä¢ –°–µ–≥–º–µ–Ω—Ç: ${this.formatters.getSegmentEmoji(analysisResult?.segment)} ${analysisResult?.segment || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}\n`;
      message += `‚Ä¢ –û–±—â–∏–π –±–∞–ª–ª: ${this.formatters.formatScore(analysisResult?.scores?.total)}\n`;
      if (analysisResult?.scores) {
        message += `‚Ä¢ –°—Ä–æ—á–Ω–æ—Å—Ç—å: ${analysisResult.scores.urgency}/100\n`;
        message += `‚Ä¢ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: ${analysisResult.scores.readiness}/100\n`;
        message += `‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: ${analysisResult.scores.fit}/100\n`;
      }
      message += `‚Ä¢ –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞: ${this.formatters.translateIssue(analysisResult?.primaryIssue)}\n\n`;

      message += `üìù *–î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:*\n`;
      message += this.formatDetailedAnswers(surveyAnswers, isChildFlow);

      message += `\nüïê *–î–∞—Ç–∞ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:* ${this.formatters.formatDateTime(leadData.timestamp)}`;

      await ctx.reply(message, { 
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –ª–∏–¥—É', callback_data: `admin_back_to_lead_${targetUserId}` }],
            [{ text: 'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', url: `https://t.me/${userInfo?.username || 'user'}` }]
          ]
        }
      });

      console.log(`üìã –ü–æ–∫–∞–∑–∞–Ω–∞ –ø–æ–ª–Ω–∞—è –∞–Ω–∫–µ—Ç–∞ –¥–ª—è –ª–∏–¥–∞ ${targetUserId}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handleFullSurvey:', error);
      await this.showErrorMessage(ctx, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã', targetUserId);
    }
  }

  // ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ï–ì–ú–ï–ù–¢–ê–ú–ò =====

  /**
   * –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞ –ª–∏–¥–∞
   */
  async handleChangeSegment(ctx, targetUserId) {
    try {
      const currentSegment = this.notificationSystem.getStoredSegment(targetUserId) || 'UNKNOWN';
      const currentSegmentName = this.formatters.translateSegment(currentSegment);

      const message = `üîÑ *–ò–ó–ú–ï–ù–ò–¢–¨ –°–ï–ì–ú–ï–ù–¢*\n\n` +
        `üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${targetUserId}\n` +
        `üìä *–¢–µ–∫—É—â–∏–π —Å–µ–≥–º–µ–Ω—Ç:* ${this.formatters.getSegmentEmoji(currentSegment)} ${currentSegmentName}\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç:`;

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üî• –ì–æ—Ä—è—á–∏–π (—Å—Ä–æ—á–Ω–æ)', callback_data: `admin_set_segment_HOT_LEAD_${targetUserId}` },
              { text: '‚≠ê –¢–µ–ø–ª—ã–π (24—á)', callback_data: `admin_set_segment_WARM_LEAD_${targetUserId}` }
            ],
            [
              { text: '‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω—ã–π (–ø–ª–∞–Ω–æ–≤—ã–π)', callback_data: `admin_set_segment_COLD_LEAD_${targetUserId}` },
              { text: 'üå± –í–∑—Ä–∞—â–∏–≤–∞–Ω–∏–µ', callback_data: `admin_set_segment_NURTURE_LEAD_${targetUserId}` }
            ],
            [
              { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `admin_back_to_lead_${targetUserId}` }
            ]
          ]
        }
      });

      console.log(`üîÑ –ü–æ–∫–∞–∑–∞–Ω–æ –º–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞ –¥–ª—è –ª–∏–¥–∞ ${targetUserId}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handleChangeSegment:', error);
      await this.showErrorMessage(ctx, '–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é —Å–µ–≥–º–µ–Ω—Ç–æ–≤', targetUserId);
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
   */
  async handleSetSegment(ctx, action, targetUserId) {
    try {
      const newSegment = action.replace('set_segment_', '').replace(`_${targetUserId}`, '');
      const oldSegment = this.notificationSystem.getStoredSegment(targetUserId) || 'UNKNOWN';

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç
      this.notificationSystem.updateStoredSegment(targetUserId, newSegment);

      const oldSegmentName = this.formatters.translateSegment(oldSegment);
      const newSegmentName = this.formatters.translateSegment(newSegment);

      const message = `‚úÖ *–°–ï–ì–ú–ï–ù–¢ –û–ë–ù–û–í–õ–ï–ù*\n\n` +
        `üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* ${targetUserId}\n` +
        `üîÑ *–ò–∑–º–µ–Ω–µ–Ω–∏–µ:* ${this.formatters.getSegmentEmoji(oldSegment)} ${oldSegmentName} ‚Üí ${this.formatters.getSegmentEmoji(newSegment)} ${newSegmentName}\n` +
        `‚è∞ *–í—Ä–µ–º—è:* ${this.formatters.formatDateTime(new Date())}\n\n` +
        `${this.getSegmentActionRecommendation(newSegment)}`;

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìû –°–≤—è–∑–∞—Ç—å—Å—è', callback_data: `admin_call_${targetUserId}` }],
            [{ text: 'üìä –ü–æ–ª–Ω–∞—è –∞–Ω–∫–µ—Ç–∞', callback_data: `admin_full_survey_${targetUserId}` }],
            [{ text: '‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ', callback_data: `admin_mark_processed_${targetUserId}` }]
          ]
        }
      });

      // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
      this.logSegmentChange(targetUserId, oldSegment, newSegment, ctx.from);

      console.log(`‚úÖ –°–µ–≥–º–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω: ${targetUserId} ${oldSegment} ‚Üí ${newSegment}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handleSetSegment:', error);
      await this.showErrorMessage(ctx, '–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞', targetUserId);
    }
  }

  // ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====

  /**
   * –í–æ–∑–≤—Ä–∞—Ç –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–¥–µ
   */
  async handleBackToLead(ctx, targetUserId) {
    try {
      const segment = this.notificationSystem.getStoredSegment(targetUserId) || 'UNKNOWN';
      const segmentName = this.formatters.translateSegment(segment);
      const leadData = this.notificationSystem.getStoredLeadData(targetUserId);

      let message = `üë§ *–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –õ–ò–î–ï*\n\n`;
      message += `üÜî *ID:* ${targetUserId}\n`;
      message += `üìä *–°–µ–≥–º–µ–Ω—Ç:* ${this.formatters.getSegmentEmoji(segment)} ${segmentName}\n`;
      
      if (leadData?.userInfo?.first_name) {
        message += `üë§ *–ò–º—è:* ${leadData.userInfo.first_name}\n`;
      }
      if (leadData?.userInfo?.username) {
        message += `üí¨ *Username:* @${leadData.userInfo.username}\n`;
      }
      
      message += `‚è∞ *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* ${this.formatters.formatDateTime(new Date())}\n\n`;
      message += `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å–µ–≥–º–µ–Ω—Ç', callback_data: `admin_change_segment_${targetUserId}` }],
            [{ text: 'üìû –°–≤—è–∑–∞—Ç—å—Å—è', callback_data: `admin_call_${targetUserId}` }],
            [{ text: 'üìä –ü–æ–ª–Ω–∞—è –∞–Ω–∫–µ—Ç–∞', callback_data: `admin_full_survey_${targetUserId}` }],
            [{ text: '‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ', callback_data: `admin_mark_processed_${targetUserId}` }]
          ]
        }
      });

      console.log(`üîô –í–æ–∑–≤—Ä–∞—Ç –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–¥–µ ${targetUserId}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handleBackToLead:', error);
      await this.showErrorMessage(ctx, '–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ª–∏–¥—É', targetUserId);
    }
  }

  /**
   * –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
   */
  async showErrorMessage(ctx, errorText, targetUserId = null) {
    try {
      const message = `‚ùå *${errorText}*\n\n` +
        (targetUserId ? `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${targetUserId}\n` : '') +
        `üïê –í—Ä–µ–º—è: ${this.formatters.formatDateTime(new Date())}\n\n` +
        `üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.`;

      const keyboard = [];
      if (targetUserId) {
        keyboard.push([{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: `admin_back_to_lead_${targetUserId}` }]);
      }
      keyboard.push([{ text: 'üéõÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data: 'admin_main' }]);

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', error);
      await ctx.reply(`‚ùå ${errorText}`);
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∞–Ω–∫–µ—Ç—ã
   */
  formatDetailedAnswers(surveyAnswers, isChildFlow) {
    if (!surveyAnswers) return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';

    let formatted = '';
    
    if (isChildFlow) {
      // –î–µ—Ç—Å–∫–∞—è –∞–Ω–∫–µ—Ç–∞
      const childFields = [
        'child_age_detail', 'child_education_status', 'child_schedule_stress',
        'child_problems_detailed', 'child_parent_involvement', 
        'child_motivation_approach', 'child_time_availability'
      ];
      
      childFields.forEach(field => {
        if (surveyAnswers[field]) {
          const label = this.getFieldLabel(field);
          const value = Array.isArray(surveyAnswers[field]) ? 
            this.formatters.translateArray(surveyAnswers[field]) :
            this.formatters.translateValue(surveyAnswers[field]);
          formatted += `‚Ä¢ ${label}: ${value}\n`;
        }
      });
    } else {
      // –í–∑—Ä–æ—Å–ª–∞—è –∞–Ω–∫–µ—Ç–∞
      const adultFields = [
        'age_group', 'occupation', 'stress_level', 'sleep_quality',
        'current_problems', 'breathing_experience', 'time_commitment', 'main_goals'
      ];
      
      adultFields.forEach(field => {
        if (surveyAnswers[field] !== undefined) {
          const label = this.getFieldLabel(field);
          let value;
          
          if (Array.isArray(surveyAnswers[field])) {
            value = this.formatters.translateArray(surveyAnswers[field]);
          } else if (field === 'stress_level') {
            value = this.formatters.formatStressLevel(surveyAnswers[field]);
          } else if (field === 'sleep_quality') {
            value = this.formatters.formatSleepQuality(surveyAnswers[field]);
          } else {
            value = this.formatters.translateValue(surveyAnswers[field]);
          }
          
          formatted += `‚Ä¢ ${label}: ${value}\n`;
        }
      });
    }

    return formatted || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
  }

 
   /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π
   */
  getFieldLabel(field) {
    const labels = {
      // –î–µ—Ç—Å–∫–∏–µ –ø–æ–ª—è
      'child_age_detail': '–í–æ–∑—Ä–∞—Å—Ç',
      'child_education_status': '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
      'child_schedule_stress': '–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å',
      'child_problems_detailed': '–ü—Ä–æ–±–ª–µ–º—ã',
      'child_parent_involvement': '–ö—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è',
      'child_motivation_approach': '–ú–æ—Ç–∏–≤–∞—Ü–∏—è',
      'child_time_availability': '–í—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏–π',
      
      // –í–∑—Ä–æ—Å–ª—ã–µ –ø–æ–ª—è
      'age_group': '–í–æ–∑—Ä–∞—Å—Ç',
      'occupation': '–î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
      'stress_level': '–£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞',
      'sleep_quality': '–ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞',
      'current_problems': '–ü—Ä–æ–±–ª–µ–º—ã',
      'breathing_experience': '–û–ø—ã—Ç',
      'time_commitment': '–í—Ä–µ–º—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–∏',
      'main_goals': '–¶–µ–ª–∏'
    };

    return labels[field] || field;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞
   */
  getSegmentActionRecommendation(segment) {
    const recommendations = {
      'HOT_LEAD': `üö® *–°–†–û–ß–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:*\n‚Ä¢ –°–≤—è–∑–∞—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤\n‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ`,
      'WARM_LEAD': `‚è∞ *–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –î–ï–ô–°–¢–í–ò–Ø:*\n‚Ä¢ –°–≤—è–∑–∞—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤\n‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é`,
      'COLD_LEAD': `üìÖ *–ü–õ–ê–ù–û–í–´–ï –î–ï–ô–°–¢–í–ò–Ø:*\n‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –≤ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–Ω\n‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n‚Ä¢ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç`,
      'NURTURE_LEAD': `üå± *–î–û–õ–ì–û–°–†–û–ß–ù–ê–Ø –†–ê–ë–û–¢–ê:*\n‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É\n‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–µ–±–∏–Ω–∞—Ä—ã\n‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π`
    };

    return recommendations[segment] || 'üí° –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–¥–∞';
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç–∞
   */
  logSegmentChange(userId, oldSegment, newSegment, admin) {
    const logEntry = {
      event: 'segment_changed_via_notification',
      timestamp: new Date().toISOString(),
      user_id: userId,
      old_segment: oldSegment,
      new_segment: newSegment,
      changed_by: {
        admin_id: admin?.id,
        admin_username: admin?.username,
        admin_first_name: admin?.first_name
      }
    };

    console.log('üìù –ò–ó–ú–ï–ù–ï–ù–ò–ï –°–ï–ì–ú–ï–ù–¢–ê (NOTIFICATION):', JSON.stringify(logEntry, null, 2));
  }

  /**
   * –¢—Ä–µ–∫–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è callback'–æ–≤
   */
  trackCallback(action) {
    this.callbackStats.totalHandled++;
    this.callbackStats.lastCallback = {
      action: action,
      timestamp: new Date().toISOString()
    };
    
    if (!this.callbackStats.byAction[action]) {
      this.callbackStats.byAction[action] = 0;
    }
    this.callbackStats.byAction[action]++;
    
    console.log(`üìä Notification callback tracked: ${action} (total: ${this.callbackStats.totalHandled})`);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–æ—á–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
   */
  async handleUrgentProcess(ctx, targetUserId) {
    try {
      const leadData = this.notificationSystem.getStoredLeadData(targetUserId);
      const userName = leadData?.userInfo?.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      
      await ctx.answerCbQuery('üî• –õ–∏–¥ –≤–∑—è—Ç –≤ —Å—Ä–æ—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É');
      
      const message = `üî• *–í –°–†–û–ß–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ï*\n\n` +
        `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userName}\n` +
        `üÜî ID: \`${targetUserId}\`\n` +
        `‚è∞ –í–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É: ${this.formatters.formatDateTime(new Date())}\n\n` +
        `‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô\n\n` +
        `‚ö° *–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*\n` +
        `‚Ä¢ –°–≤—è–∑–∞—Ç—å—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ\n` +
        `‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å—Ä–æ—á–Ω—É—é –ø–æ–º–æ—â—å\n` +
        `‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏`;

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìû –°–≤—è–∑–∞–ª—Å—è', callback_data: `admin_mark_contacted_${targetUserId}` }],
            [{ text: 'üìä –ü–æ–ª–Ω–∞—è –∞–Ω–∫–µ—Ç–∞', callback_data: `admin_full_survey_${targetUserId}` }],
            [{ text: '‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ', callback_data: `admin_mark_processed_${targetUserId}` }]
          ]
        }
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞
      if (leadData) {
        leadData.urgentProcessing = true;
        leadData.urgentProcessingAt = new Date().toISOString();
        this.notificationSystem.storeLeadData(targetUserId, leadData);
      }

      console.log(`üî• –õ–∏–¥ ${targetUserId} –≤–∑—è—Ç –≤ —Å—Ä–æ—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ handleUrgentProcess:', error);
      await this.showErrorMessage(ctx, '–û—à–∏–±–∫–∞ —Å—Ä–æ—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏', targetUserId);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
   */
  getStats() {
    return {
      total_callbacks: this.callbackStats.totalHandled,
      callbacks_by_action: this.callbackStats.byAction,
      last_callback: this.callbackStats.lastCallback,
      errors: this.callbackStats.errors,
      success_rate: this.callbackStats.totalHandled > 0 ? 
        ((this.callbackStats.totalHandled - this.callbackStats.errors) / this.callbackStats.totalHandled * 100).toFixed(2) + '%' : 
        '100%',
      most_used_actions: this.getMostUsedActions(),
      last_updated: new Date().toISOString()
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
   */
  getMostUsedActions() {
    return Object.entries(this.callbackStats.byAction)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 5)
      .map(([action, count]) => ({ action, count }));
  }

  /**
   * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
   */
  getInfo() {
    return {
      name: 'NotificationHandlers',
      version: '1.0.0',
      features: [
        'lead_action_handling',
        'segment_management',
        'survey_display',
        'urgent_processing',
        'callback_tracking',
        'error_handling'
      ],
      supported_actions: [
        'urgent_call', 'book_consultation', 'call', 'send_materials',
        'add_newsletter', 'mark_processed', 'full_survey', 'urgent_process',
        'change_segment', 'set_segment', 'back_to_lead'
      ],
      stats: this.getStats(),
      last_updated: new Date().toISOString()
    };
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  cleanup() {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ NotificationHandlers...');
    console.log('üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ callback\'–æ–≤:', JSON.stringify(this.getStats(), null, 2));
    
    // –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    this.callbackStats = {
      totalHandled: 0,
      byAction: {},
      lastCallback: null,
      errors: 0
    };
    
    console.log('‚úÖ NotificationHandlers –æ—á–∏—â–µ–Ω');
  }
}

module.exports = NotificationHandlers;