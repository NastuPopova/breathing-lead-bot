// –§–∞–π–ª: lead_bot/modules/survey/extended_questions.js
// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∫–µ—Ç–∞ –∏–∑ 18 –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –ª–æ–≥–∏–∫–æ–π

const { Markup } = require('telegraf');

class ExtendedSurveyQuestions {
  constructor() {
    this.questions = this.initializeQuestions();
    this.flowLogic = this.initializeFlowLogic();
  }

  initializeQuestions() {
    return {
      // –ë–õ–û–ö –ê: –î–ï–ú–û–ì–†–ê–§–ò–Ø –ò –ö–û–ù–¢–ï–ö–°–¢ (3 –≤–æ–ø—Ä–æ—Å–∞)
      age_group: {
        id: 'age_group',
        block: 'A',
        text: `üìÖ *–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ:*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç –∏ –¥–ª—è –∫–æ–≥–æ –∑–∞–ø–æ–ª–Ω—è–µ—Ç–µ –∞–Ω–∫–µ—Ç—É. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏.`,
        keyboard: Markup.inlineKeyboard([
          [
            Markup.button.callback('üë∂ 5-12 –ª–µ—Ç', 'age_5-12'),
            Markup.button.callback('üßí 13-17 –ª–µ—Ç', 'age_13-17')
          ],
          [
            Markup.button.callback('üë®‚Äçüíº 18-30 –ª–µ—Ç', 'age_18-30'),
            Markup.button.callback('üë©‚Äçüíº 31-45 –ª–µ—Ç', 'age_31-45')
          ],
          [
            Markup.button.callback('üë®‚Äçü¶≥ 46-60 –ª–µ—Ç', 'age_46-60'),
            Markup.button.callback('üë¥ 60+ –ª–µ—Ç', 'age_60+')
          ],
          [Markup.button.callback('üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ó–∞–ø–æ–ª–Ω—è—é –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞', 'age_for_child')]
        ]),
        required: true,
        type: 'single_choice',
        adaptive: true
      },

      occupation: {
        id: 'occupation',
        block: 'A',
        text: `üíº *–û—Å–Ω–æ–≤–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å:*\n\n–†–∞–∑–Ω—ã–µ –≤–∏–¥—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞—é—Ç —Ä–∞–∑–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥—ã—Ö–∞–Ω–∏—è –∏ —Å—Ç—Ä–µ—Å—Å–∞.`,
        keyboard: Markup.inlineKeyboard([
          [Markup.button.callback('üíª –û—Ñ–∏—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞', 'occ_office')],
          [Markup.button.callback('üè† –†–∞–±–æ—Ç–∞ –¥–æ–º–∞/—Ñ—Ä–∏–ª–∞–Ω—Å', 'occ_home')],
          [Markup.button.callback('üèóÔ∏è –§–∏–∑–∏—á–µ—Å–∫–∏–π —Ç—Ä—É–¥', 'occ_physical')],
          [Markup.button.callback('üéì –£—á–µ–±–∞', 'occ_student')],
          [Markup.button.callback('üë∂ –í –¥–µ–∫—Ä–µ—Ç–µ', 'occ_maternity')],
          [Markup.button.callback('üåÖ –ù–∞ –ø–µ–Ω—Å–∏–∏', 'occ_retired')],
          [Markup.button.callback('üëî –†—É–∫–æ–≤–æ–¥—è—â–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å', 'occ_management')]
        ]),
        required: true,
        type: 'single_choice'
      },

      physical_activity: {
        id: 'physical_activity',
        block: 'A',
        text: `üèÉ *–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*\n\n–ö–∞–∫ —á–∞—Å—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å —Å–ø–æ—Ä—Ç–æ–º –∏–ª–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏?`,
        keyboard: Markup.inlineKeyboard([
          [Markup.button.callback('üî• –ï–∂–µ–¥–Ω–µ–≤–Ω–æ', 'activity_daily')],
          [Markup.button.callback('üí™ 3-4 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é', 'activity_regular')],
          [Markup.button.callback('üö∂ 1-2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é', 'activity_sometimes')],
          [Markup.button.callback('üìö –ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –º–µ—Å—è—Ü', 'activity_rarely')],
          [Markup.button.callback('üõãÔ∏è –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –∑–∞–Ω–∏–º–∞—é—Å—å', 'activity_never')]
        ]),
        required: true,
        type: 'single_choice'
      },

      // –ë–õ–û–ö –ë: –û–°–ù–û–í–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ (4 –≤–æ–ø—Ä–æ—Å–∞)
      current_problems: {
        id: 'current_problems',
        block: 'B',
        text: `‚ö†Ô∏è *–ö–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –±–µ—Å–ø–æ–∫–æ—è—Ç –≤–∞—Å –°–ï–ô–ß–ê–°?*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã. –ß–µ–º —á–µ—Å—Ç–Ω–µ–µ –æ—Ç–≤–µ—Ç—ã, —Ç–µ–º —Ç–æ—á–Ω–µ–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.`,
        keyboard: Markup.inlineKeyboard([
          [Markup.button.callback('üò∞ –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç—Ä–µ—Å—Å, –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ', 'prob_chronic_stress')],
          [Markup.button.callback('üò¥ –ü–ª–æ—Ö–æ–π —Å–æ–Ω, –±–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞', 'prob_insomnia')],
          [Markup.button.callback('ü´Å –û–¥—ã—à–∫–∞, –Ω–µ—Ö–≤–∞—Ç–∫–∞ –≤–æ–∑–¥—É—Ö–∞', 'prob_breathing_issues')],
          [Markup.button.callback('üíî –ü–æ–≤—ã—à–µ–Ω–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ', 'prob_high_pressure')],
          [Markup.button.callback('ü§ï –ß–∞—Å—Ç—ã–µ –≥–æ–ª–æ–≤–Ω—ã–µ –±–æ–ª–∏', 'prob_headaches')],
          [Markup.button.callback('üòµ –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è —É—Å—Ç–∞–ª–æ—Å—Ç—å', 'prob_fatigue')],
          [Markup.button.callback('üò® –¢—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å, –ø–∞–Ω–∏—á–µ—Å–∫–∏–µ –∞—Ç–∞–∫–∏', 'prob_anxiety')],
          [Markup.button.callback('üß† –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–µ–π', 'prob_concentration')],
          [Markup.button.callback('üîô –ë–æ–ª–∏ –≤ —à–µ–µ, –ø–ª–µ—á–∞—Ö, —Å–ø–∏–Ω–µ', 'prob_back_pain')],
          [Markup.button.callback('üçΩÔ∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ–º', 'prob_digestion')],
          [Markup.button.callback('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä', 'prob_done')]
        ]),
        required: true,
        type: 'multiple_choice',
        minSelections: 1,
        note: "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä'"
      },

      stress_level: {
        id: 'stress_level',
        block: 'B',
        text: `üìä *–£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏:*\n\n1 - –ø–æ—á—Ç–∏ –Ω–µ—Ç —Å—Ç—Ä–µ—Å—Å–∞, –∂–∏–≤—É —Å–ø–æ–∫–æ–π–Ω–æ\n10 - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç—Ä–µ—Å—Å, –Ω–∞ –ø—Ä–µ–¥–µ–ª–µ\n\n–û—Ü–µ–Ω–∏—Ç–µ —á–µ—Å—Ç–Ω–æ - —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥.`,
        keyboard: Markup.inlineKeyboard([
          [
            Markup.button.callback('üòå 1', 'stress_1'),
            Markup.button.callback('üòä 2', 'stress_2'),
            Markup.button.callback('üôÇ 3', 'stress_3'),
            Markup.button.callback('üòê 4', 'stress_4'),
            Markup.button.callback('üòï 5', 'stress_5')
          ],
          [
            Markup.button.callback('üòü 6', 'stress_6'),
            Markup.button.callback('üò∞ 7', 'stress_7'),
            Markup.button.callback('üò® 8', 'stress_8'),
            Markup.button.callback('üò± 9', 'stress_9'),
            Markup.button.callback('üÜò 10', 'stress_10')
          ]
        ]),
        required: true,
        type: 'scale'
      },

      sleep_quality: {
        id: 'sleep_quality',
        block: 'B',
        text: `üò¥ *–ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü:*\n\n1 - —Å–ø–ª—é –æ—á–µ–Ω—å –ø–ª–æ—Ö–æ, –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –ø—Ä–æ—Å—ã–ø–∞—é—Å—å\n10 - —Å–æ–Ω –æ—Ç–ª–∏—á–Ω—ã–π, –≤—ã—Å—ã–ø–∞—é—Å—å –∏ —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –±–æ–¥—Ä–æ\n\n–ß–µ—Å—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã.`,
        keyboard: Markup.inlineKeyboard([
          [
            Markup.button.callback('üõå 1', 'sleep_1'),
            Markup.button.callback('üò™ 2', 'sleep_2'),
            Markup.button.callback('üò¥ 3', 'sleep_3'),
            Markup.button.callback('ü•± 4', 'sleep_4'),
            Markup.button.callback('üòê 5', 'sleep_5')
          ],
          [
            Markup.button.callback('üôÇ 6', 'sleep_6'),
            Markup.button.callback('üòä 7', 'sleep_7'),
            Markup.button.callback('üòå 8', 'sleep_8'),
            Markup.button.callback('üò¥ 9', 'sleep_9'),
            Markup.button.callback('üåü 10', 'sleep_10')
          ]
        ]),
        required: true,
        type: 'scale'
      },

      priority_problem: {
        id: 'priority_problem',
        block: 'B',
        text: `üéØ *–ß—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç –ë–û–õ–¨–®–ï –í–°–ï–ì–û –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –≥–ª–∞–≤–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Ä–µ—à–∏—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å.`,
        keyboard: Markup.inlineKeyboard([
          [Markup.button.callback('üò∞ –ù–µ –º–æ–≥—É —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º', 'prio_stress')],
          [Markup.button.callback('üò¥ –ü–ª–æ—Ö–æ —Å–ø–ª—é, –Ω–µ –≤—ã—Å—ã–ø–∞—é—Å—å', 'prio_sleep')],
          [Markup.button.callback('ü´Å –ü—Ä–æ–±–ª–µ–º—ã —Å –¥—ã—Ö–∞–Ω–∏–µ–º', 'prio_breathing')],
          [Markup.button.callback('üíî –í—ã—Å–æ–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ, –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–¥—Ü–µ–º', 'prio_pressure')],
          [Markup.button.callback('üò® –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞, –ø–∞–Ω–∏—á–µ—Å–∫–∏–µ –∞—Ç–∞–∫–∏', 'prio_anxiety')],
          [Markup.button.callback('üòµ –•—Ä–æ–Ω–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–ª–æ—Å—Ç—å, –Ω–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏', 'prio_fatigue')],
          [Markup.button.callback('üß† –ù–µ –º–æ–≥—É —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è', 'prio_focus')]
        ]),
        required: true,
        type: 'single_choice'
      },

      // –ë–õ–û–ö –í: –î–´–•–ê–¢–ï–õ–¨–ù–´–ï –ü–†–ò–í–´–ß–ö–ò (4 –≤–æ–ø—Ä–æ—Å–∞)
      breathing_method: {
        id: 'breathing_method',
        block: 'C',
        text: `üëÉ *–ö–∞–∫ –≤—ã –æ–±—ã—á–Ω–æ –¥—ã—à–∏—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è?*\n\n–ü–æ–Ω–∞–±–ª—é–¥–∞–π—Ç–µ –∑–∞ —Å–≤–æ–∏–º –¥—ã—Ö–∞–Ω–∏–µ–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –æ—Ç–≤–µ—Ç—å—Ç–µ —á–µ—Å—Ç–Ω–æ.`,
        keyboard: Markup.inlineKeyboard([
          [Markup.button.callback('üëÉ –í –æ—Å–Ω–æ–≤–Ω–æ–º –Ω–æ—Å–æ–º', 'method_nose')],
          [Markup.button.callback('üëÑ –ß–∞—Å—Ç–æ –¥—ã—à—É —Ä—Ç–æ–º', 'method_mouth')],
          [Markup.button.callback('üîÑ –ü–æ–ø–µ—Ä–µ–º–µ–Ω–Ω–æ –Ω–æ—Å–æ–º –∏ —Ä—Ç–æ–º', 'method_mixed')],
          [Markup.button.callback('ü§∑ –ù–µ –æ–±—Ä–∞—â–∞—é –≤–Ω–∏–º–∞–Ω–∏—è –Ω–∞ –¥—ã—Ö–∞–Ω–∏–µ', 'method_unaware')]
        ]),
        required: true,
        type: 'single_choice'
      },

      breathing_frequency: {
        id: 'breathing_frequency',
        block: 'C',
        text: `ü´Å *–ö–∞–∫ —á–∞—Å—Ç–æ –∑–∞–º–µ—á–∞–µ—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥—ã—Ö–∞–Ω–∏–µ–º?*\n\n–ü—Ä–æ–±–ª–µ–º—ã: –æ–¥—ã—à–∫–∞, –Ω–µ—Ö–≤–∞—Ç–∫–∞ –≤–æ–∑–¥—É—Ö–∞, —É—á–∞—â–µ–Ω–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ, –¥—ã—Ö–∞–Ω–∏–µ —Ä—Ç–æ–º.`,
        keyboard: Markup.inlineKeyboard([
          [Markup.button.callback('üî¥ –ü–æ—Å—Ç–æ—è–Ω–Ω–æ (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å)', 'freq_constantly')],
          [Markup.button.callback('üü° –ß–∞—Å—Ç–æ (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)', 'freq_often')],
          [Markup.button.callback('üü† –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –º–µ—Å—è—Ü)', 'freq_sometimes')],
          [Markup.button.callback('üü¢ –†–µ–¥–∫–æ (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –≥–æ–¥)', 'freq_rarely')],
          [Markup.button.callback('‚ö™ –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–º–µ—á–∞—é –ø—Ä–æ–±–ª–µ–º', 'freq_never')]
        ]),
        required: true,
        type: 'single_choice'
      },

      shallow_breathing: {
        id: 'shallow_breathing',
        block: 'C',
        text: `üí® *–ó–∞–º–µ—á–∞–ª–∏ –ª–∏ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ –∏–ª–∏ –∑–∞–¥–µ—Ä–∂–∫–∏?*\n\n–û—Å–æ–±–µ–Ω–Ω–æ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã, –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π.`,
        keyboard: Markup.inlineKeyboard([
          [Markup.button.callback('‚úÖ –î–∞, —á–∞—Å—Ç–æ –ª–æ–≤–ª—é —Å–µ–±—è –Ω–∞ —ç—Ç–æ–º', 'shallow_yes_often')],
          [Markup.button.callback('ü§î –ò–Ω–æ–≥–¥–∞ –∑–∞–º–µ—á–∞—é –≤ —Å—Ç—Ä–µ—Å—Å–µ', 'shallow_sometimes')],
          [Markup.button.callback('‚ùå –ù–µ—Ç, –¥—ã—à—É –Ω–æ—Ä–º–∞–ª—å–Ω–æ –∏ –≥–ª—É–±–æ–∫–æ', 'shallow_no')]
        ]),
        required: true,
        type: 'single_choice'
      },

      stress_breathing: {
        id: 'stress_breathing',
        block: 'C',
        text: `üò∞ *–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –¥—ã—Ö–∞–Ω–∏–µ–º, –∫–æ–≥–¥–∞ –Ω–µ—Ä–≤–Ω–∏—á–∞–µ—Ç–µ?*\n\n–í—Å–ø–æ–º–Ω–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–µ—Å—Å–æ–≤—É—é —Å–∏—Ç—É–∞—Ü–∏—é.`,
        keyboard: Markup.inlineKeyboard([
          [Markup.button.callback('üí® –î—ã—Ö–∞–Ω–∏–µ —É—á–∞—â–∞–µ—Ç—Å—è, —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–º', 'stress_rapid')],
          [Markup.button.callback('‚è∏Ô∏è –ù–∞—á–∏–Ω–∞—é –∑–∞–¥–µ—Ä–∂–∏–≤–∞—Ç—å –¥—ã—Ö–∞–Ω–∏–µ', 'stress_hold')],
          [Markup.button.callback('üò§ –ß—É–≤—Å—Ç–≤—É—é –Ω–µ—Ö–≤–∞—Ç–∫—É –≤–æ–∑–¥—É—Ö–∞', 'stress_shortage')],
          [Markup.button.callback('üëÑ –î—ã—à—É —Ä—Ç–æ–º –≤–º–µ—Å—Ç–æ –Ω–æ—Å–∞', 'stress_mouth')],
          [Markup.button.callback('ü§∑ –ù–µ –∑–∞–º–µ—á–∞—é –∏–∑–º–µ–Ω–µ–Ω–∏–π', 'stress_no_change')],
          [Markup.button.callback('üßò –°—Ç–∞—Ä–∞—é—Å—å –¥—ã—à–∞—Ç—å –≥–ª—É–±–∂–µ', 'stress_conscious')]
        ]),
        required: true,
        type: 'single_choice'
      },

      // –ë–õ–û–ö –ì: –û–ü–´–¢ –ò –¶–ï–õ–ò (4 –≤–æ–ø—Ä–æ—Å–∞)
      breathing_experience: {
        id: 'breathing_experience',
        block: 'D',
        text: `üßò *–í–∞—à –æ–ø—ã—Ç —Å –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏:*\n\n–ô–æ–≥–∞, –º–µ–¥–∏—Ç–∞—Ü–∏—è, —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.`,
        keyboard: Markup.inlineKeyboard([
          [Markup.button.callback('üÜï –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–æ–±–æ–≤–∞–ª(–∞)', 'exp_never')],
          [Markup.button.callback('üîç –ü—Ä–æ–±–æ–≤–∞–ª(–∞) –ø–∞—Ä—É —Ä–∞–∑, –Ω–µ –ø–æ—à–ª–æ', 'exp_few_times')],
          [Markup.button.callback('üìö –ò–∑—É—á–∞–ª(–∞) —Ç–µ–æ—Ä–∏—é, –Ω–æ –Ω–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞–ª(–∞)', 'exp_theory')],
          [Markup.button.callback('üìÖ –ò–Ω–æ–≥–¥–∞ –ø—Ä–∞–∫—Ç–∏–∫—É—é (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –º–µ—Å—è—Ü)', 'exp_sometimes')],
          [Markup.button.callback('üí™ –ü—Ä–∞–∫—Ç–∏–∫—É—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)', 'exp_regularly')],
          [Markup.button.callback('üéØ –û–ø—ã—Ç–Ω—ã–π –ø—Ä–∞–∫—Ç–∏–∫ (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ)', 'exp_expert')]
        ]),
        required: true,
        type: 'single_choice'
      },

      time_commitment: {
        id: 'time_commitment',
        block: 'D',
        text: `‚è∞ *–í—Ä–µ–º—è –¥–ª—è –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫:*\n\n–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ? –ë—É–¥—å—Ç–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã!`,
        keyboard: Markup.inlineKeyboard([
          [Markup.button.callback('‚ö° 3-5 –º–∏–Ω—É—Ç (–≤ –ø–µ—Ä–µ—Ä—ã–≤–∞—Ö, –ø–æ –¥–æ—Ä–æ–≥–µ)', 'time_3-5')],
          [Markup.button.callback('üéØ 10-15 –º–∏–Ω—É—Ç (—É—Ç—Ä–æ–º –∏–ª–∏ –≤–µ—á–µ—Ä–æ–º)', 'time_10-15')],
          [Markup.button.callback('üíé 20-30 –º–∏–Ω—É—Ç (–ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞)', 'time_20-30')],
          [Markup.button.callback('üèÜ 30+ –º–∏–Ω—É—Ç (–≥–ª—É–±–æ–∫–æ–µ –∏–∑—É—á–µ–Ω–∏–µ)', 'time_30+')]
        ]),
        required: true,
        type: 'single_choice'
      },

      format_preferences: {
        id: 'format_preferences',
        block: 'D',
        text: `üì± *–£–¥–æ–±–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑—É—á–µ–Ω–∏—è:*\n\n–ö–∞–∫ –≤–∞–º –∫–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ –∏–∑—É—á–∞—Ç—å –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏? –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ.`,
        keyboard: Markup.inlineKeyboard([
          [Markup.button.callback('üé• –í–∏–¥–µ–æ—É—Ä–æ–∫–∏ —Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–µ–π', 'format_video')],
          [Markup.button.callback('üéß –ê—É–¥–∏–æ–ø—Ä–∞–∫—Ç–∏–∫–∏ —Å –≥–æ–ª–æ—Å–æ–º', 'format_audio')],
          [Markup.button.callback('üìñ –¢–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏', 'format_text')],
          [Markup.button.callback('üíª –ñ–∏–≤—ã–µ –æ–Ω–ª–∞–π–Ω-–∑–∞–Ω—è—Ç–∏—è', 'format_online')],
          [Markup.button.callback('üë®‚Äç‚öïÔ∏è –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏', 'format_individual')],
          [Markup.button.callback('üì± –ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', 'format_app')],
          [Markup.button.callback('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä', 'format_done')]
        ]),
        required: true,
        type: 'multiple_choice',
        note: "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä'"
      },

      main_goals: {
        id: 'main_goals',
        block: 'D',
        text: `üéØ *–ì–ª–∞–≤–Ω—ã–µ —Ü–µ–ª–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –º–µ—Å—è—Ü:*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º—É–º 2 —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ —Ü–µ–ª–∏.`,
        keyboard: Markup.inlineKeyboard([
          [Markup.button.callback('üòå –ù–∞—É—á–∏—Ç—å—Å—è –±—ã—Å—Ç—Ä–æ —Ä–∞—Å—Å–ª–∞–±–ª—è—Ç—å—Å—è –≤ —Å—Ç—Ä–µ—Å—Å–µ', 'goal_relax')],
          [Markup.button.callback('üí™ –ü–æ–≤—ã—Å–∏—Ç—å —Å—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å', 'goal_resilience')],
          [Markup.button.callback('üò® –ò–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ –∏ –ø–∞–Ω–∏–∫–∏', 'goal_anxiety')],
          [Markup.button.callback('üò¥ –ù–∞–ª–∞–¥–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–æ–Ω', 'goal_sleep')],
          [Markup.button.callback('‚ö° –ü–æ–≤—ã—Å–∏—Ç—å —ç–Ω–µ—Ä–≥–∏—é –∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å', 'goal_energy')],
          [Markup.button.callback('üíî –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ/–ø—É–ª—å—Å', 'goal_pressure')],
          [Markup.button.callback('ü´Å –£–ª—É—á—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –ª–µ–≥–∫–∏—Ö –∏ –¥—ã—Ö–∞–Ω–∏—è', 'goal_breathing')],
          [Markup.button.callback('üß† –£–ª—É—á—à–∏—Ç—å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é –≤–Ω–∏–º–∞–Ω–∏—è', 'goal_focus')],
          [Markup.button.callback('‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–æ—Ö—É–¥–µ–Ω–∏—è', 'goal_weight')],
          [Markup.button.callback('üíö –û–±—â–µ–µ –æ–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–º–∞', 'goal_health')],
          [Markup.button.callback('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä', 'goals_done')]
        ]),
        required: true,
        type: 'multiple_choice',
        maxSelections: 2,
        note: "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º—É–º 2 —Ü–µ–ª–∏, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä'"
      },

      // –ë–õ–û–ö –î: –ê–î–ê–ü–¢–ò–í–ù–´–ï –í–û–ü–†–û–°–´ (–ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø–æ —É—Å–ª–æ–≤–∏—è–º)
      child_specific: {
        id: 'child_specific',
        block: 'E',
        condition: (userData) => userData.age_group && (
          userData.age_group.includes('5-12') || 
          userData.age_group.includes('13-17') || 
          userData.age_group === 'for_child'
        ),
        text: `üë∂ *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–±–µ–Ω–∫–µ:*\n\n–ß—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç –≤ –ø–æ–≤–µ–¥–µ–Ω–∏–∏ –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–µ–±–µ–Ω–∫–∞?`,
        keyboard: Markup.inlineKeyboard([
          [Markup.button.callback('üò≠ –ß–∞—Å—Ç–æ –∫–∞–ø—Ä–∏–∑–Ω–∏—á–∞–µ—Ç, –ø–ª–∞—á–µ—Ç', 'child_tantrums')],
          [Markup.button.callback('üò¥ –¢—Ä—É–¥–Ω–æ –∑–∞—Å—ã–ø–∞–µ—Ç, –±–µ—Å–ø–æ–∫–æ–π–Ω—ã–π —Å–æ–Ω', 'child_sleep')],
          [Markup.button.callback('‚ö° –ì–∏–ø–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π, –Ω–µ –º–æ–∂–µ—Ç —É—Å–∏–¥–µ—Ç—å', 'child_hyperactive')],
          [Markup.button.callback('üò∞ –¢—Ä–µ–≤–æ–∂–Ω—ã–π, –±–æ–∏—Ç—Å—è —Ä–∞–∑–ª—É–∫–∏', 'child_anxiety')],
          [Markup.button.callback('üìö –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–µ–π –≤ —à–∫–æ–ª–µ', 'child_focus')],
          [Markup.button.callback('ü§ß –ß–∞—Å—Ç–æ –±–æ–ª–µ–µ—Ç –ø—Ä–æ—Å—Ç—É–¥–Ω—ã–º–∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è–º–∏', 'child_illness')],
          [Markup.button.callback('ü´Å –ê—Å—Ç–º–∞ –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥—ã—Ö–∞–Ω–∏–µ–º', 'child_asthma')],
          [Markup.button.callback('üíö –í —Ü–µ–ª–æ–º –∑–¥–æ—Ä–æ–≤, —Ö–æ—á—É –Ω–∞—É—á–∏—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º –Ω–∞–≤—ã–∫–∞–º', 'child_healthy')],
          [Markup.button.callback('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä', 'child_done')]
        ]),
        required: false,
        type: 'multiple_choice'
      },

      chronic_conditions: {
        id: 'chronic_conditions',
        block: 'E',
        condition: (userData) => userData.main_goals && (
          userData.main_goals.includes('goal_pressure') || 
          userData.main_goals.includes('goal_breathing') ||
          userData.current_problems?.includes('prob_high_pressure')
        ),
        text: `üè• *–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è:*\n\n–í–∞–∂–Ω–æ —É—á–µ—Å—Ç—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–∞–∫—Ç–∏–∫. –í—ã–±–µ—Ä–∏—Ç–µ –µ—Å–ª–∏ –µ—Å—Ç—å:`,
        keyboard: Markup.inlineKeyboard([
          [Markup.button.callback('ü´Å –ë—Ä–æ–Ω—Ö–∏–∞–ª—å–Ω–∞—è –∞—Å—Ç–º–∞', 'condition_asthma')],
          [Markup.button.callback('üíî –ì–∏–ø–µ—Ä—Ç–æ–Ω–∏—è (–ø–æ–≤—ã—à–µ–Ω–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ)', 'condition_hypertension')],
          [Markup.button.callback('ü©∏ –°–∞—Ö–∞—Ä–Ω—ã–π –¥–∏–∞–±–µ—Ç', 'condition_diabetes')],
          [Markup.button.callback('‚ù§Ô∏è –°–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è', 'condition_cardio')],
          [Markup.button.callback('üß¨ –ê—É—Ç–æ–∏–º–º—É–Ω–Ω—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è', 'condition_autoimmune')],
          [Markup.button.callback('üß† –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç—Ä–µ—Å—Å/–¥–µ–ø—Ä–µ—Å—Å–∏—è', 'condition_mental')],
          [Markup.button.callback('üçΩÔ∏è –ó–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –ñ–ö–¢', 'condition_digestive')],
          [Markup.button.callback('üîß –î—Ä—É–≥–æ–µ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ', 'condition_other')],
          [Markup.button.callback('üíö –ù–µ—Ç —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π', 'condition_none')],
          [Markup.button.callback('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä', 'condition_done')]
        ]),
        required: false,
        type: 'multiple_choice',
        note: "‚ö†Ô∏è –í–∞–∂–Ω–æ: –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–æ–ø–æ–ª–Ω—è—é—Ç, –Ω–æ –Ω–µ –∑–∞–º–µ–Ω—è—é—Ç –ª–µ—á–µ–Ω–∏–µ!"
      },

      weight_goals: {
        id: 'weight_goals',
        block: 'E',
        condition: (userData) => userData.main_goals && userData.main_goals.includes('goal_weight'),
        text: `‚öñÔ∏è *–¶–µ–ª–∏ –ø–æ —Å–Ω–∏–∂–µ–Ω–∏—é –≤–µ—Å–∞:*\n\n–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–∏—Ö —Ü–µ–ª—è—Ö:`,
        keyboard: Markup.inlineKeyboard([
          [Markup.button.callback('üìè –ù—É–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å –¥–æ 5 –∫–≥', 'weight_5kg')],
          [Markup.button.callback('üìê –ù—É–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å 5-15 –∫–≥', 'weight_15kg')],
          [Markup.button.callback('üìä –ù—É–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å –±–æ–ª–µ–µ 15 –∫–≥', 'weight_more15')],
          [Markup.button.callback('üçΩÔ∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–ø–ø–µ—Ç–∏—Ç–æ–º (–ø–µ—Ä–µ–µ–¥–∞–Ω–∏–µ)', 'weight_appetite')],
          [Markup.button.callback('üêå –ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ–±–º–µ–Ω –≤–µ—â–µ—Å—Ç–≤', 'weight_metabolism')],
          [Markup.button.callback('üò∞ –ó–∞–µ–¥–∞—é —Å—Ç—Ä–µ—Å—Å', 'weight_stress_eating')],
          [Markup.button.callback('ü•ó –•–æ—á—É –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –¥–∏–µ—Ç—É –¥—ã—Ö–∞–Ω–∏–µ–º', 'weight_diet_support')],
          [Markup.button.callback('üßò –ò–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏ –¥–ª—è —Ñ–∏–≥—É—Ä—ã', 'weight_breathing_methods')],
          [Markup.button.callback('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä', 'weight_done')]
        ]),
        required: false,
        type: 'multiple_choice'
      }
    };
  }

  initializeFlowLogic() {
    return {
      standardFlow: [
        'age_group',
        'occupation', 
        'physical_activity',
        'current_problems',
        'stress_level',
        'sleep_quality',
        'priority_problem',
        'breathing_method',
        'breathing_frequency',
        'shallow_breathing',
        'stress_breathing',
        'breathing_experience',
        'time_commitment',
        'format_preferences',
        'main_goals'
      ],
      adaptiveQuestions: [
        'child_specific',
        'chronic_conditions', 
        'weight_goals'
      ]
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ –∞–Ω–∫–µ—Ç–µ
   */
  getNextQuestion(currentQuestion, userData) {
    console.log('üîç getNextQuestion DEBUG:', {
      currentQuestion,
      hasUserData: !!userData,
      userDataKeys: userData ? Object.keys(userData) : []
    });

    const { standardFlow, adaptiveQuestions } = this.flowLogic;
    
    if (standardFlow.includes(currentQuestion)) {
      const currentIndex = standardFlow.indexOf(currentQuestion);
      console.log('üìù Standard flow position:', currentIndex, '/', standardFlow.length - 1);
      
      if (currentIndex < standardFlow.length - 1) {
        const nextQuestion = standardFlow[currentIndex + 1];
        console.log('‚û°Ô∏è Next standard question:', nextQuestion);
        return nextQuestion;
      }
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º
      const firstAdaptive = this.getFirstAdaptiveQuestion(userData);
      console.log('üîÑ Moving to adaptive questions, first:', firstAdaptive);
      return firstAdaptive;
    }
    
    if (adaptiveQuestions.includes(currentQuestion)) {
      const nextAdaptive = this.getNextAdaptiveQuestion(currentQuestion, userData);
      console.log('‚û°Ô∏è Next adaptive question:', nextAdaptive);
      return nextAdaptive;
    }
    
    console.log('üèÅ No more questions, survey complete');
    return null;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
   */
  getFirstAdaptiveQuestion(userData) {
    for (const questionId of this.flowLogic.adaptiveQuestions) {
      const question = this.questions[questionId];
      if (question.condition && question.condition(userData)) {
        console.log('‚úÖ Found first adaptive question:', questionId);
        return questionId;
      }
    }
    console.log('‚ö†Ô∏è No adaptive questions matched conditions');
    return null;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
   */
  getNextAdaptiveQuestion(currentQuestion, userData) {
    const { adaptiveQuestions } = this.flowLogic;
    const currentIndex = adaptiveQuestions.indexOf(currentQuestion);
    
    for (let i = currentIndex + 1; i < adaptiveQuestions.length; i++) {
      const questionId = adaptiveQuestions[i];
      const question = this.questions[questionId];
      if (question.condition && question.condition(userData)) {
        return questionId;
      }
    }
    return null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ª–∂–µ–Ω –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –≤–æ–ø—Ä–æ—Å
   */
  shouldShowQuestion(questionId, userData) {
    const question = this.questions[questionId];
    if (!question) {
      console.log('‚ùå Question not found:', questionId);
      return false;
    }
    
    if (!question.condition) {
      return true;
    }
    
    const shouldShow = question.condition(userData);
    console.log('üéØ shouldShowQuestion:', questionId, '=', shouldShow);
    return shouldShow;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ ID
   */
  getQuestion(questionId) {
    return this.questions[questionId];
  }

 /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
   */
  validateAnswer(questionId, answer, currentSelections = []) {
    const question = this.questions[questionId];
    if (!question) {
      return { valid: false, error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å' };
    }

    console.log('üîç validateAnswer DEBUG:', {
      questionId,
      questionType: question.type,
      answer,
      currentSelectionsCount: currentSelections.length,
      minSelections: question.minSelections,
      maxSelections: question.maxSelections
    });

    switch (question.type) {
      case 'single_choice':
      case 'scale':
        const isValid = typeof answer === 'string' && answer.length > 0;
        return { 
          valid: isValid,
          error: isValid ? null : '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤'
        };

      case 'multiple_choice':
        // –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ "–∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä"
        if (answer === 'done' || answer.includes('done')) {
          if (question.minSelections && currentSelections.length < question.minSelections) {
            return { 
              valid: false, 
              error: `–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º—É–º ${question.minSelections} –≤–∞—Ä–∏–∞–Ω—Ç(–æ–≤)` 
            };
          }
          return { valid: true };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±–æ—Ä–æ–≤
        if (question.maxSelections && currentSelections.length >= question.maxSelections) {
          return { 
            valid: false, 
            error: `–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –º–∞–∫—Å–∏–º—É–º ${question.maxSelections} –≤–∞—Ä–∏–∞–Ω—Ç(–æ–≤)` 
          };
        }

        return { valid: true };

      default:
        return { valid: true };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∞–Ω–∫–µ—Ç—ã
   */
  getProgress(completedQuestions, userData) {
    const totalQuestions = this.getTotalQuestions(userData);
    const completed = completedQuestions.length;
    const percentage = Math.round((completed / totalQuestions) * 100);

    console.log('üìä Progress calculation:', {
      completed,
      total: totalQuestions,
      percentage,
      completedQuestions
    });

    return {
      completed,
      total: totalQuestions,
      percentage
    };
  }

  /**
   * –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  getTotalQuestions(userData) {
    let total = this.flowLogic.standardFlow.length;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –ø–æ–∫–∞–∑–∞—Ç—å—Å—è
    for (const questionId of this.flowLogic.adaptiveQuestions) {
      if (this.shouldShowQuestion(questionId, userData)) {
        total++;
      }
    }

    console.log('üî¢ Total questions calculated:', total, 'for user data:', Object.keys(userData || {}));
    return total;
  }

  /**
   * –ú–∞–ø–ø–∏–Ω–≥ callback –¥–∞–Ω–Ω—ã—Ö –≤ –∑–Ω–∞—á–µ–Ω–∏—è
   */
  mapCallbackToValue(callbackData) {
    const mapping = {
      // –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã
      'age_5-12': '5-12',
      'age_13-17': '13-17',
      'age_18-30': '18-30',
      'age_31-45': '31-45',
      'age_46-60': '46-60',
      'age_60+': '60+',
      'age_for_child': 'for_child',

      // –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏
      'occ_office': 'office_work',
      'occ_home': 'home_work',
      'occ_physical': 'physical_work',
      'occ_student': 'student',
      'occ_maternity': 'maternity_leave',
      'occ_retired': 'retired',
      'occ_management': 'management',

      // –§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
      'activity_daily': 'daily',
      'activity_regular': 'regular',
      'activity_sometimes': 'sometimes',
      'activity_rarely': 'rarely',
      'activity_never': 'never',

      // –¢–µ–∫—É—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
      'prob_chronic_stress': 'chronic_stress',
      'prob_insomnia': 'insomnia',
      'prob_breathing_issues': 'breathing_issues',
      'prob_high_pressure': 'high_pressure',
      'prob_headaches': 'headaches',
      'prob_fatigue': 'fatigue',
      'prob_anxiety': 'anxiety',
      'prob_concentration': 'concentration_issues',
      'prob_back_pain': 'back_pain',
      'prob_digestion': 'digestion_issues',

      // –£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ (1-10)
      'stress_1': 1, 'stress_2': 2, 'stress_3': 3, 'stress_4': 4, 'stress_5': 5,
      'stress_6': 6, 'stress_7': 7, 'stress_8': 8, 'stress_9': 9, 'stress_10': 10,

      // –ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ (1-10)
      'sleep_1': 1, 'sleep_2': 2, 'sleep_3': 3, 'sleep_4': 4, 'sleep_5': 5,
      'sleep_6': 6, 'sleep_7': 7, 'sleep_8': 8, 'sleep_9': 9, 'sleep_10': 10,

      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
      'prio_stress': 'chronic_stress',
      'prio_sleep': 'insomnia',
      'prio_breathing': 'breathing_issues',
      'prio_pressure': 'high_pressure',
      'prio_anxiety': 'anxiety',
      'prio_fatigue': 'fatigue',
      'prio_focus': 'concentration_issues',

      // –ú–µ—Ç–æ–¥—ã –¥—ã—Ö–∞–Ω–∏—è
      'method_nose': 'nose',
      'method_mouth': 'mouth',
      'method_mixed': 'mixed',
      'method_unaware': 'unaware',

      // –ß–∞—Å—Ç–æ—Ç–∞ –ø—Ä–æ–±–ª–µ–º —Å –¥—ã—Ö–∞–Ω–∏–µ–º
      'freq_constantly': 'constantly',
      'freq_often': 'often',
      'freq_sometimes': 'sometimes',
      'freq_rarely': 'rarely',
      'freq_never': 'never',

      // –ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ
      'shallow_yes_often': 'yes_often',
      'shallow_sometimes': 'sometimes',
      'shallow_no': 'no',

      // –î—ã—Ö–∞–Ω–∏–µ –≤ —Å—Ç—Ä–µ—Å—Å–µ
      'stress_rapid': 'rapid_shallow',
      'stress_hold': 'breath_holding',
      'stress_shortage': 'air_shortage',
      'stress_mouth': 'mouth_breathing',
      'stress_no_change': 'no_change',
      'stress_conscious': 'conscious_breathing',

      // –û–ø—ã—Ç —Å –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏
      'exp_never': 'never',
      'exp_few_times': 'few_times',
      'exp_theory': 'theory_only',
      'exp_sometimes': 'sometimes',
      'exp_regularly': 'regularly',
      'exp_expert': 'expert',

      // –í—Ä–µ–º—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–∏
      'time_3-5': '3-5_minutes',
      'time_10-15': '10-15_minutes',
      'time_20-30': '20-30_minutes',
      'time_30+': '30+_minutes',

      // –§–æ—Ä–º–∞—Ç—ã –∏–∑—É—á–µ–Ω–∏—è
      'format_video': 'video',
      'format_audio': 'audio',
      'format_text': 'text',
      'format_online': 'online_live',
      'format_individual': 'individual',
      'format_app': 'mobile_app',

      // –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–µ–ª–∏
      'goal_relax': 'quick_relaxation',
      'goal_resilience': 'stress_resistance',
      'goal_anxiety': 'reduce_anxiety',
      'goal_sleep': 'improve_sleep',
      'goal_energy': 'increase_energy',
      'goal_pressure': 'normalize_pressure',
      'goal_breathing': 'improve_breathing',
      'goal_focus': 'improve_focus',
      'goal_weight': 'weight_management',
      'goal_health': 'general_health',

      // –î–µ—Ç—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
      'child_tantrums': 'tantrums',
      'child_sleep': 'sleep_issues',
      'child_hyperactive': 'hyperactivity',
      'child_anxiety': 'separation_anxiety',
      'child_focus': 'concentration_issues',
      'child_illness': 'frequent_illness',
      'child_asthma': 'breathing_issues',
      'child_healthy': 'preventive_care',

      // –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è
      'condition_asthma': 'asthma',
      'condition_hypertension': 'hypertension',
      'condition_diabetes': 'diabetes',
      'condition_cardio': 'cardiovascular',
      'condition_autoimmune': 'autoimmune',
      'condition_mental': 'mental_health',
      'condition_digestive': 'digestive',
      'condition_other': 'other_chronic',
      'condition_none': 'none',

      // –¶–µ–ª–∏ –ø–æ –≤–µ—Å—É
      'weight_5kg': 'up_to_5kg',
      'weight_15kg': '5_to_15kg',
      'weight_more15': 'more_than_15kg',
      'weight_appetite': 'appetite_control',
      'weight_metabolism': 'slow_metabolism',
      'weight_stress_eating': 'stress_eating',
      'weight_diet_support': 'diet_support',
      'weight_breathing_methods': 'breathing_methods'
    };

    const mappedValue = mapping[callbackData] || callbackData;
    
    console.log('üó∫Ô∏è mapCallbackToValue:', {
      input: callbackData,
      output: mappedValue,
      found: !!mapping[callbackData]
    });

    return mappedValue;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
   */
  getAllQuestions() {
    return Object.keys(this.questions);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –±–ª–æ–∫—É
   */
  getQuestionsByBlock(block) {
    return Object.values(this.questions).filter(q => q.block === block);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏ –∞–Ω–∫–µ—Ç—ã
   */
  isSurveyComplete(completedQuestions, userData) {
    const totalQuestions = this.getTotalQuestions(userData);
    const isComplete = completedQuestions.length >= totalQuestions;
    
    console.log('üèÅ Survey completion check:', {
      completed: completedQuestions.length,
      total: totalQuestions,
      isComplete
    });

    return isComplete;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
   */
  getSurveyStats(completedQuestions, userData) {
    const progress = this.getProgress(completedQuestions, userData);
    const blockStats = this.getBlockStats(completedQuestions);
    
    return {
      ...progress,
      blocks: blockStats,
      isComplete: this.isSurveyComplete(completedQuestions, userData),
      estimatedTimeRemaining: this.getEstimatedTimeRemaining(progress.percentage)
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –±–ª–æ–∫–∞–º
   */
  getBlockStats(completedQuestions) {
    const blocks = {
      'A': { name: '–î–µ–º–æ–≥—Ä–∞—Ñ–∏—è', completed: 0, total: 0 },
      'B': { name: '–ü—Ä–æ–±–ª–µ–º—ã', completed: 0, total: 0 },
      'C': { name: '–î—ã—Ö–∞–Ω–∏–µ', completed: 0, total: 0 },
      'D': { name: '–¶–µ–ª–∏', completed: 0, total: 0 },
      'E': { name: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ', completed: 0, total: 0 }
    };

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –∫–∞–∂–¥–æ–º –±–ª–æ–∫–µ
    Object.values(this.questions).forEach(question => {
      if (blocks[question.block]) {
        blocks[question.block].total++;
        if (completedQuestions.includes(question.id)) {
          blocks[question.block].completed++;
        }
      }
    });

    return blocks;
  }

  /**
   * –û—Ü–µ–Ω–∫–∞ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
   */
  getEstimatedTimeRemaining(completedPercentage) {
    const avgTimePerQuestion = 30; // —Å–µ–∫—É–Ω–¥
    const totalTime = this.flowLogic.standardFlow.length * avgTimePerQuestion;
    const remainingTime = Math.round(totalTime * (100 - completedPercentage) / 100);
    
    return {
      seconds: remainingTime,
      minutes: Math.ceil(remainingTime / 60),
      formatted: this.formatTime(remainingTime)
    };
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
   */
  formatTime(seconds) {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    
    if (mins === 0) {
      return `${secs} —Å–µ–∫`;
    } else if (secs === 0) {
      return `${mins} –º–∏–Ω`;
    } else {
      return `${mins} –º–∏–Ω ${secs} —Å–µ–∫`;
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç—ã
   */
  validateSurveyData(surveyData) {
    const errors = [];
    const warnings = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    const requiredQuestions = Object.values(this.questions)
      .filter(q => q.required && this.flowLogic.standardFlow.includes(q.id))
      .map(q => q.id);

    for (const questionId of requiredQuestions) {
      if (!surveyData[questionId]) {
        errors.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å: ${questionId}`);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    if (surveyData.stress_level && (surveyData.stress_level < 1 || surveyData.stress_level > 10)) {
      errors.push('–£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 10');
    }

    if (surveyData.sleep_quality && (surveyData.sleep_quality < 1 || surveyData.sleep_quality > 10)) {
      errors.push('–ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10');
    }

    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    if (surveyData.stress_level >= 8) {
      warnings.push('–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ —Ç—Ä–µ–±—É–µ—Ç –æ—Å–æ–±–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è');
    }

    if (surveyData.sleep_quality <= 3) {
      warnings.push('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞');
    }

    return {
      isValid: errors.length === 0,
      errors,
      warnings
    };
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
   */
  exportConfig() {
    return {
      totalQuestions: Object.keys(this.questions).length,
      standardFlowLength: this.flowLogic.standardFlow.length,
      adaptiveQuestionsCount: this.flowLogic.adaptiveQuestions.length,
      questionsByBlock: this.getBlockStats([]),
      version: '1.0.0',
      lastUpdated: new Date().toISOString()
    };
  }
}

module.exports = ExtendedSurveyQuestions;
