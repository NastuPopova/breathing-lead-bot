#!/usr/bin/env node
// –§–∞–π–ª: scripts/health-check.js
// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø - –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ Lead Bot

require('dotenv').config();
const axios = require('axios');

class HealthChecker {
  constructor() {
    this.results = {
      timestamp: new Date().toISOString(),
      overall: 'UNKNOWN',
      components: {}
    };
  }

  async checkAll() {
    console.log('üîç –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã...\n');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    await this.checkTelegramBot();
    await this.checkMainBotConnection(); // –ò–°–ü–†–ê–í–õ–ï–ù–û
    await this.checkDatabase();
    await this.checkCRM();
    await this.checkEnvironmentVariables();

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    this.calculateOverallHealth();

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    this.printResults();

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    process.exit(this.results.overall === 'HEALTHY' ? 0 : 1);
  }

  async checkTelegramBot() {
    console.log('ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram Bot API...');
    
    try {
      const token = process.env.LEAD_BOT_TOKEN;
      if (!token) {
        throw new Error('LEAD_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      }

      const response = await axios.get(`https://api.telegram.org/bot${token}/getMe`, {
        timeout: 10000
      });

      if (response.data.ok) {
        this.results.components.telegram_bot = {
          status: 'HEALTHY',
          message: `–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: @${response.data.result.username}`,
          response_time: response.headers['x-response-time'] || 'N/A'
        };
        console.log('‚úÖ Telegram Bot API - OK');
      } else {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Telegram API');
      }
    } catch (error) {
      this.results.components.telegram_bot = {
        status: 'UNHEALTHY',
        message: error.message,
        error: error.code || 'UNKNOWN_ERROR'
      };
      console.log('‚ùå Telegram Bot API - –û–®–ò–ë–ö–ê:', error.message);
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –±–æ—Ç—É (–Ω–µ API)
  async checkMainBotConnection() {
    console.log('üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞...');
    
    try {
      const config = require('../config');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ª–∏ API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
      if (!config.MAIN_BOT_API_URL) {
        this.results.components.main_bot = {
          status: 'HEALTHY',
          message: '–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º - API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞',
          mode: 'standalone',
          main_bot_link: 'https://t.me/breathing_opros_bot'
        };
        console.log('‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç - –ê–í–¢–û–ù–û–ú–ù–´–ô –†–ï–ñ–ò–ú');
        return;
      }

      // –ï—Å–ª–∏ API –≤–∫–ª—é—á–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
      const response = await axios.get(`${config.MAIN_BOT_API_URL}/api/health`, {
        timeout: 15000,
        headers: {
          'User-Agent': 'BreathingLeadBot-HealthCheck/1.0'
        }
      });

      this.results.components.main_bot = {
        status: 'HEALTHY',
        message: 'API –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–µ–Ω',
        response_time: response.headers['x-response-time'] || 'N/A',
        version: response.data.version || 'Unknown'
      };
      console.log('‚úÖ API –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ - OK');
    } catch (error) {
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
      const config = require('../config');
      if (!config.MAIN_BOT_API_URL) {
        this.results.components.main_bot = {
          status: 'HEALTHY',
          message: '–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è',
          mode: 'standalone'
        };
        console.log('‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç - –ê–í–¢–û–ù–û–ú–ù–´–ô –†–ï–ñ–ò–ú');
      } else {
        this.results.components.main_bot = {
          status: 'DEGRADED',
          message: 'API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ',
          error: error.message,
          fallback_mode: 'local_storage'
        };
        console.log('‚ö†Ô∏è API –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ - –ù–ï–î–û–°–¢–£–ü–ï–ù (–∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º)');
      }
    }
  }

  async checkDatabase() {
    console.log('üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
      const dbUrl = process.env.DATABASE_URL;
      if (!dbUrl) {
        this.results.components.database = {
          status: 'HEALTHY',
          message: '–ë–î –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ'
        };
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö - –õ–û–ö–ê–õ–¨–ù–û–ï –•–†–ê–ù–ï–ù–ò–ï');
        return;
      }

      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ë–î
      this.results.components.database = {
        status: 'HEALTHY',
        message: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ'
      };
      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö - OK');
    } catch (error) {
      this.results.components.database = {
        status: 'DEGRADED',
        message: '–ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ',
        error: error.message,
        fallback: 'local_storage'
      };
      console.log('‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö - –ù–ï–î–û–°–¢–£–ü–ù–ê (–ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ)');
    }
  }

  async checkCRM() {
    console.log('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ CRM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...');
    
    try {
      const crmUrl = process.env.CRM_WEBHOOK_URL;
      if (!crmUrl) {
        this.results.components.crm = {
          status: 'HEALTHY',
          message: 'CRM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –ª–∏–¥—ã –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏'
        };
        console.log('‚úÖ CRM - –û–¢–ö–õ–Æ–ß–ï–ù (–∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω–∞)');
        return;
      }

      const response = await axios.post(crmUrl, {
        test: true,
        source: 'health-check',
        timestamp: Date.now()
      }, {
        timeout: 10000,
        headers: {
          'Content-Type': 'application/json',
          'User-Agent': 'BreathingLeadBot-HealthCheck/1.0'
        }
      });

      this.results.components.crm = {
        status: 'HEALTHY',
        message: 'CRM webhook –æ—Ç–≤–µ—á–∞–µ—Ç',
        response_time: response.headers['x-response-time'] || 'N/A'
      };
      console.log('‚úÖ CRM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è - OK');
    } catch (error) {
      this.results.components.crm = {
        status: 'DEGRADED',
        message: 'CRM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ª–∏–¥—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏',
        error: error.message,
        fallback: 'admin_panel'
      };
      console.log('‚ö†Ô∏è CRM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è - –ù–ï–î–û–°–¢–£–ü–ï–ù (–∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω–∞)');
    }
  }

  checkEnvironmentVariables() {
    console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
    
    const required = ['LEAD_BOT_TOKEN'];
    const optional = ['MAIN_BOT_API_URL', 'ADMIN_ID', 'CRM_WEBHOOK_URL'];
    
    const missing = required.filter(key => !process.env[key]);
    const optionalMissing = optional.filter(key => !process.env[key]);
    
    if (missing.length > 0) {
      this.results.components.environment = {
        status: 'UNHEALTHY',
        message: `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ${missing.join(', ')}`,
        missing_required: missing,
        missing_optional: optionalMissing
      };
      console.log('‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è - –û–®–ò–ë–ö–ê: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç', missing.join(', '));
    } else {
      this.results.components.environment = {
        status: 'HEALTHY',
        message: '–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã',
        missing_optional: optionalMissing.length > 0 ? optionalMissing : null,
        admin_configured: !!process.env.ADMIN_ID
      };
      console.log('‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è - OK');
      if (optionalMissing.length > 0) {
        console.log('‚ö†Ô∏è –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã:', optionalMissing.join(', '));
      }
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–±—â–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è
  calculateOverallHealth() {
    const statuses = Object.values(this.results.components).map(c => c.status);
    
    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    const criticalComponents = ['telegram_bot', 'environment'];
    const criticalStatuses = criticalComponents.map(comp => 
      this.results.components[comp]?.status
    );
    
    if (criticalStatuses.includes('UNHEALTHY')) {
      this.results.overall = 'UNHEALTHY';
    } else if (statuses.includes('UNHEALTHY')) {
      this.results.overall = 'DEGRADED'; // –ù–µ–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
    } else if (statuses.includes('DEGRADED')) {
      this.results.overall = 'HEALTHY'; // Degraded –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ = –Ω–æ—Ä–º–∞
    } else {
      this.results.overall = 'HEALTHY';
    }
  }

  printResults() {
    console.log('\n' + '='.repeat(60));
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò –ó–î–û–†–û–í–¨–Ø');
    console.log('='.repeat(60));
    
    console.log(`üïê –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${this.results.timestamp}`);
    
    const overallEmoji = {
      'HEALTHY': '‚úÖ',
      'DEGRADED': '‚ö†Ô∏è',
      'UNHEALTHY': '‚ùå'
    };
    
    console.log(`${overallEmoji[this.results.overall]} –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${this.results.overall}`);
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç—ã
    console.log(`ü§ñ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: –ê–í–¢–û–ù–û–ú–ù–´–ô (Lead Bot —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)`);
    console.log();
    
    // –î–µ—Ç–∞–ª–∏ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
    Object.entries(this.results.components).forEach(([component, data]) => {
      const emoji = data.status === 'HEALTHY' ? '‚úÖ' : data.status === 'UNHEALTHY' ? '‚ùå' : '‚ö†Ô∏è';
      console.log(`${emoji} ${component.toUpperCase()}: ${data.status}`);
      console.log(`   ‚îî‚îÄ ${data.message}`);
      if (data.response_time) {
        console.log(`   ‚îî‚îÄ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${data.response_time}`);
      }
      if (data.mode) {
        console.log(`   ‚îî‚îÄ –†–µ–∂–∏–º: ${data.mode}`);
      }
      if (data.fallback) {
        console.log(`   ‚îî‚îÄ –†–µ–∑–µ—Ä–≤: ${data.fallback}`);
      }
      if (data.error && data.status === 'UNHEALTHY') {
        console.log(`   ‚îî‚îÄ –û—à–∏–±–∫–∞: ${data.error}`);
      }
    });
    
    console.log('\n' + '='.repeat(60));
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
    if (this.results.overall === 'UNHEALTHY') {
      console.log('üîß –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:');
      console.log();
      
      Object.entries(this.results.components).forEach(([component, data]) => {
        if (data.status === 'UNHEALTHY') {
          switch (component) {
            case 'telegram_bot':
              console.log('‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ LEAD_BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ');
              console.log('‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–æ—Ç —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ @BotFather');
              break;
            case 'environment':
              console.log('‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example');
              console.log('‚Ä¢ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ');
              break;
          }
          console.log();
        }
      });
    } else if (this.results.overall === 'DEGRADED') {
      console.log('üí° –ò–ù–§–û–†–ú–ê–¶–ò–Ø:');
      console.log('‚Ä¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ');
      console.log('‚Ä¢ –í—Å–µ –ª–∏–¥—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ');
      console.log('‚Ä¢ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ /admin');
      console.log('‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)');
      console.log();
    } else {
      console.log('üéâ –í–°–ï –°–ò–°–¢–ï–ú–´ –†–ê–ë–û–¢–ê–Æ–¢ –û–¢–õ–ò–ß–ù–û!');
      console.log('üí° –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ');
      console.log();
    }
    
    console.log('üìã –î–û–°–¢–£–ü–ù–´–ï –§–£–ù–ö–¶–ò–ò:');
    console.log('‚Ä¢ ‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥—ã—Ö–∞–Ω–∏—è (18 –≤–æ–ø—Ä–æ—Å–æ–≤)');
    console.log('‚Ä¢ ‚úÖ VERSE-–∞–Ω–∞–ª–∏–∑ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è');
    console.log('‚Ä¢ ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö PDF');
    console.log('‚Ä¢ ‚úÖ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (/admin)');
    console.log('‚Ä¢ ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–∏–¥–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ');
    console.log('‚Ä¢ ‚úÖ –°—Å—ã–ª–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂');
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JSON
  exportResults() {
    return JSON.stringify(this.results, null, 2);
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
if (require.main === module) {
  const checker = new HealthChecker();
  checker.checkAll().catch(error => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
    process.exit(2);
  });
}

module.exports = HealthChecker;
