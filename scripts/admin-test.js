// –§–∞–π–ª: scripts/admin-test.js
// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏

require('dotenv').config();

async function testAdminPanel() {
  console.log('üéõÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏...\n');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
    const requiredVars = ['LEAD_BOT_TOKEN', 'ADMIN_ID'];
    const missingVars = requiredVars.filter(key => !process.env[key]);
    
    if (missingVars.length > 0) {
      console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:', missingVars.join(', '));
      process.exit(1);
    }
    console.log('‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã\n');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤
    console.log('2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:');
    const fs = require('fs');
    const files = [
      'modules/admin/enhanced_admin_panel.js',
      'core/admin_integration.js',
      'core/bot.js'
    ];
    
    files.forEach(file => {
      if (fs.existsSync(file)) {
        console.log(`‚úÖ ${file}`);
      } else {
        console.log(`‚ùå ${file} - —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
    });
    console.log();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('3Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞:');
    const BreathingLeadBot = require('../core/bot');
    const bot = new BreathingLeadBot();
    
    console.log('‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    console.log(`‚úÖ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: ${bot.adminIntegration ? '–∞–∫—Ç–∏–≤–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}`);
    
    if (bot.adminIntegration) {
      console.log(`‚úÖ Admin ID: ${bot.adminIntegration.adminPanel.adminId}`);
    }
    console.log();

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
    if (bot.adminIntegration) {
      console.log('4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:');
      const diagnostics = await bot.runDiagnostics();
      console.log(`‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: ${diagnostics.overall_status}`);
      
      Object.entries(diagnostics.checks).forEach(([check, result]) => {
        const emoji = result.status === 'OK' ? '‚úÖ' : result.status === 'WARNING' ? '‚ö†Ô∏è' : '‚ùå';
        console.log(`${emoji} ${check}: ${result.message}`);
      });
      console.log();
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    if (bot.adminIntegration) {
      console.log('5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:');
      const backup = await bot.createBackup();
      console.log(`‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞`);
      console.log(`üìä –õ–∏–¥–æ–≤ –≤ –∫–æ–ø–∏–∏: ${backup.metadata.total_leads}`);
      console.log(`üíæ –†–∞–∑–º–µ—Ä: ${Math.round(backup.metadata.backup_size / 1024)} KB`);
      console.log();
    }

    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /admin –≤ –±–æ—Ç–µ');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    console.error('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ —Ñ–∞–π–ª—ã');
    process.exit(1);
  }
}

if (require.main === module) {
  testAdminPanel();
}

module.exports = testAdminPanel;
