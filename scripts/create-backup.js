/ –§–∞–π–ª: scripts/create-backup.js
// –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö

require('dotenv').config();
const fs = require('fs');
const path = require('path');

async function createBackup() {
  console.log('üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...\n');

  try {
    const BreathingLeadBot = require('../core/bot');
    const bot = new BreathingLeadBot();

    if (!bot.adminIntegration) {
      console.log('‚ùå –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞');
      process.exit(1);
    }

    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    const backup = await bot.createBackup();
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤
    const backupsDir = './backups';
    if (!fs.existsSync(backupsDir)) {
      fs.mkdirSync(backupsDir, { recursive: true });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—ç–∫–∞–ø
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const fileName = `backup_${timestamp}.json`;
    const filePath = path.join(backupsDir, fileName);
    
    fs.writeFileSync(filePath, JSON.stringify(backup, null, 2));

    console.log('‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üìÅ –§–∞–π–ª: ${filePath}`);
    console.log(`üìä –õ–∏–¥–æ–≤: ${backup.metadata.total_leads}`);
    console.log(`üíæ –†–∞–∑–º–µ—Ä: ${Math.round(backup.metadata.backup_size / 1024)} KB`);
    console.log(`üïê –í—Ä–µ–º—è: ${backup.timestamp}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  createBackup();
}

module.exports = createBackup;
